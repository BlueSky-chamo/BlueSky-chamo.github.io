<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[回顾51单片机之定时器简介]]></title>
      <url>/2017/04/21/%E5%9B%9E%E9%A1%BE%E5%8D%95%E7%89%87%E6%9C%BA%E4%B9%8B%E5%AE%9A%E6%97%B6%E5%99%A8%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<h1 id="时钟周期"><a href="#时钟周期" class="headerlink" title="时钟周期"></a>时钟周期</h1><p>单片机外接晶振的振荡周期就是时钟周期。80C51单片机外接了一个11.0592M的晶体振荡器，单片机系统的时钟周期是1/11.0592M，周期是频率的倒数。51单片机时钟频率范围是1.MHZ-12MHZ，把一个时钟周期定义为一个节拍（P）,二个节拍定义为一个状态周期（S）。<br><a id="more"></a></p>
<h1 id="机器周期"><a href="#机器周期" class="headerlink" title="机器周期"></a>机器周期</h1><p>单片机执行指令所消耗的最小时间单位。51单片机采用的CISC(复杂指令指令集)，各条指令执行的时间可能不一样，但是它们执行的时间必须是机器周期的整数倍。51系列单片机将一个机器周期划分为6个状态周期，即S1-S6，每个状态周期又由两个节拍组成，P1和P2，而P1=P2=时钟周期。因此，51单片机的机器周期=6个状态周期=12个时钟周期。这也就是经常说的51单片机的的时钟频率是晶振频率的12分频，或者是1/12。</p>
<h1 id="指令周期"><a href="#指令周期" class="headerlink" title="指令周期"></a>指令周期</h1><p>指令周期执行某一条指令所消耗的时间，它等于机器周期的整数倍。指令不同，所需的机器周期数也不同。简单的单字节指令。在取指令周期中，指令取出到指令寄存器后立即译码执行；复杂的指令如转移指令，乘法指令，则需要两个或以上的机器周期。  </p>
<h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><p>C51单片机内部设有两个16位的可编程定时器/计数器，分别由两个8位专用寄存器组成，即：T0由TH0和TL0构成；T1由TH1和TL1构成，其访问地址依次为8AH-8DH。此外，其内部还有一个8位的定时器方式寄存器TMOD和一个8位的定时控制寄存器TCON，TMOD主要是用于选定定时器的工作方式；TCON主要是用于控制定时器的启动停止，此外TCON还可以保存T0、T1的溢出和中断标志。当定时器工作在计数方式时，外部事件通过引脚T0（P3.4）和T1（P3.5）输入。<br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-4-24/62671924-file_1492996251417_b444.png" alt=""></p>
<h2 id="定时计数原理"><a href="#定时计数原理" class="headerlink" title="定时计数原理"></a>定时计数原理</h2><p>16位的定时器/计数器实质上就是一个加1计数器,当定时器/计数器为定时工作方式时，计数器的加1信号由振荡器的12分频信号产生，即每过一个机器周期，计数器加1，直至计满溢出为止。显然，定时器的定时时间与系统的振荡频率有关。因一个机器周期等于12个振荡周期，所以计数频率fcount=1/12osc。如果晶振为12MHz，则计数周期为：</p>
<pre><code>T=1/（12×106）Hz×1/12=1μs
</code></pre><p>当定时器/计数器为计数工作方式时，通过引脚T0和T1对外部信号计数，外部脉冲的下降沿将触发计数。计数器在每个机器周期的S5P2期间采样引脚输入电平。若一个机器周期采样值为1，下一个机器周期采样值为0，则计数器加1。此后的机器周期S3P1期间，新的计数值装入计数器。所以检测一个由1至0的跳变需要两个机器周期，故外部事件的最高计数频率为振荡频率的1/24。例如，如果选用12MHz晶振，则最高计数频率为0.5MHz。为了确保某给定电平在变化前至少被采样一次，外部计数脉冲的高电平与低电平保持时间均需在一个机器周期以上。</p>
<h2 id="定时器-计数器方式寄存器TMOD"><a href="#定时器-计数器方式寄存器TMOD" class="headerlink" title="定时器/计数器方式寄存器TMOD"></a>定时器/计数器方式寄存器TMOD</h2><p>定时器方式控制寄存器TMOD在特殊功能寄存器中，字节地址为89H，无位地址。  </p>
<p>C／T：定时器／计数器选择位。C/T＝1，为计数器方式；C／T＝0，为定时器方式。</p>
<p>M1M0：工作方式选择位，定时器／计数器的4种工作方式由M1M0设定。</p>
<p>0 0                  工作方式0          13位计数器</p>
<p>0 1                  工作方式1          16位计数器</p>
<p>1 0                  工作方式2           自动再装入8位计数器</p>
<p>1 1                  工作方式3          定时器0：分成两个8位计数器，定时器1：停止计数<br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-4-24/52992728-file_1492996982934_2ab7.jpg" alt=""></p>
<h2 id="定时器-计数器控制寄存器TCON"><a href="#定时器-计数器控制寄存器TCON" class="headerlink" title="定时器/计数器控制寄存器TCON"></a>定时器/计数器控制寄存器TCON</h2><p> TCON在特殊功能寄存器中，字节地址为88H，位地址(由低位到高位)为88H一8FH<br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-4-24/60731089-file_1492997134291_7afd.jpg" alt=""></p>
<p>TF1：定时器1溢出标志位。当字时器1计满溢出时，由硬件使TF1置“1”，并且申请中断。进入中断服务程序后，由硬件自动清“0”，在查询方式下用软件清“0”。</p>
<p>TR1：定时器1运行控制位。由软件清“0”关闭定时器1。当GATE=1，且INT1为高电平时，TR1置“1”启动定时器1；当GATE=0，TR1置“1”启动定时器1。</p>
<p>TF0：定时器0溢出标志。其功能及操作情况同TF1。</p>
<p>TR0：定时器0运行控制位。其功能及操作情况同TR1。</p>
<p>IE1：外部中断1请求标志。</p>
<p>IT1：外部中断1触发方式选择位。</p>
<p>IE0：外部中断0请求标志。</p>
<p>IT0：外部中断0触发方式选择位。</p>
<h1 id="定时器初始化"><a href="#定时器初始化" class="headerlink" title="定时器初始化"></a>定时器初始化</h1><h2 id="确定工作方式"><a href="#确定工作方式" class="headerlink" title="确定工作方式"></a>确定工作方式</h2><p>方式0：13位定时计数方式，最大计数值为2^13=8192,定时8192个机器周期。</p>
<p>方式1：16位定时计数方式，最大计数值为2^16=65536,定时65536个机器周期。此方式可实现最大的定时时间和最大计数次数。是最常用方式之一。</p>
<p>方式2：8位自动重装计数方式，最大计数值为2^8=256,定时256个机器周期。此方式工作时定时或计数到了不用重装初值，精度较高。另外在串口通讯时常用此方式。是最常用方式之一。</p>
<p>方式3：特殊工作方式。将定时器0分成两个8位功能不全的定时计数器，要占用T1部分功能。</p>
<h2 id="定时器初值"><a href="#定时器初值" class="headerlink" title="定时器初值"></a>定时器初值</h2><p>定时时间=（最大计数值-初值）X 晶振周期 X 12<br>或 定时时间=（最大计数值-初值）X 机器周期    </p>
<p>定时器寄存器为16为，分高8位TH0和低8位TL0,以8位为单位进行封装，将TH0装入初值N/256,低8位TL0装入初值N%256。即定时器初值计算公式为：<br>TH0=(最大计数值M-初值N)/256<br>TL0=(最大计数值M-初值N)%256  </p>
<p>机器周期=12时钟周期，12MHZ晶振下，机器周期=1us,定时1s=1000000机器周期，初值=最大机器周期-初值机器周期</p>
<p>例如：<br>10MS定时器初值的计算：<br>1.晶振12M<br>12MHz除12为1MHz，也就是说一秒=1000000次机器周期。10ms=10000次 机器周期。<br>65536-10000=55536(d8f0)<br>TH0=0xd8，TL0=0xf0  </p>
<p>2.晶振11.0592M<br>11.0592MHz除12为921600Hz，就是一秒921600次机器周期，10ms=9216次机器周期。<br>65536-9216=56320(dc00)<br>TH0=0xdc，TL0=0x00  </p>
<h2 id="启动定时器"><a href="#启动定时器" class="headerlink" title="启动定时器"></a>启动定时器</h2><p>根据需要打开定时器中断，启动定时器。</p>
<pre><code>EA = 1;             //打开总中断
ET0 = 1;         //定时器0中断
TR0 = 1;         //打开定时器0
</code></pre>]]></content>
      
        <categories>
            
            <category> 单片机 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> 定时器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[回顾51单片机之enum用法]]></title>
      <url>/2017/04/21/%E5%9B%9E%E9%A1%BE%E5%8D%95%E7%89%87%E6%9C%BA%E4%B9%8Benum%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在单片机工程中使用enum来替代define，增加代码的可读性<br><a id="more"></a></p>
<h1 id="enum简介"><a href="#enum简介" class="headerlink" title="enum简介"></a>enum简介</h1><h2 id="enum定义"><a href="#enum定义" class="headerlink" title="enum定义"></a>enum定义</h2><pre><code>enum DAY
{
      MON=1, TUE, WED, THU, FRI, SAT, SUN
};
</code></pre><p>(1) 枚举型是一个集合，集合中的元素(枚举成员)是一些命名的整型常量，元素之间用逗号隔开。<br>(2) DAY是一个标识符，可以看成这个集合的名字，是一个可选项，即是可有可无的项。<br>(3) 第一个枚举成员的默认值为整型的0，后续枚举成员的值在前一个成员上加1。<br>(4) 可以人为设定枚举成员的值，从而自定义某个范围内的整数。<br>(5) 枚举型是预处理指令#define的替代。<br>(6) 类型定义以分号结束。<br>在实际使用中，更倾向于利用Typedef进行定义，定以后Day=enum DAY，方便枚举对象的声明与赋值</p>
<pre><code>typedef enum DAY
    {
          MON=1, TUE, WED, THU, FRI, SAT, SUN
    }Day;
</code></pre><h2 id="enum变量声明与赋值"><a href="#enum变量声明与赋值" class="headerlink" title="enum变量声明与赋值"></a>enum变量声明与赋值</h2><p>以typedef为例:</p>
<pre><code>Day day=MON;
</code></pre><h1 id="单片机应用实例"><a href="#单片机应用实例" class="headerlink" title="单片机应用实例"></a>单片机应用实例</h1><p>在单片机工程中的Led.h头文件中，定义以下结构体表面led灯号</p>
<pre><code>/************************************************************
***结构体名称：Led_Num
***简述：led灯号结构体，表面属于哪个led
*************************************************************/
typedef enum LedNum
{
    LED_ALL=0,
    LED1=1,
    LED2=2,
    LED3=3,
    LED4=4,
    LED5=5,
    LED6=6,
    LED7=7,
    LED8=8
}Led_Num;
/************************************************************
***结构体名称：Led_Status
***简述：led灯状态，亮或熄灭
*************************************************************/
typedef enum LedStatus
{
    OFF=0,
    ON=1
}Led_Status;
</code></pre><p>在Led.c源文件中，Led_ON_OFF()用来点亮或熄灭指定led灯，如下：</p>
<pre><code>/**************************************************************
//  作者:chamo
//  日期:2017-4-20
//  函数名:Led_ON_OFF
//  功能:指定led灯亮熄
//  输入参数      
//  参数1:led等号LedNum
//  参数2:led状态
//  参数3:LedStatus，ON or OFF
//  参数4:
//  返回值:无
**************************************************************/
void Led_ON_OFF(int LedNum,int LedStatus)
{
    switch(LedNum)
    {
        case LED_ALL:
            if(LedStatus)
                {
                    GPIO_LED=GPIO_LED&amp;0x00;
                }
            else
                {
                    GPIO_LED=GPIO_LED|0xFF;
                }
        break;
        case LED1:
            if(LedStatus)
                {
                    GPIO_LED=GPIO_LED&amp;0xFE;
                }
            else
                {
                    GPIO_LED=GPIO_LED|0x01;
                }
        break;
        case LED2:
            if(LedStatus)
                {
                    GPIO_LED=GPIO_LED&amp;0xFD;
                }
            else
                {
                    GPIO_LED=GPIO_LED|0x02;
                }
        break;
        case LED3:
            if(LedStatus)
                {
                    GPIO_LED=GPIO_LED&amp;0xFB;
                }
            else
                {
                    GPIO_LED=GPIO_LED|0x04;
                }
        break;
        case LED4:
            if(LedStatus)
                {
                    GPIO_LED=GPIO_LED&amp;0xF7;
                }
            else
                {
                    GPIO_LED=GPIO_LED|0x08;
                }
        break;
        case LED5:
            if(LedStatus)
                {
                    GPIO_LED=GPIO_LED&amp;0xEF;
                }
            else
                {
                    GPIO_LED=GPIO_LED|0x10;
                }
        break;
        case LED6:
            if(LedStatus)
                {
                    GPIO_LED=GPIO_LED&amp;0xDF;
                }
            else
                {
                    GPIO_LED=GPIO_LED|0x20;
                }
        break;
        case LED7:
            if(LedStatus)
                {
                    GPIO_LED=GPIO_LED&amp;0xBF;
                }
            else
                {
                    GPIO_LED=GPIO_LED|0x40;
                }
        break;
        case LED8:
            if(LedStatus)
                {
                    GPIO_LED=GPIO_LED&amp;0x7F;
                }
            else
                {
                    GPIO_LED=GPIO_LED|0x80;
                }
        break;

    }
</code></pre><p>在main.c中，调用led接口函数即可实现指定led的亮熄  </p>
<pre><code>#include &lt;stdio.h&gt;
#include &quot;common.h&quot;
#include &quot;Led.h&quot;
int main()
{ 
    Led_Num LedNum=LED1;//1号灯
    Led_Status LedStatus=ON;//亮

    Initial_Peripheral();//初始化外设
    while(1)
    {
        Led_ON_OFF(LedNum,LedStatus);
    }
    return 0;
}
</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="enum与define比较"><a href="#enum与define比较" class="headerlink" title="enum与define比较"></a>enum与define比较</h2><p>enum:<br>缺点：只能为整型值，不仅占用空间，还消耗cpu资源<br>优点：多个相关值一组，程序更容易维护，代码更加清晰，范围内有效，不会和其他定义冲突  </p>
<p>define:<br>缺点：没有范围限制，全局有效，容易产生冲突<br>优点：可为多种类型之，如字符串，整型，浮点型</p>
<p>在一般情况下尽量选择enum,增加代码的可读性和维护性。</p>
]]></content>
      
        <categories>
            
            <category> 单片机 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> enum </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux下FTP配置]]></title>
      <url>/2017/03/30/linux%E4%B8%8Bftp%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="FTP原理"><a href="#FTP原理" class="headerlink" title="FTP原理"></a><strong>FTP原理</strong></h1><p>文件传输协议（FTP）是一种传统的网络协议，主要功能是实现服务器端与客户端直接的文件传送。FTP以TCP封装包的模式进行服务器与客户的连接，当连接建立后，使用者可以通过客户端程序连接服务器端，并进行文件的下载和上传。此外，还可以直接管理用户在服务器上的文件。<br><a id="more"></a></p>
<h1 id="FTP功能"><a href="#FTP功能" class="headerlink" title="FTP功能"></a><strong>FTP功能</strong></h1><p>1）不同等级的使用者。<br>FTP预设情况下提供三种主要的身份：<br>实体账号（real user）<br>访客（guest）<br>匿名登入者（anonymous）<br>分成三种身份可以提高主机管理的便利性。例如，实体用户可以进行的动作比较多，而匿名登入者仅提供一个下载功能。</p>
<p>2）命令记录与登入文件记录。<br>FTP可以利用系统的syslogd进行数据的记录。记录的数据包括了使用者曾经下达的命令与使用者传输的数据的记录</p>
<p>3）限制或解除使用者所在的根目录。<br>为了避免使用者进入到linux系统的其他目录。这有利于提高系统的安全性。</p>
<h1 id="FTP的用户类型"><a href="#FTP的用户类型" class="headerlink" title="FTP的用户类型"></a><strong>FTP的用户类型</strong></h1><p><strong>匿名用户（anonymous）</strong>：<br>常说的匿名登录，ftp服务器支持匿名登录时通常当用户匿名访问可以使用ftp/anoymous这两个用户匿名登录。<br><strong>本地用户(Real user)</strong>：<br>这类用户是指在FTP服务上拥有帐号，账号名称，密码信息存放在passwd,shadow文件中。当这类用户登录FTP服务器的时候，其默认的主目录就是其帐号命名的目录。但是，其还可以变更到其他目录中去。<br><strong>虚拟用户(Guest)</strong>：<br>使用独立的账号/密码数据文件，只能够访问自己的主目录。服务器通过这种方式来保障FTP服务上其他文件的安全性。</p>
<h1 id="安装VSFTPD"><a href="#安装VSFTPD" class="headerlink" title="安装VSFTPD"></a><strong>安装VSFTPD</strong></h1><p>sudo apt-get install vsftpd  </p>
<h1 id="配置VSFTPD"><a href="#配置VSFTPD" class="headerlink" title="配置VSFTPD"></a><strong>配置VSFTPD</strong></h1><p><strong>/etc/vsftpd.conf:主要配置文件：</strong><br><strong>关于主机的设置：</strong><br>connect_from_port_20=YES   ftp-data启动主动联机的port 20<br>listen_port=20   ftp访问端口<br>dirmessage_enable=YES   当使用者进入某个目录时，会显示该目录需要注意的内容。显示的文件预设是.message<br>write_enable=YES  是否允许使用者具有写入的权限<br>idle_session_timeout=600  空闲会话的超时限制。默认600s.空闲600s后自动断开连接<br>data_connection_timeout=120  数据超时限制，默认120s。    </p>
<p><strong>实体用户登入者的配置</strong>：<br>local_enable=YES  实体用户允许登入<br>local_umask=022   用户的权限（把本该是777权限的文件夹改为了755）如果注释了该参数，该参数会启用默认权限掩码077，那么上传的文件权限将会变为600，文件夹权限变为700<br>chroot_local_user=YES   是否将使用者限制在自己的主目录中<br>chroot_list_enable=YES   是否启用将某些实体用户限制在主目录<br>chroot_list_fiel=/etc/vsftpd.chroot_list   被限制的实体用户主目录路径  </p>
<p><strong>匿名用户登入的配置</strong><br>anonymous_enable=YES    允许匿名用户登入<br>anon_upload_enable=YES  允许匿名用户上传<br>anon_mkdir_write_enable=YES   允许匿名用户创建文件夹<br>deny_email_file=/etc/vsftpd.banned_emails  被拒绝的email地址<br>async_abor_enable=YES      是否认可异步的ABOR命令<br>xferlog_enable=YES        是否记录上传及下载日志<br>xferlog_fiel=/ver/log/vsftpd.log   上传和下载日志路径<br>xferlog_std_format=YES      是否设定为wu ftp相同的登入格式<br>nopriv_user=ftpsecure       以nobody作为此一服务执行者的权限，安全性较高<br>pam_service_name=vsftpd     pam模块的名称  </p>
<p>/etc/pam.d/vsftpd:pam模块进行身份确认<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-18/56981093.jpg" alt=""><br>/etc/ftpusers:限制使用的ftp用户列表<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-18/28917045.jpg" alt=""><br>/usr/shin/vsftpd:vsftpd的主要执行文件  </p>
<h1 id="重启VSFTPD"><a href="#重启VSFTPD" class="headerlink" title="重启VSFTPD"></a><strong>重启VSFTPD</strong></h1><p>udo service vsftpd restart  </p>
<h1 id="匿名用户登入"><a href="#匿名用户登入" class="headerlink" title="匿名用户登入"></a><strong>匿名用户登入</strong></h1><p>在/etc/vsftpd.conf中配置允许匿名用户登入 （一般不允许）<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-18/64837639.jpg" alt="">  </p>
<h1 id="实体用户登入"><a href="#实体用户登入" class="headerlink" title="实体用户登入"></a><strong>实体用户登入</strong></h1><p>在/etc/vsftpd.conf中配置运行实体用户登入<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-18/85348349.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux服务器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux服务器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux下telnet远程登入]]></title>
      <url>/2017/03/30/linux%E4%B8%8Btelnet%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%85%A5/</url>
      <content type="html"><![CDATA[<h1 id="telnet原理"><a href="#telnet原理" class="headerlink" title="telnet原理"></a><strong>telnet原理</strong></h1><p>当用Telnet登录进入远程计算机系统时，事实上启动了两个程序，一个 叫Telnet客户程序，它运行在你的本地机上；另一个叫Telnet服务器程序，它运行在你要登录的远程计算机上。<br><a id="more"></a><br><strong>本地机上的客户程序要完成如下功能：</strong><br>1 、建立与服务器的TCP 联接；<br>2 、从键盘上接收你输入的字符；<br>3 、把你输入的字符串变成标准格式并送给远程服务器；<br>4 、从远程服务器接收输出的信息；<br>5 、把该信息显示在你的屏幕上。   </p>
<p><strong>远程计算机的“服务”程序通常被称为“精灵”，它平时不声不响地候在远程计算机上，一接到你的请求，就马上活跃起来，并完成如下功能：</strong><br>1 、通知你的计算机，远程计算机已经准备好了；<br>2 、等候你输入命令；<br>3 、对你的命令作出反应（如显示目录内容，或执行某个程序等）；<br>4 、把执行命令的结果送回给你的计算机；<br>5 、重新等候你的命令。   </p>
<p>客户机上装一个telnet的客户端，服务器上装一个telnet的监听程序（精灵），一般这个监听程序监听的是23号端口。把这个过程简单抽象一下，就是客户端使用telnet工具发送一个命令到服务器端，服务器端监听到了之后就调用系统相关API来执行这些命令，从而达到了客户机远程操作服务器主机的目的。 </p>
<p>这里需要注意一点，“把你输入的字符串变成标准格式并送给远程服务器”，指的是接受的字符，要按照一定的协议格式传送到服务器端，而这些字符是通过TCP连接传输的，跟Http有点像。Http是通过TCP连接传输字符，但是数据格式是HTTP协议规定的格式。简单来说，所谓的HTTP协议，FTP协议，SMTP协议，就是各自规定了以什么样的数据包方式在网络上通过TCP管道传输数据。  </p>
<p>其实，telnet是以TCP为基础与服务器进行通信，所以它的功能远不止远程登录服务器（远程操纵服务器）。不管是什么协议，如果它基于 tcp/ip，那么你使用 TcpClient（或者 Socket）连接它，然后发点信息，依然能连通。Telnet可以看作是一种TCP的连接工具。</p>
<h1 id="安装telnet"><a href="#安装telnet" class="headerlink" title="安装telnet"></a><strong>安装telnet</strong></h1><p>在Ubuntu下的telnet服务需要安装xinetd服务和telnetd服务  </p>
<ol>
<li>apt-get install xinetd  </li>
<li>apt-get install telnetd  </li>
</ol>
<h1 id="配置telnet"><a href="#配置telnet" class="headerlink" title="配置telnet"></a><strong>配置telnet</strong></h1><p><strong>1.gedit /etc/inetd.conf</strong><br>没有则添加如下<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/10668144.jpg" alt=""><br>注释依次为：<br>服务名称。和xinetd一样，inetd通过查询/etc/service获得该服务的相关信息。<br>套接口类型。TCP用stream，UDP用dgram。<br>该服务使用的通信日志相关参数协议。<br>inetd是否等到守护进程结束才继续接管端口。wait表示等待（相当于xinetd的wait = yes），nowait表示不等待，inetd每次接到一个请求就启动守护进程的新副本（相当于xinetd的wait = no）。<br>运行该守护进程的用户身份。<br>守护进程二进制文件的完整路径及其命令行参数  </p>
<p><strong>2.gedit /etc/xinetd.conf</strong><br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/96571354.jpg" alt=""><br>注释：<br>instances = 60：表示最大连接进程数为60个。<br>log_type = SYSLOG daemon info：表示使用syslog进行服务登记。<br>log_on_success= HOST PID：表示设置成功后记录客户机的IP地址的进程ID。<br>log_on_failure = HOST：表示设置失败后记录客户机的IP地址。<br>cps = 25 30：表示每秒25个入站连接，如果超过限制，则等待30秒。主要用于对付拒绝服务攻击。 </p>
<p><strong>3.gedit /etc/xinetd.d/telnet</strong><br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/48135854.jpg" alt=""><br>注释：<br>disable = no：表示启用这个服务。<br>socket_type = stream：表示服务的数据包类型为stream。<br>wait = no：表示不需等待，即服务将以多线程的方式运行。<br>user = root：表示执行此服务进程的用户是root。<br>server = /usr/bin/in.telnetd：启动程序的位置。<br>log_on_failure += USERID：表示设置失败时，在/etc/xinetd.conf中设置的default值基础之上还把UID添加到系统登记表  </p>
<h1 id="重启xinetd"><a href="#重启xinetd" class="headerlink" title="重启xinetd"></a><strong>重启xinetd</strong></h1><p><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/52936964.jpg" alt=""></p>
<h1 id="查看telnet状态"><a href="#查看telnet状态" class="headerlink" title="查看telnet状态"></a><strong>查看telnet状态</strong></h1><p><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/90971824.jpg" alt=""></p>
<h1 id="telnet端口"><a href="#telnet端口" class="headerlink" title="telnet端口"></a><strong>telnet端口</strong></h1><p>telnet端口默认23，一般不做修改，在/etc/services中查看，如果需要从其他端口启动该服务，则可收到配置<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/64674208.jpg" alt=""></p>
<h1 id="telnet远程登入"><a href="#telnet远程登入" class="headerlink" title="telnet远程登入"></a><strong>telnet远程登入</strong></h1><p>使用putty进行telnet远程登入，默认端口是23，主机IP是linux下的IP地址，通过ifconfig查看。<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/30473762.jpg" alt=""><br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/37847806.jpg" alt=""></p>
<h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a><strong>备注</strong></h1><p><strong>xinetd 配置参数</strong><br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/34724025.jpg" alt="">  </p>
<p><strong>日志相关参数</strong><br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/91161286.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux服务器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux服务器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux下VNC远程访问]]></title>
      <url>/2017/03/30/linux%E4%B8%8Bvnc%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E8%AE%BF%E9%97%AE/</url>
      <content type="html"><![CDATA[<h1 id="VNC远程桌面原理"><a href="#VNC远程桌面原理" class="headerlink" title="VNC远程桌面原理"></a><strong>VNC远程桌面原理</strong></h1><p><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-18/98023522.jpg" alt=""><br> vnc访问流程如下：<br>1，vnc客户端通过浏览器或者vnc viewer 连接至vnc server<br>2,vnc server 传送一个对话框至客户端，要求输入连接密码，以及存取的vnc server显示装置<br>3，在客户端输入联机密码后，vnc server验证客户端是否具有存取权限。<br>4，若是客户端通过vnc server的验证，客户端即要求vnc server显示桌面环境<br>5，vnc server通过x xprotocol协议要求x server将画面显示控制权交给vnc server<br>6，vnc server将来自x server的桌面环境利用vnc通信协议送至客户端，并且允许客户端控制vnc server的桌面环境及输入装置。<br><a id="more"></a></p>
<h1 id="安装vnc"><a href="#安装vnc" class="headerlink" title="安装vnc"></a><strong>安装vnc</strong></h1><p>sudo apt-get install vnc4server</p>
<h1 id="启动vnc"><a href="#启动vnc" class="headerlink" title="启动vnc"></a><strong>启动vnc</strong></h1><p>vncserver<br>第一次启动时会提示输入密码<br>注：创建一个指定会话号的vnc桌面<br>vncserver :2  创建一个指定会话号为2的桌面 </p>
<h1 id="编辑启动脚本"><a href="#编辑启动脚本" class="headerlink" title="编辑启动脚本"></a><strong>编辑启动脚本</strong></h1><p>sudo gedit ~/.vnc/xstartup<br>若有twm,则注释掉，添加如下<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-18/83130259.jpg" alt=""> </p>
<h1 id="重启vnc"><a href="#重启vnc" class="headerlink" title="重启vnc"></a><strong>重启vnc</strong></h1><p>结束之前的vnc线程<br>vncserver -kill :1<br>然后再启动vnc服务输入<br>vncserver</p>
<h1 id="vnc-viewer登入"><a href="#vnc-viewer登入" class="headerlink" title="vnc viewer登入"></a><strong>vnc viewer登入</strong></h1><p>ifconfig查询linux的ip地址，ok后填入vncserver启动时设置的密码<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-18/33094218.jpg" alt=""><br>登入后发现只出现控制台界面，无法显示桌面<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-18/76906898.jpg" alt=""><br>将脚本中改为如下，关闭vncserver<br>vncserver -kill :1<br>再重启vncserver<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-18/14069850.jpg" alt=""><br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-18/92597568.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux服务器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux服务器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件压缩命令-gzip命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9%E4%B9%8Bgzip%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="gzip简介"><a href="#gzip简介" class="headerlink" title="gzip简介"></a><strong>gzip简介</strong></h1><hr>
<p>减少文件大小有两个明显的好处，一是可以减少存储空间，二是通过网络传输文件时，可以减少传输的时间。gzip是在Linux系统中经常使用的一个对文件进行压缩和解压缩的命令，既方便又好用。gzip不仅可以用来压缩大的、较少使用的文件以节省磁盘空间，还可以和tar命令一起构成Linux操作系统中比较流行的压缩文件格式。据统计，gzip命令对文本文件有60%～70%的压缩率。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><p><strong>命令格式：</strong><br>gzip[参数][文件或者目录]<br><strong>命令参数：</strong><br>-a或–ascii 　使用ASCII文字模式。<br>-c或–stdout或–to-stdout 　把压缩后的文件输出到标准输出设备，不去更动原始文件。<br>-d或–decompress或—-uncompress 　解开压缩文件。<br>-f或–force 　强行压缩文件。不理会文件名称或硬连接是否存在以及该文件是否为符号连接。<br>-h或–help 　在线帮助。<br>-l或–list 　列出压缩文件的相关信息。<br>-L或–license 　显示版本与版权信息。<br>-n或–no-name 　压缩文件时，不保存原来的文件名称及时间戳记。<br>-N或–name 　压缩文件时，保存原来的文件名称及时间戳记。<br>-q或–quiet 　不显示警告信息。<br>-r或–recursive 　递归处理，将指定目录下的所有文件及子目录一并处理。<br>-S&lt;压缩字尾字符串&gt;或—-suffix&lt;压缩字尾字符串&gt; 　更改压缩字尾字符串。<br>-t或–test 　测试压缩文件是否正确无误。<br>-v或–verbose 　显示指令执行过程。<br>-V或–version 　显示版本信息。<br>-num 用指定的数字num调整压缩的速度，-1或–fast表示最快压缩方法（低压缩比），-9或–best表示最慢压缩方法（高压缩比）。系统缺省值为6。   </p>
<p><strong>命令功能：</strong><br>gzip是个使用广泛的压缩程序，文件经它压缩过后，名称后面会多出”.gz”的扩展名。</p>
<hr>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p>例1：把test1目录下的每个文件压缩成.gz文件<br>gzip *<br>原文件会被打包，tar下-c选型会新建打包文件，原文件存在<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/42699368.jpg" alt=""></p>
<p>例2：把每个压缩的文件解压，并列出详细的信息<br>gzip -dv *<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/39078451.jpg" alt=""></p>
<p>例3：详细显示每个压缩的文件的信息，并不解压<br>gzip -l *<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/79187696.jpg" alt=""></p>
<p>例4：压缩一个tar文件，此时压缩文件的扩展名为.tar.gz<br>gzip -r log.tar<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/69244540.jpg" alt=""></p>
<p>例5：递归的压缩目录<br>gzip -rv test1<br>test1下面的文件都变成了<em>.gz，目录依然存在只是目录里面的文件相应变成了</em>.gz.<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/70593706.jpg" alt=""></p>
<p>例6：递归地解压目录<br>gzip -dr test1<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/93537882.jpg" alt=""></p>
<hr>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件打包解压命令-tar命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E6%89%93%E5%8C%85%E8%A7%A3%E5%8E%8B%E4%B9%8Btar%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="tar简介"><a href="#tar简介" class="headerlink" title="tar简介"></a><strong>tar简介</strong></h1><p>tar命令可以为linux的文件和目录创建档案。利用tar，可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件。tar最初被用来在磁带上创建档案，现在，用户可以在任何设备上创建档案。利用tar命令，可以把一大堆的文件和目录全部打包成一个文件，这对于备份文件或将几个文件组合成为一个文件以便于网络传输是非常有用的。<br><a id="more"></a><br><strong>两个概念：打包和压缩。</strong><br>打包是指将一大堆文件或目录变成一个总的文件；<br>压缩则是将一个大的文件通过一些压缩算法变成一个小文件。  </p>
<p>Linux中很多压缩程序只能针对一个文件进行压缩，当你想要压缩一大堆文件时，得先将这一大堆文件先打成一个包（tar命令），然后再用压缩程序进行压缩（gzip bzip2命令）。<br>linux下最常用的打包程序就是tar了，使用tar程序打出来的包我们常称为tar包，tar包文件的命令通常都是以.tar结尾的。生成tar包后，就可以用其它的程序来进行压缩。</p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><p><strong>命令格式：</strong><br>tar[必要参数][选择参数][文件]<br>命令参数：<br>必要参数有如下：<br>-A 新增压缩文件到已存在的压缩<br>-B 设置区块大小<br><strong>-c 建立新的压缩文件 </strong><br>-d 记录文件的差别<br>-r 添加文件到已经压缩的文件<br>-u 添加改变了和现有的文件到已经存在的压缩文件<br><strong>-x 从压缩的文件中提取文件 </strong><br>-t 显示压缩文件的内容<br>-z 支持gzip解压文件<br>-j 支持bzip2解压文件<br>-Z 支持compress解压文件<br><strong>-v 显示操作过程</strong><br>-l 文件系统边界设置<br>-k 保留原有文件不覆盖<br>-m 保留文件不被覆盖<br>-W 确认压缩文件的正确性  </p>
<p><strong>可选参数如下：</strong><br>-b 设置区块数目<br>-C 切换到指定目录<br><strong>-f 指定压缩文件</strong><br>–help 显示帮助信息<br>–version 显示版本信息  </p>
<p><strong>命令功能：</strong><br>用来压缩和解压文件。tar本身不具有压缩功能。他是调用压缩功能实现的 </p>
<h1 id="常见解压-压缩命令"><a href="#常见解压-压缩命令" class="headerlink" title="常见解压/压缩命令"></a><strong>常见解压/压缩命令</strong></h1><p><strong>tar</strong><br>解包：tar xvf FileName.tar<br>打包：tar cvf FileName.tar DirName<br>（注：tar是打包，不是压缩！）  </p>
<p><strong>.gz </strong><br>解压1：gunzip FileName.gz<br>解压2：gzip -d FileName.gz<br>压缩：gzip FileName  </p>
<p><strong>.tar.gz 和 .tgz</strong><br>解压：tar zxvf FileName.tar.gz<br>压缩：tar zcvf FileName.tar.gz DirName  </p>
<p><strong>.bz2</strong><br>解压1：bzip2 -d FileName.bz2<br>解压2：bunzip2 FileName.bz2<br>压缩： bzip2 -z FileName  </p>
<p><strong>.tar.bz2</strong><br>解压：tar jxvf FileName.tar.bz2<br>压缩：tar jcvf FileName.tar.bz2 DirName  </p>
<p><strong>.bz</strong><br>解压1：bzip2 -d FileName.bz<br>解压2：bunzip2 FileName.bz<br>压缩：未知  </p>
<p><strong>.tar.bz</strong><br>解压：tar jxvf FileName.tar.bz<br>压缩：未知  </p>
<p><strong>.Z</strong><br>解压：uncompress FileName.Z<br>压缩：compress FileName  </p>
<p><strong>.tar.Z</strong><br>解压：tar Zxvf FileName.tar.Z<br>压缩：tar Zcvf FileName.tar.Z DirName  </p>
<p><strong>.zip</strong><br>解压：unzip FileName.zip<br>压缩：zip FileName.zip DirName  </p>
<p><strong>.rar</strong><br>解压：rar x FileName.rar<br>压缩：rar a FileName.rar DirName  </p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p>例1：将文件全部打包成tar包<br>tar -cvf log.tar log2012.log<br>tar -zcvf log.tar.gz log2012.log<br>tar -jcvf log.tar.bz2 log2012.log<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/88220381.jpg" alt=""><br>tar -cvf log.tar log2012.log    仅打包，不压缩！<br>tar -zcvf log.tar.gz log2012.log   打包后，以 gzip 压缩<br>tar -zcvf log.tar.bz2 log2012.log  打包后，以 bzip2 压缩<br>在参数 f 之后的文件档名是自己取的，习惯上都用 .tar 来作为辨识。 如果加 z 参数，则  以 .tar.gz 或 .tgz 来代表 gzip 压缩过的 tar包； 如果加 j 参数，则以 .tar.bz2 来作为tar包名。</p>
<p>例2：查阅上述 tar包内有哪些文件<br>tar -ztvf log.tar.gz<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/60780119.jpg" alt=""><br>由于使用 gzip 压缩的log.tar.gz，所以要查阅log.tar.gz包内的文件时，就得加上 z 这个参数。</p>
<p>例3：将tar 包解压缩<br>tar -zxvf log.tar.gz<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/20594320.jpg" alt=""></p>
<p>例4：只将 /tar 内的 部分文件解压出来<br>tar -zxvf log.tar.gz 1.log<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/58004986.jpg" alt=""></p>
<p>例5：文件备份下来，并且保存其权限(-p 的属性)<br>tar -zcvpf log.tar.gz 1.log 2.log 3.log<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/94148095.jpg" alt=""><br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/85703889.jpg" alt=""></p>
<p>例6：在 文件夹当中，比某个日期新的文件才备份<br>tar -N “2012/11/13” -zcvf log.tar.gz test1  </p>
<p>例7：备份文件夹内容是排除部分文件<br>tar –exclude test1 -zcvf Test.tar.gz *<br>除了test1外，其他都打包<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/53586720.jpg" alt=""><br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/86435790.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件权限命令-chgrp命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%B9%8Bchgrp%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="chgrp简介"><a href="#chgrp简介" class="headerlink" title="chgrp简介"></a><strong>chgrp简介</strong></h1><hr>
<p>在lunix系统里，文件或目录的权限的掌控以拥有者及所属群组来管理。可以使用chgrp指令取变更文件与目录所属群组，这种方式采用群组名称或群组识别码都可以。Chgrp命令就是change group的缩写！要被改变的组名必须要在/etc/group文件内存在才行。<br><a id="more"></a></p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><hr>
<p><strong>命令格式：</strong><br>chgrp [选项] [组] [文件]<br><strong>命令功能：</strong><br>chgrp命令可采用群组名称或群组识别码的方式改变文件或目录的所属群组。使用权限是超级用户。<br><strong>命令参数：</strong><br><strong>必要参数:</strong><br>-c 当发生改变时输出调试信息<br>-f 不显示错误信息<br>-R 处理指定目录以及其子目录下的所有文件<br>-v 运行时显示详细的处理信息<br>–dereference 作用于符号链接的指向，而不是符号链接本身<br>–no-dereference 作用于符号链接本身<br><strong>选择参数:</strong><br>–reference=&lt;文件或者目录&gt;<br>–help 显示帮助信息<br>–version 显示版本信息  </p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><hr>
<p>例1：改变文件的群组属性<br>chgrp -v test 1.log<br>先建立test工作组，将1.log文件群组改为test群组<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/5335985.jpg" alt=""><br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/38906738.jpg" alt=""><br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/52128739.jpg" alt=""><br>例2：根据指定文件改变文件的群组属性<br>chgrp –reference=1.log 2.log<br>改变文件2.log 的群组属性，使得文件2.log的群组属性和参考文件1.log的群组属性相同<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/99742721.jpg" alt=""><br>例3：改变指定目录以及其子目录下的所有文件的群组属性<br>chgrp -R test test1<br>改变指定目录以及其子目录下的所有文件的群组属性<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/97422495.jpg" alt=""></p>
<p>例4：通过群组识别码改变文件群组属性<br>chgrp -R 1001 1.log<br>通过群组识别码改变文件群组属性，1001为test群组的识别码，具体群组和群组识别码可以<br>cat /etc/group查看<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/18259959.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件目录命令-chown命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%B9%8Bchown%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="chown简介"><a href="#chown简介" class="headerlink" title="chown简介"></a><strong>chown简介</strong></h1><hr>
<p>chown将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID；组可以是组名或者组ID；  文件是以空格分开的要改变权限的文件列表，支持通配符。系统管理员经常使用chown命令，在将文件拷贝到另一个用户的名录下之后，让用户拥有使用该文件的权限。<br><a id="more"></a></p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><hr>
<p><strong>命令格式：</strong></p>
<p>chown [选项] [所有者][:[组]] 文件…</p>
<p><strong>命令功能：</strong><br>通过chown改变文件的拥有者和群组。在更改文件的所有者或所属群组时，可以使用用户名称和用户识别码设置。普通用户不能将自己的文件改变成其他的拥有者。其操作权限一般为管理员。  </p>
<p><strong>命令参数：</strong><br><strong>必要参数:</strong><br>-c 显示更改的部分的信息<br>-f 忽略错误信息<br>-h 修复符号链接<br>-R 处理指定目录以及其子目录下的所有文件<br>-v 显示详细的处理信息<br>-deference 作用于符号链接的指向，而不是链接文件本身  </p>
<p><strong>选择参数:</strong><br>–reference=&lt;目录或文件&gt; 把指定的目录/文件作为参考，把操作的文件/目录设置成参考文件/目录相同拥有者和群组<br>–from=&lt;当前用户：当前群组&gt; 只有当前用户和群组跟指定的用户和群组相同时才进行改变<br>–help 显示帮助信息<br>–version 显示版本信息  </p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><hr>
<p>例1：改变拥有者和群组<br>　chown root:jiangbiao 1.log<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/71486373.jpg" alt=""><br>当为root: 以及jiangbiao: 形式时，工作组默认与拥有者一样<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/69251199.jpg" alt=""><br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/69251199.jpg" alt=""><br>例3：改变文件群组<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/25890988.jpg" alt=""></p>
<p>例4：改变指定目录以及其子目录下的所有文件的拥有者和群组<br>chown -R -v root:test test1<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/96742714.jpg" alt="">  </p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件目录命令-chmod命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%B9%8Bchmod%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="chmod简介"><a href="#chmod简介" class="headerlink" title="chmod简介"></a><strong>chmod简介</strong></h1><p>chmod命令用于改变linux系统文件或目录的访问权限。用它控制文件或目录的访问权限。<br><a id="more"></a><br>该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。<br>Linux系统中的每个文件和目录都有访问许可权限，用它来确定谁可以通过何种方式对文件和目录进行访问和操作。 </p>
<p>文件或目录的访问权限分为只读，只写和可执行三种。以文件为例，只读权限表示只允许读其内容，而禁止对其做任何的更改操作。可执行权限表示允许将该文件作为一个程序执行。文件被创建时，文件所有者自动拥有对该文件的读、写和可执行权限，以便于对文件的阅读和修改。用户也可根据需要把访问权限设置为需要的任何组合。  </p>
<p>有三种不同类型的用户可对文件或目录进行访问：文件所有者，同组用户、其他用户。<br>所有者一般是文件的创建者。所有者可以允许同组用户有权访问文件，还可以将文件的访问权限赋予系统中的其他用户。在这种情况下，系统中每一位用户都能访问该用户拥有的文件或目录。  </p>
<p>每一文件或目录的访问权限都有三组，每组用三位表示，分别为文件属主的读、写和执行权限；与属主同组的用户的读、写和执行权限；系统中其他用户的读、写和执行权限。当用ls -l命令显示文件或目录的详细信息时，最左边的一列为文件的访问权限<br>列表的列定义如下：<br>[权限属性信息] [连接数] [拥有者] [拥有者所属用户组] [大小] [最后修改时间] [文件名]  </p>
<p>权限属性列表为10个字符：<br>第一个字符表示文件类型，d为目录 -为普通文件 l为连接 b为可存储的接口设备 c为键盘鼠标等输入设备<br>2、3、4个字符表示所有者权限，5、6、7个字符表示所有者同组用户权限，8、9、10为其他用户权限<br>第二个字符表示所有者读权限，如果有权限则为r，没有权限则为-<br>第三个字符表示所有者写权限，如果有权限则为w，没有权限则为-<br>第四个字符表示所有者执行权限，如果有权限则为x，没有权限则为-<br>第五个字符表示所有者同组用户读权限，如果有权限则为r，没有权限则为-<br>第六个字符表示所有者同组用户写权限，如果有权限则为w，没有权限则为-<br>第七个字符表示所有者同组用户执行权限，如果有权限则为x，没有权限则为-<br>第八个字符表示其他非同组读权限，如果有权限则为r，没有权限则为-<br>第九个字符表示其他非同组写权限，如果有权限则为w，没有权限则为-<br>第十个字符表示其他非同组执行权限，如果有权限则为x，没有权限则为-  </p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><p><strong>命令格式:</strong><br>chmod [-cfvR] [–help] [–version] mode file<br><strong>命令功能：</strong><br>用于改变文件或目录的访问权限，用它控制文件或目录的访问权限。<br><strong>命令参数：</strong><br><strong>必要参数：</strong><br>-c 当发生改变时，报告处理信息<br>-f 错误信息不输出<br>-R 处理指定目录以及其子目录下的所有文件<br>-v 运行时显示详细处理信息  </p>
<p><strong>选择参数：</strong><br>–reference=&lt;目录或者文件&gt; 设置成具有指定目录或者文件具有相同的权限<br>–version 显示版本信息  </p>
<p><strong>&lt;权限范围&gt;+&lt;权限设置&gt; 使权限范围内的目录或者文件具有指定的权限</strong><br><strong>&lt;权限范围&gt;-&lt;权限设置&gt; 删除权限范围的目录或者文件的指定权限 </strong><br><strong>&lt;权限范围&gt;=&lt;权限设置&gt; 设置权限范围内的目录或者文件的权限为指定的值</strong>  </p>
<p><strong>权限范围：</strong><br><strong>u ：目录或者文件的当前的用户</strong><br><strong>g ：目录或者文件的当前的群组</strong><br><strong>o ：除了目录或者文件的当前用户或群组之外的用户或者群组</strong><br><strong>a ：所有的用户及群组</strong></p>
<p><strong>权限设置：</strong><br><strong>r ：读权限，用数字4表示</strong><br><strong>w ：写权限，用数字2表示</strong><br><strong>x ：执行权限，用数字1表示</strong><br><strong>- ：删除权限，用数字0表示</strong><br><strong>s ：特殊权限</strong>   </p>
<p>Linux 文件的基本属性有9个，分别是 owner/group/others组别的read/write/excute属性。<br>该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。<br><strong>1）文字设定法:</strong><br>如果想把一个文件属性设置为 -rwxr-xr–，可以这样： chmod u=rwx,g=rx,o=r filename<br>如果不知道文件的原先属性，但想增加其的每人均可写入的权限，可以这样：<br>chmod a+w filename<br>去掉所有人的x属性：<br>chmod a-x filename<br><strong>2）数字设定法 </strong><br>数字表示：r:4 w:2 x:1<br>例子：<br>将同一组(owner/group/others)的3个属性(r/w/x)累加，如当前属性为[-rwxrwx—]，则是：<br>owner=rwx=4+2+1=7<br>group=rwx=4+2+1=7<br>others= — =0+0+0=0<br>该属性为770.chmod 777 filename  </p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p>例1：增加文件所有用户组可执行权限<br>chmod a+x 1.log<br>a ：所有的用户及群组<br>即：文件属主（u） 增加执行权限；与文件属主同组用户（g） 增加执行权限；其他用户（o） 增加执行权限<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/90049192.jpg" alt=""></p>
<p>例2：同时修改不同用户权限<br>chmod ug+r,o-w 2.log<br>文件属主（u） 增加读权限;与文件属主同组用户（g） 增加读权限;其他用户（o） 删除写权限<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/12272667.jpg" alt="">  </p>
<p>例3：删除文件权限<br>chmod a-r 2.log<br>删除所有用户的读权限<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/20792055.jpg" alt="">  </p>
<p>例4：使用“=”设置权限<br>chmod u=rwx,g=rwx,o=rwz 2.log<br>撤销原来所有的权限，然后使其具有新的权限<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/27758925.jpg" alt=""></p>
<p>例5：对一个目录及其子目录所有文件添加权限<br>chmod -R u+x test1<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/36112017.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件查找命令-locate命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE%E4%B9%8Blocate%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="locate简介"><a href="#locate简介" class="headerlink" title="locate简介"></a><strong>locate简介</strong></h1><p>locate让使用者可以很快速的搜寻档案系统内是否有指定的档案。其方法是先建立一个包括系统内所有档案名称及路径的数据库，之后当寻找时就只需查询这个数据库，而不必实际深入档案系统之中了。在一般的 distribution 之中，数据库的建立都被放在 crontab 中自动执行。<br><a id="more"></a> </p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><p><strong>命令格式</strong>：Locate [选择参数] [样式]  </p>
<p><strong>命令功能</strong>：locate命令可以在搜寻数据库时快速找到档案，数据库由updatedb程序来更新，updatedb是由cron daemon周期性建立的，locate命令在搜寻数据库时比由整个由硬盘资料来搜寻资料来得快，但较差劲的是locate所找到的档案若是最近才建立或 刚更名的，可能会找不到，在内定值中，updatedb每天会跑一次，可以由修改crontab来更新设定值。(etc/crontab)<br>locate指定用在搜寻符合条件的档案，它会去储存档案与目录名称的数据库内，寻找合乎范本样式条件的档案或目录录，可以使用特殊字元（如”<em>” 或”?”等）来指定范本样式，如指定范本为kcpa</em>ner, locate会找出所有起始字串为kcpa且结尾为ner的档案或目录<br>locate指令和find找寻档案的功能类似，但locate是透过update程序将硬盘中的所有档案和目录资料先建立一个索引数据库，在 执行loacte时直接找该索引，查询速度会较快，索引数据库一般是由操作系统管理，但也可以直接下达update强迫系统立即修改索引数据库。</p>
<p><strong>命令参数</strong>：<br>-e   将排除在寻找的范围之外。<br>-1  如果是 1．则启动安全模式。在安全模式下，使用者不会看到权限无法看到的档案。这会使速度减慢，因为 locate 必须至实际的档案系统中取得档案的    权限资料。<br>-f   将特定的档案系统排除在外，例如我们没有到理要把 proc 档案系统中的档案    放在资料库中。<br>-q  安静模式，不会显示任何错误讯息。<br>-n 至多显示 n个输出。<br>-r 使用正规运算式 做寻找的条件。<br>-o 指定资料库存的名称。<br>-d 指定资料库的路径<br>-h 显示辅助讯息<br>-V 显示程式的版本讯息  </p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p>例1:查找和pwd相关的所有文件<br>locate pwd<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/71221509.jpg" alt=""></p>
<p>例2： 搜索etc目录下所有以sh开头的文件<br>locate /etc/sh<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/17023346.jpg" alt=""></p>
<p>例3：搜索etc目录下，所有以m开头的文件<br>locate /etc/m<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/12951198.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件查找命令-whereis命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE%E4%B9%8Bwhereis%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="whereis简介"><a href="#whereis简介" class="headerlink" title="whereis简介"></a><strong>whereis简介</strong></h1><p>whereis命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。<br><a id="more"></a><br>和find相比，whereis查找的速度非常快，这是因为linux系统会将 系统内的所有文件都记录在一个数据库文件中，当使用whereis和locate时，会从数据库中查找数据，而不是像find命令那样，通过遍历硬盘来查找，效率自然会很高。<br>但是该数据库文件并不是实时更新，默认情况下时一星期更新一次，因此，我们在用whereis和locate 查找文件时，有时会找到已经被删除的数据，或者刚刚建立文件，却无法查找到，原因就是因为数据库文件没有被更新。</p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><p><strong>命令格式</strong>：whereis [-bmsu] [BMS 目录名 -f ] 文件名<br><strong>命令功能</strong>：whereis命令是定位可执行文件、源代码文件、帮助文件在文件系统中的位置。这些文件的属性应属于原始代码，二进制文件，或是帮助文件。whereis 程序还具有搜索源代码、指定备用搜索路径和搜索不寻常项的能力。<br><strong>命令参数</strong>：<br>-b  定位可执行文件。<br>-m  定位帮助文件。<br>-s  定位源代码文件。<br>-u  搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件<br>-B  指定搜索可执行文件的路径。<br>-M  指定搜索帮助文件的路径。<br>-S  指定搜索源代码文件的路径。</p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p>例1:指令”whereis”查看指令”bash”的位置<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/5409719.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件查找命令-which命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE%E4%B9%8Bwhich%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="which简介"><a href="#which简介" class="headerlink" title="which简介"></a><strong>which简介</strong></h1><p>经常在linux要查找某个文件，但不知道放在哪里了，可以使用下面的一些命令来搜索：<br>       which  查看可执行文件的位置。<br>       whereis 查看文件的位置。<br>       locate   配合数据库查看文件位置。<br>       find   实际搜寻硬盘查询文件名称。<br>which命令在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。<br><a id="more"></a> </p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><p><strong>命令格式</strong>：which 可执行文件名称<br><strong>命令功能</strong>：which指令会在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。<br><strong>命令参数</strong>：<br>-n 指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。<br>-p 与-n参数相同，但此处的包括了文件的路径。<br>-w 指定输出时栏位的宽度。<br>-V 显示版本信息  </p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p>例1：查找文件、显示命令路径<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/25756362.jpg" alt=""><br>cd 是bash 内建的命令，但是 which 默认是找 PATH 内所规范的目录，所以找不到  </p>
<p>查找有别名的命令时会列出具体的别名信息</p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件目录命令-cat命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E4%B9%8Bcat%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="cat简介"><a href="#cat简介" class="headerlink" title="cat简介"></a><strong>cat简介</strong></h1><p>cat命令的用途是连接文件或标准输入并打印。常用来显示文件内容，或者将几个文件连接起来显示，或者从标准输入读取内容并显示，它常与重定向符号配合使用。<br><a id="more"></a></p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><p><strong>命令格式</strong>：cat [选项] [文件]<br><strong>命令功能</strong>：<br>1.一次显示整个文件:cat filename<br>2.从键盘创建一个文件:cat &gt; filename 只能创建新文件,不能编辑已有文件.<br>3.将几个文件合并为一个文件:cat file1 file2 &gt; file<br><strong>命令参数</strong>：<br>-b, –number-nonblank    对非空输出行编号<br>-E, –show-ends          在每行结束处显示 $<br>-n, –number     对输出的所有行编号,由1开始对所有输出的行数编号<br>-s, –squeeze-blank  有连续两行以上的空白行，就代换为一行的空白行<br>-T, –show-tabs          将跳格字符显示为 ^I<br>-v, –show-nonprinting   显示非打印字符</p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p><strong>例一：把 1.log 的文件内容加上行号后附加到2.log 文件里</strong><br>cat -n 1.log 2.log<br><img src="http://yotuku.cn/link?url=N1IhikTgM&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111012" alt=""></p>
<p><strong>例二：把1.log 的文件内容加上行号后覆盖2.log 文件（2.log存在）</strong><br><strong>cat -n 1.log &gt; 2.log </strong><br><img src="http://yotuku.cn/link?url=Eyhch1TlM&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111012" alt=""><br>2.log不存在时会先创建2.log<br>这里&gt;与》的区别：》是追加，不会覆盖<br><img src="http://yotuku.cn/link?url=EkOeze6lG&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111013" alt=""></p>
<p><strong>例三：使用标准输入来创建文件 </strong><br><strong>cat &gt;log.txt &lt;&lt;EOF</strong><br><img src="http://yotuku.cn/link?url=Ny85R1alM&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111013" alt=""><br>tac (反向列示)<br>tac log.txt<br><img src="http://yotuku.cn/link?url=E1Rkke6lf&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111013" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件目录命令-cd命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E4%B9%8Bcd%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="cd-命令学习"><a href="#cd-命令学习" class="headerlink" title="cd 命令学习"></a>cd 命令学习</h1><p>命令格式：cd [dirname]</p>
<p>命令功能：切换当前目录至dirName<br><a id="more"></a></p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a>常用范例</h1><p>例一：进入系统根目录<br>cd / </p>
<p>例一：进入用户主目录<br>cd 或 cd ~  </p>
<p>例三：返回上层目录<br>cd ..<br>cd ../.. （返回上两级目录）  </p>
<p>例四：返回进入此目录之前所在的目录<br>cd -  </p>
<p>例五：把上个命令的参数作为cd参数使用<br>cd !$<br><img src="http://yotuku.cn/link?url=NyM0pW3eM&amp;tk_plan=free&amp;tk_storage=qiniu,weibo,tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016110921" alt=""><br>（相当于仍然执行上次操作，如果上次cd -,这次也cd -）</p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件目录命令-cp命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E4%B9%8Bcp%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="cp简介"><a href="#cp简介" class="headerlink" title="cp简介"></a><strong>cp简介</strong></h1><p>cp命令用来复制文件或者目录，一般情况下，shell会设置一个别名，在命令行下复制文件时，如果目标文件已经存在，就会询问是否覆盖，不管你是否使用-i参数。但是如果是在shell脚本中执行cp时，没有-i参数时不会询问是否覆盖。这说明命令行和shell脚本的执行方式有些不同。<br><a id="more"></a></p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><p><strong>命令格式</strong>：<br>cp [选项] [-T] 源 目的<br>或：cp [选项] 源 目录<br>cp [选项]… -t 目录 源<br><strong>命令功能</strong>：将源文件复制至目标文件，或将多个源文件复制至目标目录。<br><strong>命令参数</strong>：<br>-a, 为每个已存在的目标文件创建备份<br>-b，类似–backup 但不接受参数，在递归处理是复制特殊文件内容<br>-f, 如果目标文件无法打开则将其移除并重试(当-n选项存在时则不需再选此项)<br>-i, 覆盖前询问(使前面的 -n 选项失效)<br>-H，跟随源文件中的命令行符号链接<br>-l, 链接文件而不复制<br>-L, 总是跟随符号链接<br>-n, 不要覆盖已存在的文件(使前面的 -i 选项失效)<br>-P, 跟随源文件中的符号链接<br>-p，等于–preserve=模式,所有权,时间戳，保持指定的属性(默认：模式,所有权,时间  戳)，如果可能保持附加属性：环境、链接、xattr 等<br>-R, -r, 复制目录及目录内的所有项目</p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p>例一：复制单个文件到目标目录，文件在目标文件中不存在<br>cp l.log test</p>
<p>例二：目标文件存在时，会询问是否覆盖<br>cp 1.log test</p>
<p>例三：复制整个目录<br>目标目录存在时： 整个源目录被复制到目标目录里面<br>cp -a test3 test5<br>目标目录不存在： 类似改名<br>cp -a test3 test4<br><img src="http://yotuku.cn/link?url=V1Ch66hef&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111010" alt=""></p>
<p>例四：复制的 log.log 建立一个连结档 log_link.log<br>cp -s log.log log_link.log</p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件目录命令-find命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E4%B9%8Bfind%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="find简介"><a href="#find简介" class="headerlink" title="find简介"></a><strong>find简介</strong></h1><p>Linux下find命令在目录结构中搜索文件，并执行指定的操作。find命令提供了相当多的查找条件，功能很强大。即使系统中含有网络文件系统( NFS)，find命令在该文件系统中同样有效，只你具有相应的权限。 在运行一个非常消耗资源的find命令时，很多人都倾向于把它放在后台执行，因为遍历一个大的文件系统可能会花费很长的时间(这里是指30G字节以上的文件系统)。<br><a id="more"></a></p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><p><strong>命令格式</strong>：find pathname -options [-print -exec -ok …]  </p>
<p><strong>命令功能</strong>：用于在文件树种查找文件，并作出相应的处理   </p>
<p><strong>命令参数</strong>：<br>pathname: find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。<br>-print： find命令将匹配的文件输出到标准输出。<br>-exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为’command’ {  } \;，注意{   }和\；之间的空格。<br>-ok： 和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。  </p>
<p><strong>命令选项</strong>：<br>-name   按照文件名查找文件。<br>-perm   按照文件权限来查找文件。<br>-prune  使用这一选项可以使find命令不在当前指定的目录中查找，如果同时使用-depth选项，那么-prune将被find命令忽略。<br>-user   按照文件属主来查找文件。<br>-group  按照文件所属的组来查找文件。<br>-mtime -n +n  按照文件的更改时间来查找文件， - n表示文件更改时间距现在n天以内，+ n表示文件更改时间距现在n天以前。find命令还有-atime和-ctime 选项，但它们都和-m time选项。<br>-nogroup  查找无有效所属组的文件，即该文件所属的组在/etc/groups中不存在。<br>-nouser   查找无有效属主的文件，即该文件的属主在/etc/passwd中不存在。<br>-newer file1 ! file2  查找更改时间比文件file1新但比文件file2旧的文件。<br>-type  查找某一类型的文件，诸如：<br>b - 块设备文件。<br>d - 目录。<br>c - 字符设备文件。<br>p - 管道文件。<br>l - 符号链接文件。<br>f - 普通文件。<br>-size n：[c] 查找文件长度为n块的文件，带有c时表示文件长度以字节计。-depth：在查找文件时，首先查找当前目录中的文件，然后再在其子目录中查找。<br>-fstype：查找位于某一类型文件系统中的文件，这些文件系统类型通常可以在配置文件/etc/fstab中找到，该配置文件中包含了本系统中有关文件系统的信息。<br>-mount：在查找文件时不跨越文件系统mount点。<br>-follow：如果find命令遇到符号链接文件，就跟踪至链接所指向的文件。<br>-cpio：对匹配的文件使用cpio命令，将这些文件备份到磁带设备中。<br>另外,下面三个的区别:<br>-amin n   查找系统中最后N分钟访问的文件<br>-atime n  查找系统中最后n<em>24小时访问的文件<br>-cmin n   查找系统中最后N分钟被改变文件状态的文件<br>-ctime n  查找系统中最后n</em>24小时被改变文件状态的文件<br>-mmin n   查找系统中最后N分钟被改变文件数据的文件<br>-mtime n  查找系统中最后n*24小时被改变文件数据的文件  </p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p>例1：查找指定时间内修改过的文件<br>find -atime -2<br>查找48小时内修改过的文件 </p>
<p>例2：根据关键字查找<br>find . -name “*.log”<br>当前目录查找 以.log结尾的文件。 “. “代表当前目录<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/87036376.jpg" alt=""></p>
<p>例3：按照目录或文件的权限来查找文件<br>find ~/Test/ -perm 777<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/39199686.jpg" alt=""></p>
<p>例4：按类型查找<br>find . -type f -name “*.log”<br>查找当前目录，以.log结尾的普通文件<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/30162959.jpg" alt=""></p>
<p>例5：查找当前所有目录并排序<br>find . -type d | sort<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/27384963.jpg" alt=""></p>
<p>例6：按大小查找文件<br>find . -size +1000c -print<br>查找当前目录大于1K的文件<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/93422289.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件目录命令-head命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E4%B9%8Bhead%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="head简介"><a href="#head简介" class="headerlink" title="head简介"></a><strong>head简介</strong></h1><p>head是用来显示开头某个数量的文字区块，显示档案的开头至标准输出中，与tai是查看档案的结尾<br><a id="more"></a></p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><p><strong>命令格式</strong>：head [参数] [文件]<br><strong>命令功能</strong>：显示档案的开头至标准输出中，默认head命令打印其相应文件的开头10行。<br><strong>命令参数</strong>：<br>-q 隐藏文件名<br>-v 显示文件名<br>-c&lt;字节&gt; 显示字节数<br>-n&lt;行数&gt; 显示的行数  </p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p>例1：显示文件的前n行<br>head -n 5 1.log<br><img src="http://yotuku.cn/link?url=V1cxUb6xG&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111014" alt=""></p>
<p>例2：显示文件前n个字节<br>head -c 20 1.log<br><img src="http://yotuku.cn/link?url=4kVWIbTxG&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111014" alt=""></p>
<p>例3：文件的除了最后n个字节以外的内容<br>head -c -32 1.log<br><img src="http://yotuku.cn/link?url=NkJGI-6lG&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111014" alt=""></p>
<p>例4：输出文件除了最后n行的全部内容<br>head -n -6 log2014.log<br><img src="http://yotuku.cn/link?url=EJ2MLWTgf&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111014" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件目录命令-less命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E4%B9%8Bless%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="less简介"><a href="#less简介" class="headerlink" title="less简介"></a><strong>less简介</strong></h1><p>less工具也是对文件或其它输出进行分页显示的工具，功能极其强大。less 的用法比起 more 更加的有弹性。在more的时候，没有办法向前面翻，只能往后面看，但若使用了 less 时，就可以使用 [pageup] [pagedown] 等按键的功能来往前往后翻看文件，更容易用来查看一个文件的内容！除此之外，在 less 里头可以拥有更多的搜索功能，不止可以向下搜，也可以向上搜。<br><a id="more"></a></p>
<h1 id="命令简介"><a href="#命令简介" class="headerlink" title="命令简介"></a><strong>命令简介</strong></h1><p><strong>命令格式</strong>：less [参数]  文件<br><strong>命令功能</strong>：less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，less在查看之前不会加载整个文件<br><strong>命令参数</strong>：<br>-b &lt;缓冲区大小&gt; 设置缓冲区的大小<br>-e  当文件显示结束后，自动离开<br>-f  强迫打开特殊文件，例如外围设备代号、目录和二进制文件<br>-g  只标志最后搜索的关键词<br>-i  忽略搜索时的大小写<br>-m  显示类似more命令的百分比<br>-N  显示每行的行号<br>-o &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来<br>-Q  不使用警告音<br>-s  显示连续空行为一行<br>-S  行过长时间将超出部分舍弃<br>-x &lt;数字&gt; 将“tab”键显示为规定的数字空格<br>/字符串：向下搜索“字符串”的功能<br>?字符串：向上搜索“字符串”的功能<br>n：重复前一个搜索（与 / 或 ? 有关）<br>N：反向重复前一个搜索（与 / 或 ? 有关）<br>b  向后翻一页<br>d  向后翻半页<br>h  显示帮助界面<br>Q  退出less 命令<br>u  向前滚动半页<br>y  向前滚动一行<br>空格键 滚动一行<br>回车键 滚动一页<br>[pagedown]： 向下翻动一页<br>[pageup]：   向上翻动一页  </p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p>例1：查看文件<br>less 1.log<br><img src="http://yotuku.cn/link?url=4kv0lW6xG&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111014" alt=""></p>
<p>例2：ps查看进程信息并通过less分页显示<br>ps -ef |less<br><img src="http://yotuku.cn/link?url=EkSJb-Tlf&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111014" alt=""></p>
<p>例3：查看命令历史使用记录并通过less分页显示<br>history | less<br><img src="http://yotuku.cn/link?url=Vk4eWWplf&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111014" alt=""></p>
<p>例4：浏览多个文件<br>Less 1.log 2.log<br>输入 ：n后，切换到 2.log<br>输入 ：p后, 切换到 1.log</p>
<h1 id="附加备注"><a href="#附加备注" class="headerlink" title="附加备注"></a><strong>附加备注</strong></h1><p><strong>全屏导航</strong><br>ctrl + F - 向前移动一屏<br>ctrl + B - 向后移动一屏<br>ctrl + D - 向前移动半屏<br>ctrl + U - 向后移动半屏  </p>
<p><strong>单行导航</strong><br>j - 向前移动一行<br>k - 向后移动一行  </p>
<p><strong>其它导航</strong><br>G - 移动到最后一行<br>g - 移动到第一行<br>q / ZZ - 退出 less 命令  </p>
<p><strong>其它有用的命令</strong><br>v - 使用配置的编辑器编辑当前文件<br>h - 显示 less 的帮助文档<br>&amp;pattern - 仅显示匹配模式的行，而不是整个文件  </p>
<p><strong>标记导航</strong><br>当使用 less 查看大文件时，可以在任何一个位置作标记，可以通过命令导航到标有特定标记的文本位置：<br>ma - 使用 a 标记文本的当前位置<br>‘a - 导航到标记 a 处  </p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件目录命令-ls命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E4%B9%8Bls%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="ls简介"><a href="#ls简介" class="headerlink" title="ls简介"></a>ls简介</h1><p>&nbsp;ls用来打印出当前目录的清单，如果ls指定目录那么就会显示指定目录里的文件及文件夹清单。 通过ls 命令不仅可以查看linux文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)，目录信息等等。<br><a id="more"></a></p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a>命令学习</h1><p>命令格式：ls [选项] [目录名]<br>命令功能：列出目标目录中所有的子目录和文件<br>常用参数：<br><strong>-a 列出目录下的所有文件，包括以 . 开头的隐含文件</strong><br>-b 把文件名中不可输出的字符用反斜杠加字符编号的形式列出。<br>-c 输出文件的 i 节点的修改时间，并以此排序。<br>-d 将目录象文件一样显示，而不是显示其下的文件。<br>-e 输出时间的全部信息，而不是输出简略信息。<br>-i 输出文件的 i 节点的索引信息。<br>-k 以 k 字节的形式表示文件的大小。<br><strong>-l 列出文件的详细信息</strong>。<br>-m 横向输出文件名，并以“，”作分格符。<br>-n 用数字的 UID,GID 代替名称。<br>-o 显示文件的除组信息外的详细信息。<br>-p -F 在每个文件名后附上一个字符以说明该文件的类型，“<em>”表示可执行的普通文件；“/”表示目录；“@”表示符号链接；“|”表示FIFOs；“=”表示套<br>接字(sockets)<br>-q 用?代替不可输出的字符。<br>-r 对目录反向排序。<br>-s 在每个文件名后输出该文件的大小。<br><strong>-t 以时间排序。</strong><br>-u 以文件上次被访问的时间排序。<br>-x 按列输出，横向排序。<br><strong>-A 显示除 “.”和“..”外的所有文件。</strong><br>-B 不输出以 “~”结尾的备份文件。<br>-C 按列输出，纵向排序。<br>-G 输出文件的组的信息。<br>-L 列出链接文件名而不是链接到的文件。<br>-N 不限制文件长度。<br>-Q 把输出的文件名用双引号括起来。<br>-R 列出所有子目录下的文件。<br><em>*-S 以文件大小排序。</em></em><br>-X 以文件的扩展名(最后一个 . 后的字符)排序。<br>-1 一行只输出一个文件。<br>–color=no 不显示彩色文件名<br>–help 在标准输出上显示帮助信息。<br>–version 在标准输出上输出版本信息并退出。  </p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a>常用范例</h1><p>例一：列出/home/文件夹下的所有文件和目录的详细资料<br>ls -l -R /home/Test<br>ls -lR /home/peidachang<br>(参数可以一起)</p>
<p>例二：列出当前目录中所有以“t”开头的目录的详细内容<br>ls -l t*   </p>
<p>例三：只列出文件下的子目录<br>ls -F /opt/soft |grep /$  列出 /opt/soft 文件下面的子目录<br>ls -l /opt/soft | grep “^d”  列出 /opt/soft 文件下面的子目录详细情况<br>例四：列出目前工作目录下所有名称是s 开头的档案，愈新的排愈后面<br>命令：ls -ltr s<em><br>例五：计算当前目录下的文件数和目录数<br>ls -l </em> |grep “^-“|wc -l —文件个数<br>ls -l * |grep “^d”|wc -l    —目录个数<br>例七: 在ls中列出文件的绝对路径<br>ls | sed “s:^:<code>pwd</code>/:”<br>例九：列出当前目录下的所有文件（包括隐藏文件）的绝对路径， 对目录不做递归<br>命令：find $PWD -maxdepth 1 | xargs ls -ld<br>例十：递归列出当前目录下的所有文件（包括隐藏文件）的绝对路径<br>find $PWD | xargs ls -ld<br>例十一：指定文件时间输出格式<br>ls -tl –time-style=full-iso<br>扩展：  </p>
<ol>
<li>显示彩色目录列表<br> 打开/etc/bashrc, 加入如下一行:<br> alias ls=”ls –color”<br>下次启动bash时就可以像在Slackware里那样显示彩色的目录列表了, 其中颜色的含义如下:  <ol>
<li>蓝色–&gt;目录  </li>
<li>绿色–&gt;可执行文件  </li>
<li>红色–&gt;压缩文件  </li>
<li>浅蓝色–&gt;链接文件  </li>
<li>灰色–&gt;其他文件  </li>
</ol>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件目录命令-mkdir命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E4%B9%8Bmkdir%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="mkdir简介"><a href="#mkdir简介" class="headerlink" title="mkdir简介"></a><strong>mkdir简介</strong></h1><p>mkdir命令用来创建指定的名称的目录，要求创建目录的用户在当前目录中具有写权限，并且指定的目录名不能是当前目录中已有的目录。<br><a id="more"></a></p>
<h1 id="mkdi学习"><a href="#mkdi学习" class="headerlink" title="mkdi学习"></a><strong>mkdi学习</strong></h1><p><strong>命令格式</strong>：mkdir [选项] 目录…<br><strong>命令功能</strong>：mkdir 命令可以实现在指定位置创建以 DirName(指定的文件名)命名的文件夹或目录。要创建文件夹或目录的用户必须对所创建的文件夹的父文件夹具有写权限。并且，所创建的文件夹(目录)不能与其父目录(即父文件夹)中的文件名重名，即同一个目录下不能有同名的(区分大小写)。<br><strong>命令参数</strong>：<br>-m,设定权限&lt;模式&gt; (类似 chmod)<br>-p,可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项 后,系统将自动建立好那些尚不存在的目录,即一次可以建立多个目录<br>-v, –verbose  每次创建新目录都显示信息<br>–help   显示此帮助信息并退出<br>–version  输出版本信息并退出   </p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p>例1：创建一个空目录<br>mkdir test1  </p>
<p>例2:递归创建多个目录<br>mkdir -p test2/test22<br>创建test2目录，且在test2目录下创建子目录test22<br><img src="http://yotuku.cn/link?url=4kdkBnngM&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111008" alt=""></p>
<p>例3：创建权限为777的目录<br>mkdir -m 777 test3</p>
<p>例4：创建新目录都显示信息<br>mkdir -v test4<br><img src="http://yotuku.cn/link?url=NJbCrn2xz&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111009" alt=""></p>
<p><strong><font color="#00ffff" size="2">例五：一个命令创建项目的目录结构</font></strong><br>mkdir -vp test2/{test22/,test23/,test24/{test31,test32},test25/test33/{test34,test35}}<br><img src="http://yotuku.cn/link?url=E1wwwhhlM&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111009" alt=""><br><img src="http://yotuku.cn/link?url=EJHOv33gz&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111009" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件目录命令-more命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E4%B9%8Bmore%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="more简介"><a href="#more简介" class="headerlink" title="more简介"></a><strong>more简介</strong></h1><p>more命令，功能类似 cat ，cat命令是整个文件的内容从上到下显示在屏幕上。 more会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示，而且还有搜寻字串的功能 。more命令从前向后读取文件，因此在启动时就加载整个文件。<br><a id="more"></a></p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><p><strong>命令格式</strong>：more [-dlfpcsu ] [-num ] [+/ pattern] [+ linenum] [file … ]<br><strong>命令功能</strong>：  more命令和cat的功能一样都是查看文件里的内容，但有所不同的是more可以按页来查看文件的内容，还支持直接跳转行等功能。<br><strong>命令参数</strong>：<br>+n      从笫n行开始显示<br>-n       定义屏幕大小为n行<br>+/pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示<br>-c       从顶部清屏，然后显示<br>-d       提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能<br>-l        忽略Ctrl+l（换页）字符<br>-p       通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似<br>-s       把连续的多个空行显示为一行<br>-u       把文件内容中的下画线去掉  </p>
<h1 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a><strong>操作命令</strong></h1><p><strong>Enter    向下n行，需要定义。默认为1行</strong><br><strong>Ctrl+F   向下滚动一屏</strong><br><strong>空格键  向下滚动一屏</strong><br><strong>Ctrl+B  返回上一屏</strong><br><strong>=       输出当前行的行号</strong><br><strong>：f     输出文件名和当前行的行号 </strong><br><strong>V      调用vi编辑器</strong><br><strong>!命令   调用Shell，并执行命令</strong><br><strong>q       退出more</strong>  </p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p>例1：显示文件中从第3行起的内容<br>more +3 1.log<br><img src="http://yotuku.cn/link?url=V1ir5lpxf&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111013" alt=""></p>
<p>例2：从文件中查找第一个出现”b”字符串的行，并从该处前两行开始显示输出<br>more +/b 1.log<br><img src="http://yotuku.cn/link?url=E1XZsgaxz&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111013" alt=""></p>
<p>例3：设定每屏显示行数<br>more -5 1.log</p>
<p>例4：列一个目录下的文件，由于内容太多，会用more来分页显示(和管道 | 结合起来 )<br>ls -l  | more -3<br>每页显示3个文件信息，按 Ctrl+F 或者 空格键 将会显示下3条文件信息<br><img src="http://yotuku.cn/link?url=NJeTieaxM&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111013" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件目录命令-mv命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E4%B9%8Bmv%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="mv简介"><a href="#mv简介" class="headerlink" title="mv简介"></a><strong>mv简介</strong></h1><p>mv命令可以用来移动文件或者将文件改名（move (rename) files），经常用来备份文件或者目录<br><a id="more"></a></p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><p><strong>命令格式</strong>：mv [选项] 源文件或目录 目标文件或目录<br><strong>命令功能</strong>：根据mv命令中第二个参数类型（是目标文件还是目标目录），mv命令将文件重命名或将其移至一个新的目录中。<br>当第二个参数类型是文件时，mv命令完成文件重命名，此时，源文件只能有一个（也可以是源目录名），它将所给的源文件或目录重命名为给定的目标文件名。<br>当第二个参数是已存在的目录名称时，源文件或目录参数可以有多个，mv命令将各参数指定的源文件均移至目标目录中。在跨文件系统移动文件时，mv先拷贝，再将原有文件删除，而链至该文件的链接也将丢失。<br><strong>命令参数</strong>：<br>-b ：若需覆盖文件，则覆盖前先行备份。<br>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖<br>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖<br>-u ：若目标文件已经存在，且 source 比较新，才会更新(update)<br><strong>-t ：指定mv的目标目录，该选项适用于移动多个源文件到一个目录的情况，此时目标目录在前，源文件在后。</strong></p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p>例一：文件改名<br>mv test.log test1.txt<br>test.log 改为test1.txt</p>
<p>例二：移动文件<br>mv test1.txt test3<br>将test1.txt文件移到目录test3中</p>
<p>例三：将文件log1.txt,log2.txt,log3.txt移动到目录test3中。<br>mv log1.txt log2.txt log3.txt test3<br>将log1.txt ，log2.txt， log3.txt 三个文件移到 test3目录<br>mv -t /opt/soft/test/test4/ log1.txt log2.txt     log3.txt<br>将三个文件移动到test4目录</p>
<p>例五：将文件file1改名为file2，即使file2存在，也是直接覆盖掉。<br>mv -f log3.txt log2.txt</p>
<p>例六：目录的移动<br>mv dir1 dir2<br>如果目录dir2不存在，将目录dir1改名为dir2；否则，将dir1移动到dir2中</p>
<p><strong>例7：移动当前文件夹下的所有文件到上一级目录</strong><br>mv * ../</p>
<p><strong>例8：把当前目录的一个子目录里的文件移动到另一个子目录里</strong><br>mv test3/*.txt test5</p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux下SSH服务]]></title>
      <url>/2017/03/30/linux%E4%B8%8BSSH%E6%9C%8D%E5%8A%A1%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%85%A5/</url>
      <content type="html"><![CDATA[<h1 id="SSH原理"><a href="#SSH原理" class="headerlink" title="SSH原理"></a><strong>SSH原理</strong></h1><p>SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用SSH 协议可以有效防止远程管理过程中的信息泄露问题。SSH最初是UNIX系统上的一个程序，后来又迅速扩展到其他操作平台。SSH在正确使用时可弥补网络中的漏洞。SSH客户端适用于多种平台。<br><a id="more"></a><br>从客户端来看，SSH提供两种级别的安全验证：<br><strong>第一种级别是基于口令的安全验证</strong><br>只要你知道自己帐号和口令，就可以登录到远程主机。所有传输的数据都会被加密， 但是不能保证你正在连接的服务器就是你想连接的服务器。这个过程如下：<br>1）远程主机收到用户的登录请求，把自己的公钥发给用户。<br>2）用户使用这个公钥，将登录密码加密后，发送回来。<br>3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。这种方式可能会有别的服务器在冒充真正的服务器，将公钥发送给客户端，客户端就会将密码加密后发送给冒充的服务器，冒充的服务器就可以拿自己的私钥获取到密码，也就是受到“中间人”这种方式的攻击。<br>当第一次链接远程主机时，会提示您当前主机的“公钥指纹”，询问您是否继续，如果选择继续后就可以输入密码进行登录了，当远程的主机接受以后，该台服务器的公钥就会保存到~/.ssh/known_hosts文件中。<br><strong>第二种级别是基于密匙的安全验证</strong><br>需要依靠密匙，也就是必须为自己创建一对密匙，并把公用密匙放在需要访问的服务器上。如果你要连接到SSH服务器上，客户端软件就会向服务器发出请求，请求用你的密匙进行安全验证。服务器收到请求之后，先在该服务器上你的主目录下寻找你的公用密匙，然后把它和你发送过来的公用密匙进行比较。如果两个密匙一致，服务器就用公用密匙加密“质询”并把它发送给客户端软件。客户端软件收到“质询”之后就可以用你的私人密匙解密再把它发送给服务器。用这种方式，你必须知道自己密匙的口令。    </p>
<p>但是，与第一种级别相比，第二种级别不需要在网络上传送口令。第二种级别不仅加密所有传送的数据，而且“中间人”这种攻击方式也是不可能的（因为他没有你的私人密匙）。但是整个登录的过程可能需要10秒，但是相比输入密码的方式来说10秒也不长。</p>
<h1 id="安装SSH"><a href="#安装SSH" class="headerlink" title="安装SSH"></a><strong>安装SSH</strong></h1><p>sudo apt-get update<br>sudo apt-get openssh-server openssh-client</p>
<h1 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a><strong>配置SSH</strong></h1><p>sudo gedit /etc/ssh/sshd_config”<br>该文件下是SSH的相关配置，包括端口22。如下，允许root用户登入   </p>
<p><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-18/83709838.jpg" alt=""></p>
<h1 id="启动SSH"><a href="#启动SSH" class="headerlink" title="启动SSH"></a><strong>启动SSH</strong></h1><p>sudo ps -e |grep ssh”–&gt;回车–&gt;有sshd,说明ssh服务已经启动<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-18/94198166.jpg" alt=""><br>如果没有启动，”sudo service ssh start”–&gt;回车–&gt;ssh服务就会启动<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-18/3845994.jpg" alt=""></p>
<h1 id="查看SSH状态"><a href="#查看SSH状态" class="headerlink" title="查看SSH状态"></a><strong>查看SSH状态</strong></h1><p><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-18/80794591.jpg" alt=""></p>
<h1 id="SSH远程登入"><a href="#SSH远程登入" class="headerlink" title="SSH远程登入"></a><strong>SSH远程登入</strong></h1><p>使用putty进行ssh远程登入，默认端口22<br>第一次登录的时候，OpenSSH将会提示用户它不知道这台登录的主机，只要键入“yes”，就会把这台登录主机的“识别标记”加到“~/.ssh/know_hosts”文件中。第二次访问这台主机的时候就不会再显示这条提示信息了。然后，SSH提示用户输入远程主机上用户账号的口令。这样，就建立了SSH连接，这之后就可以象使用telnet那样方便地使用SSH了。<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-18/13635471.jpg" alt=""><br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-18/10463484.jpg" alt=""></p>
<h1 id="秘钥登入"><a href="#秘钥登入" class="headerlink" title="秘钥登入"></a><strong>秘钥登入</strong></h1><p>秘钥登入不要每次登入输入密码， 使用通信短语即可。<br>使用的是secureCRT<br>1，快速链接-公钥-属性设置-创建身份文件<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-18/86845951.jpg" alt=""></p>
<p>2，按照生成向导一步步完成<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-18/60764861.jpg" alt=""><br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-18/91827768.jpg" alt=""><br>这里选择OpneSSH格式<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-18/11044588.jpg" alt=""><br>通行短语类似于密码作用，在登入时会用到，如下：<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-18/86383046.jpg" alt="">  </p>
<p>3，完成后，将公钥传入要登入的服务器（linux）,可以采用虚拟机的文件共享方式。本地公钥在公钥文件名下可看到</p>
<p>4，在服务器段，建立要登入用户的.SSH文件<br>mkdir -p ~/.ssh &amp;&amp; chmod -R 700 ~/.ssh<br>chmod -R 600 ~/.ssh/ authorized_keys </p>
<p>5，将公钥文件的内容复制到authorized_keys中去（可直接粘贴复制）</p>
<p>6，在secrueCRT下，将公钥放在最前面，输入主机名，用户名<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-18/32316648.jpg" alt=""><br>接下来会提示输入通信短语，输入确定即可<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-18/86383046.jpg" alt=""><br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-18/14358158.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux服务器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux服务器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件目录命令-pwd命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E4%B9%8Bpwd%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="pwd简介"><a href="#pwd简介" class="headerlink" title="pwd简介"></a>pwd简介</h1><p>pwd 命令查看”当前工作目录“的完整路径。每当在终端进行操作时，都会有一个当前工作目录。在不太确定当前位置时，使用pwd来判定当前目录在文件系统内的确切位置。<br><a id="more"></a></p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a>命令学习</h1><p><strong>命令格式</strong>：pwd [选项] 目录<br><strong>命令功能</strong>：查看”当前工作目录“的完整路径<br><strong>常用参数</strong>：一般情况下不带任何参数<br>如果目录是链接时：<br>pwd -P  显示出实际路径，而连接（link）路径。<br>pwd -L：与pwd  -P完全相反，显示链接路径   </p>
<p><strong>环境变量PWD：显示当前工作路径的环境变量</strong><br>echo $PWD<br><strong>环境变量OLDPWD：显示上一次的工作路径</strong><br>echo $PWD<br>注意：由于是环境变量，使用的时候需要加上$变量标志</p>
<p>内建命令pwd和外部命令/bin/pwd,二者的基本功能是一致的，但是在显示当前目录时，/bin/pwd显示得更准确些，而pwd容易被操作者糊弄<br><strong>常用范例</strong><br>例1：用 pwd 命令查看当前工作目录的完整路径<br>pwd</p>
<p>例2：目录连接链接时，pwd -P  显示出实际路径，而非使用连接（link）路径<br>pwd -p</p>
<p>例3：当前目录被删除了，而pwd命令仍然显示那个目录<br><img src="http://yotuku.cn/link?url=4ybtgh2xG&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111008" alt=""><br>实例4：/bin/pwd<br>/bin/pwd [选项]<br>选项：<br>-L 目录连接链接时，输出连接路径<br>-P 输出物理路径</p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件目录命令-rm命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E4%B9%8Brm%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="rm简介"><a href="#rm简介" class="headerlink" title="rm简介"></a><strong>rm简介</strong></h1><p>rm命令为删除一个目录中的一个或多个文件或目录，也可以某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变<br>rm是一个危险的命令，使用的时候要特别当心，否则整个系统就会毁在这个命令（比如在/（根目录）下执行rm * -rf）。所以，在执行rm之前最好先确认一下在哪个目录，到底要删除什么东西。<br><a id="more"></a></p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><p><strong>命令格式</strong>：rm [选项] 文件<br><strong>命令功能</strong>：删除一个目录中的一个或多个文件或目录，如果没有使用- r选项，则rm不会删除目录。如果使用 rm 来删除文件，通常仍可以将该文件恢复原状。<br><strong>命令参数</strong>：<br>-f,忽略不存在的文件，从不给出提示。<br>-i,进行交互式删除<br>-r, -R,指示rm将参数中列出的全部目录和子目录均递归地删除。<br>-v, –verbose    详细显示进行的步骤<br>–help     显示此帮助信息并退出<br>–version  输出版本信息并退出  </p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p>例一：删除文件file，系统会先询问是否删除。<br>rm filename  </p>
<p>例二：强行删除file，系统不再提示<br>rm -f filename</p>
<p>例三：删除任何.log文件；删除前逐一询问确认<br>rm -i *.log</p>
<p>例四：将 test1子目录及子目录中所有档案删除<br>rm -r test1  </p>
<p>例七：自定义回收站功能<br>myrm()<br>{<br>D=/tmp/$(date +%Y%m%d%H%M%S);<br>//在/tmp文件夹中创建名为“当前日期”的文件<br>//其中“date+%Y%m%d%H%M%S”是规定了日期的输出格式<br>mkdir -p $D;<br>//以变量D中的路径创建文件夹<br>mv “$@” $D &amp;&amp; echo “moved to $D ok”;<br>//将所要删除的文件移入变量D中的文件夹内，移入成功后，输出移动成功<br>}<br><img src="http://yotuku.cn/link?url=Ny18Xa3eM&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111009" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件目录命令-tail命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E4%B9%8Btail%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="tail简介"><a href="#tail简介" class="headerlink" title="tail简介"></a><strong>tail简介</strong></h1><p>tail命令从指定点开始将文件写到标准输出。使用tail命令的-f选项可以方便的查阅正在改变的日志文件,tail -f filename会把filename里最尾部的内容显示在屏幕上,并且不但刷新,使你看到最新的文件内容.<br><a id="more"></a></p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><p><strong>命令格式</strong>：tail[必要参数][选择参数][文件]<br><strong>命令功能</strong>：用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。<br><strong>命令参数</strong>：<br>-f 循环读取<br>-q 不显示处理信息<br>-v 显示详细的处理信息<br>-c&lt;数目&gt; 显示的字节数<br>-n&lt;行数&gt; 显示行数<br>–pid=PID 与-f合用,表示在进程ID,PID死掉之后结束.<br>-q, –quiet, –silent 从不输出给出文件名的首部<br>-s, –sleep-interval=S 与-f合用,表示在每次反复的间隔休眠S秒   </p>
<h1 id="常用实例"><a href="#常用实例" class="headerlink" title="常用实例"></a><strong>常用实例</strong></h1><p>例1：显示文件末尾内容<br>tail -n 5 1.log<br>显示文件最后5行内容<br><img src="" alt=""></p>
<p>例3：从第3行开始显示文件<br>tail -n +5 1.log<br><img src="http://yotuku.cn/link?url=N1jWdW6eM&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111014" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之ifconfig命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E4%B9%8Bifconfig%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="ifconfig简介"><a href="#ifconfig简介" class="headerlink" title="ifconfig简介"></a><strong>ifconfig简介</strong></h1><hr>
<p>通常需要以root身份登录或使用sudo以便在Linux机器上使用ifconfig工具。依赖于ifconfig命令中使用一些选项属性，ifconfig工具不仅可以被用来简单地获取网络接口配置信息，还可以修改这些配置。  </p>
<p>用ifconfig命令配置的网卡信息，在网卡重启后机器重启后，配置就不存在。要想配置信息永远的存的电脑里，那就要修改网卡的配置文件了。  </p>
<h2 id=""><a href="#" class="headerlink" title=" "></a><a id="more"></a> </h2><h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><hr>
<p><strong>命令格式：</strong><br>ifconfig [网络设备] [参数]   </p>
<p><strong>命令功能：</strong><br>ifconfig 命令用来查看和配置网络设备。当网络环境发生改变时可通过此命令对网络进行相应的配置。</p>
<p><strong>命令参数：</strong><br>up 启动指定网络设备/网卡。<br>down 关闭指定网络设备/网卡。该参数可以有效地阻止通过指定接口的IP信息流，如果想永久地关闭一个接口，我们还需要从核心路由表中将该接口的路由信息全部删除。<br>arp 设置指定网卡是否支持ARP协议。<br>-promisc 设置是否支持网卡的promiscuous模式，如果选择此参数，网卡将接收网络中发给它所有的数据包<br>-allmulti 设置是否支持多播模式，如果选择此参数，网卡将接收网络中所有的多播数据包<br>-a 显示全部接口信息<br>-s 显示摘要信息（类似于 netstat -i）<br>add 给指定网卡配置IPv6地址<br>del 删除指定网卡的IPv6地址<br>&lt;硬件地址&gt; 配置网卡最大的传输单元<br>mtu&lt;字节数&gt; 设置网卡的最大传输单元 (bytes)<br>netmask&lt;子网掩码&gt; 设置网卡的子网掩码。掩码可以是有前缀0x的32位十六进制数，也可以是用点分开的4个十进制数。如果不打算将网络分成子网，可以不管这一选项；如果要使用子网，那么请记住，网络中每一个系统必须有相同子网掩码。<br>tunel 建立隧道<br>dstaddr 设定一个远端地址，建立点对点通信<br>-broadcast&lt;地址&gt; 为指定网卡设置广播协议<br>-pointtopoint&lt;地址&gt; 为网卡设置点对点通讯协议<br>multicast 为网卡设置组播标志<br>address 为网卡设置IPv4地址<br>txqueuelen&lt;长度&gt; 为网卡设置传输列队的长度  </p>
<hr>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><hr>
<p><strong>例1：显示网络设备信息（激活状态的）</strong>  </p>
<p>eth0 表示第一块网卡， 其中硬件地址表示网卡的物理地址，可以看到目前这个网卡的物理地址(MAC地址）是 00:50:56:BF:26:20<br>inet addr 用来表示网卡的IP地址，此网卡的 IP地址是 192.168.120.204<br>广播地址 Bcast:192.168.120.255，掩码地址Mask:255.255.255.0<br>lo 是表示主机的回坏地址，这个一般是用来测试一个网络程序，但又不想让局域网或外网的用户能够查看，只能在此台主机上运行和查看所用的网络接口。比如把 HTTPD服务器的指定到回坏地址，在浏览器输入 127.0.0.1 就能看到你所架WEB网站了。但只是您能看得到，局域网的其它主机或用户无从知道。<br>第一行：连接类型：Ethernet（以太网）HWaddr（硬件mac地址）<br>第二行：网卡的IP地址、子网、掩码<br>第三行：UP（代表网卡开启状态）RUNNING（代表网卡的网线被接上）MULTICAST（支持组播）  MTU:1500（最大传输单元）：1500字节<br>第四、五行：接收、发送数据包情况统计<br>第七行：接收、发送数据字节数统计信息。  </p>
<p><strong>例2：启动关闭指定网卡</strong><br>ifconfig eth0 up<br>ifconfig eth0 down<br>ifconfig eth0 up 为启动网卡eth0 ；ifconfig eth0 down 为关闭网卡eth0。<br>ssh登陆linux服务器操作要小心，关闭了就不能开启了，除非你有多网卡。 </p>
<p>例4：用ifconfig修改MAC地址 </p>
<p>ifconfig eth0 down //关闭网卡<br>ifconfig eth0 hw ether 00:AA:BB:CC:DD:EE<br>ifconfig eth0 up //启动网卡  </p>
<p><strong>例5：配置IP地址</strong><br>ifconfig eth0 192.168.120.56<br>给eth0网卡配置IP地：192.168.120.56<br> ifconfig eth0 192.168.120.56 netmask 255.255.255.0<br>给eth0网卡配置IP地址：192.168.120.56 ，并加上子掩码：255.255.255.0<br>ifconfig eth0 192.168.120.56 netmask 255.255.255.0 broadcast 192.168.120.255<br>给eth0网卡配置IP地址：192.168.120.56，加上子掩码：255.255.255.0，加上个广播地址：   192.168.120.255  </p>
<p>例6：启用和关闭ARP协议<br>ifconfig eth0 arp  开启网卡eth0 的arp协议<br>ifconfig eth0 -arp  关闭网卡eth0 的arp协议；  </p>
<p>例7：设置最大传输单元<br>ifconfig eth0 mtu 1500<br>设置能通过的最大数据包大小为 1500 bytes  </p>
<hr>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之网络命令-netstat命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E4%B9%8Bnetstat%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="netstat简介"><a href="#netstat简介" class="headerlink" title="netstat简介"></a><strong>netstat简介</strong></h1><p>netstat命令用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。netstat是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。<br><a id="more"></a><br>如果你的计算机有时候接收到的数据报导致出错数据或故障，你不必感到奇怪，TCP/IP可以容许这些类型的错误，并能够自动重发数据报。但如果累计的出错情况数目占到所接收的IP数据报相当大的百分比，或者它的数目正迅速增加，那么你就应该使用netstat查一查为什么会出现这些情况了。</p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><p><strong>命令格式：</strong><br>netstat [-acCeFghilMnNoprstuvVwx][-A&lt;网络类型&gt;][–ip]  </p>
<p><strong>命令功能：</strong><br>netstat用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。 </p>
<p><strong>命令参数：</strong><br>-a或–all 显示所有连线中的Socket。<br>-A&lt;网络类型&gt;或–&lt;网络类型&gt; 列出该网络类型连线中的相关地址。<br>-c或–continuous 持续列出网络状态。<br>-C或–cache 显示路由器配置的快取信息。<br>-e或–extend 显示网络其他相关信息。<br>-F或–fib 显示FIB。<br>-g或–groups 显示多重广播功能群组组员名单。<br>-h或–help 在线帮助。<br>-i或–interfaces 显示网络界面信息表单。<br>-l或–listening 显示监控中的服务器的Socket。<br>-M或–masquerade 显示伪装的网络连线。<br>-n或–numeric 直接使用IP地址，而不通过域名服务器。<br>-N或–netlink或–symbolic 显示网络硬件外围设备的符号连接名称。<br>-o或–timers 显示计时器。<br>-p或–programs 显示正在使用Socket的程序识别码和程序名称。<br>-r或–route 显示Routing Table。<br>-s或–statistice 显示网络工作信息统计表。<br>-t或–tcp 显示TCP传输协议的连线状况。<br>-u或–udp 显示UDP传输协议的连线状况。<br>-v或–verbose 显示指令执行过程。<br>-V或–version 显示版本信息。<br>-w或–raw 显示RAW传输协议的连线状况。<br>-x或–unix 此参数的效果和指定”-A unix”参数相同。<br>–ip或–inet 此参数的效果和指定”-A inet”参数相同。  </p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p>例1：无参数使用<br>netstat  </p>
<p>从整体上看，netstat的输出结果可以分为两个部分：<br>一个是Active Internet connections，称为有源TCP连接，其中”Recv-Q”和”Send-Q”指的是接收队列和发送队列。这些数字一般都应该是0。如果不是则表示软件包正在队列中堆积。这种情况只能在非常少的情况见到。<br>另一个是Active UNIX domain sockets，称为有源Unix域套接口(和网络套接字一样，但是只能用于本机通信，性能可以提高一倍)。<br>Proto显示连接使用的协议,RefCnt表示连接到本套接口上的进程号,Types显示套接口的类型,State显示套接口当前的状态,Path表示连接到套接口的其它进程使用的路径名。<br>套接口类型：<br>-t ：TCP<br>-u ：UDP<br>-raw ：RAW类型<br>–unix ：UNIX域类型<br>–ax25 ：AX25类型<br>–ipx ：ipx类型<br>–netrom ：netrom类型<br>状态说明：<br>LISTEN：侦听来自远方的TCP端口的连接请求<br>SYN-SENT：再发送连接请求后等待匹配的连接请求（如果有大量这样的状态包，检查是否中招了）<br>SYN-RECEIVED：再收到和发送一个连接请求后等待对方对连接请求的确认（如有大量此状态，估计被flood攻击了）<br>ESTABLISHED：代表一个打开的连接<br>FIN-WAIT-1：等待远程TCP连接中断请求，或先前的连接中断请求的确认<br>FIN-WAIT-2：从远程TCP等待连接中断请求<br>CLOSE-WAIT：等待从本地用户发来的连接中断请求<br>CLOSING：等待远程TCP对连接中断的确认<br>LAST-ACK：等待原来的发向远程TCP的连接中断请求的确认（不是什么好东西，此项出现，检查是否被攻击）<br>TIME-WAIT：等待足够的时间以确保远程TCP接收到连接中断请求的确认<br>CLOSED：没有任何连接状态  </p>
<p>例2：列出所有端口<br>netstat -a  </p>
<p>显示一个所有的有效连接信息列表，包括已建立的连接（ESTABLISHED），也包括监听连接请（LISTENING）的那些连接。  </p>
<p>例3：显示当前UDP连接状况<br>netstat -nu  </p>
<p>例4：显示UDP端口号的使用情况<br>netstat -apu  </p>
<p>例5：显示网卡列表<br>netstat -i  </p>
<p>例6：显示组播组的关系<br>netstat -g  </p>
<p>例7：显示网络统计信息<br>netstat -s  </p>
<p>例8：显示监听的套接口<br>netstat -l  </p>
<p>例9：显示所有已建立的有效连接<br>netstat -n  </p>
<p>例10：显示关于以太网的统计数据<br>netstat -e  </p>
<p>用于显示关于以太网的统计数据。它列出的项目包括传送的数据报的总字节数、错误数、删除数、数据报的数量和广播的数量。这些统计数据既有发送的数据报数量，也有接收的数据报数量。这个选项可以用来统计一些基本的网络流量）  </p>
<p>例11：显示关于路由表的信息<br>netstat -r  </p>
<p>例12：列出所有 tcp 端口<br>netstat -at  </p>
<p>例13：统计机器中网络连接各个状态个数<br>netstat -a | awk ‘/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}’  </p>
<p>例14：把状态全都取出来后使用uniq -c统计后再进行排序<br>netstat -nat |awk ‘{print $6}’|sort|uniq -c  </p>
<p>例15：查看连接某服务端口最多的的IP地址<br>netstat -nat | grep “192.168.120.20:16067” |awk ‘{print $5}’|awk -F: ‘{print $4}’|sort|uniq -c|sort -nr|head -20  </p>
<p>例16：找出程序运行的端口<br> netstat -ap | grep ssh  </p>
<p>例17：在 netstat 输出中显示 PID 和进程名称<br>netstat -pt  </p>
<p>例18：找出运行在指定端口的进程<br>netstat -anpt | grep ‘:16064’<br>运行在端口16064的进程id为24596，再通过ps命令就可以找到具体的应用程序了。  </p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之磁盘命令-df命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E7%A3%81%E7%9B%98%E5%91%BD%E4%BB%A4%E4%B9%8Bdf%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="df命令简介"><a href="#df命令简介" class="headerlink" title="df命令简介"></a><strong>df命令简介</strong></h1><hr>
<p>df命令的功能是用来检查linux服务器的文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p>
<h2 id=""><a href="#" class="headerlink" title=" "></a><a id="more"></a> </h2><h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><p><strong>命令格式：</strong><br>df [选项] [文件]  </p>
<p><strong>命令功能：</strong><br>显示指定磁盘文件的可用空间。如果没有文件名被指定，则所有当前被挂载的文件系统的可用空间将被显示。默认情况下，磁盘空间将以 1KB 为单位进行显示，除非环境变量 POSIXLY_CORRECT 被指定，那样将以512字节为单位进行显示  </p>
<p><strong>命令参数：</strong><br><strong>必要参数：</strong><br>-a 全部文件系统列表<br>-h 方便阅读方式显示<br>-H 等于“-h”，但是计算式，1K=1000，而不是1K=1024<br>-i 显示inode信息<br>-k 区块为1024字节<br>-l 只显示本地文件系统<br>-m 区块为1048576字节<br>–no-sync 忽略 sync 命令<br>-P 输出格式为POSIX<br>–sync 在取得磁盘信息前，先执行sync命令<br>-T 文件系统类型  </p>
<p><strong>选择参数：</strong><br>–block-size=&lt;区块大小&gt; 指定区块大小<br>-t&lt;文件系统类型&gt; 只显示选定文件系统的磁盘信息<br>-x&lt;文件系统类型&gt; 不显示选定文件系统的磁盘信息<br>–help 显示帮助信息<br>–version 显示版本信息  </p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p>例1：显示磁盘使用情况<br>df<br>linux中df命令的输出清单的第1列是代表文件系统对应的设备文件的路径名（一般是硬盘上的分区）；<br>第2列给出分区包含的数据块（1024字节）的数目；<br>第3，4列分别表示已用的和可用的数据块数目。用户也许会感到奇怪的是，第3，4列块数之和不等于第2列中的块数。这是因为缺省的每个分区都留了少量空间供系统管理员使用。即使遇到普通用户空间已满的情况，管理员仍能登录和留有解决问题所需的工作空间。<br>第5列已用% 列表示普通用户空间使用的百分比，即使这一数字达到100％，分区仍然留有系统管理员使用的空间。<br>第6列挂载点列表示文件系统的挂载点。<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/38746727.jpg" alt=""></p>
<p>例2：以inode模式来显示磁盘使用情况<br> df -i<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/65959793.jpg" alt=""></p>
<p>例3：列出各文件系统的i节点使用情况<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/76465748.jpg" alt=""></p>
<p>例5：列出文件系统的类型<br>df -T<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/17435194.jpg" alt=""></p>
<p>例6：以更易读的方式显示目前磁盘空间和使用情况<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/91277541.jpg" alt="">  </p>
<p>例7：显示所有的信息<br>df –total<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/42053999.jpg" alt="">  </p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之网络命令-ping命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E4%B9%8Bping%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="ping简介"><a href="#ping简介" class="headerlink" title="ping简介"></a><strong>ping简介</strong></h1><p>Linux系统的ping命令是常用的网络命令，它通常用来测试与目标主机的连通性。<br><a id="more"></a><br>我们经常会说“ping一下某机器，看是不是开着”、不能打开网页时会说“你先ping网关地址192.168.1.1试试”。它通过发送ICMP ECHO_REQUEST数据包到网络主机（send ICMP ECHO_REQUEST to network hosts），并显示响应情况，这样我们就可以根据它输出的信息来确定目标主机是否可访问（但这不是绝对的）。有些服务器为了防止通过ping探测到，通过防火墙设置了禁止ping或者在内核参数中禁止ping，这样就不能通过ping确定该主机是否还处于开启状态。<br>linux下的ping和windows下的ping稍有区别,linux下ping不会自动终止,需要按ctrl+c终止或者用参数-c指定要求完成的回应次数。</p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><p><strong>命令格式：</strong><br>ping [参数] [主机名或IP地址]  </p>
<p><strong>命令功能：</strong><br>ping命令用于：确定网络和各外部主机的状态；跟踪和隔离硬件和软件问题；测试、评估和管理网络。<br>如果主机正在运行并连在网上，它就对回送信号进行响应。每个回送信号请求包含一个网际协议（IP）和 ICMP 头，后面紧跟一个 tim 结构，以及来填写这个信息包的足够的字节。缺省情况是连续发送回送信号请求直到接收到中断信号（Ctrl-C）。<br>ping 命令每秒发送一个数据报并且为每个接收到的响应打印一行输出。ping 命令计算信号往返时间和(信息)包丢失情况的统计信息，并且在完成之后显示一个简要总结。ping 命令在程序超时或当接收到 SIGINT 信号时结束。Host 参数或者是一个有效的主机名或者是因特网地址。  </p>
<p><strong>命令参数：</strong><br>-d 使用Socket的SO_DEBUG功能。<br>-f  极限检测。大量且快速地送网络封包给一台机器，看它的回应。<br>-n 只输出数值。<br>-q 不显示任何传送封包的信息，只显示最后的结果。<br>-r 忽略普通的Routing Table，直接将数据包送到远端主机上。通常是查看本机的网络接口是否有问题。<br>-v 详细显示指令的执行过程。  </p>
<p></p><p>-c 数目：在发送指定数目的包后停止。<br>-i 秒数：设定间隔几秒送一个网络封包给一台机器，预设值是一秒送一次。<br>-I 网络界面：使用指定的网络界面送出数据包。<br>-l 前置载入：设置在送出要求信息之前，先行发出的数据包。<br>-p 范本样式：设置填满数据包的范本样式。<br>-s 字节数：指定发送的数据字节数，预设值是56，加上8字节的ICMP头，一共是64ICMP数据字节。<br>-t 存活数值：设置存活数值TTL的大小。  </p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p>例1：ping的通的情况<br>ping 192.168.120.205  </p>
<p>例2：ping不通的情况<br>ping 192.168.120.202  </p>
<p>例3：ping网关<br>ping -b 192.168.120.1  </p>
<p>例4：ping指定次数<br>ping -c 10 192.168.120.206  </p>
<p>例5：时间间隔和次数限制的ping<br>ping -c 10 -i 0.5 192.168.120.206  </p>
<p>例6：通过域名ping公网上的站点<br>ping -c 5 www.58.com  </p>
<p>例7：多参数使用<br>ping -i 3 -s 1024 -t 255 192.168.120.206<br>-i 3 发送周期为 3秒 -s 设置发送包的大小为1024 -t 设置TTL值为 255  </p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之route命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E4%B9%8Broute%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="route简介"><a href="#route简介" class="headerlink" title="route简介"></a><strong>route简介</strong></h1><p>route命令用于显示和操作IP路由表。要实现两个不同的子网之间的通信，需要一台连接两个网络的路由器，或者同时位于两个网络的网关来实现。<br><a id="more"></a><br>在Linux系统中，设置路由通常是为了解决以下问题：该Linux系统在一个局域网中，局域网中有一个网关，能够让机器访问Internet，那么就需要将这台机器的IP地址设置为Linux机器的默认路由。<br>直接在命令行下执行route命令来添加路由，不会永久保存，当网卡重启或者机器重启之后，该路由就失效了。<br>可以在/etc/rc.local中添加route命令来保证该路由设置永久有效。</p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><p><strong>命令格式：</strong><br>route [-f] [-p] [Command [Destination] [mask Netmask] [Gateway] [metric Metric]] [if Interface]]   </p>
<p><strong>命令功能：</strong><br>Route命令是用于操作基于内核ip路由表，它的主要作用是创建一个静态路由让指定一个主机或者一个网络通过一个网络接口，如eth0。当使用”add”或者”del”参数时，路由表被修改，如果没有参数，则显示路由表当前的内容。 </p>
<p><strong>命令参数：</strong><br>-c 显示更多信息<br>-n 不解析名字<br>-v 显示详细的处理信息<br>-F 显示发送信息<br>-C 显示路由缓存<br>-f 清除所有网关入口的路由表。<br>-p 与 add 命令一起使用时使路由具有永久性。  </p>
<p>add:添加一条新路由。<br>del:删除一条路由。<br>-net:目标地址是一个网络。<br>-host:目标地址是一个主机。<br>netmask:当添加一个网络路由时，需要使用网络掩码。<br>gw:路由数据包通过网关。注意，你指定的网关必须能够达到。<br>metric：设置路由跳数。  </p>
<p>Command 指定您想运行的命令 (Add/Change/Delete/Print)。<br>Destination 指定该路由的网络目标。<br>mask Netmask 指定与网络目标相关的网络掩码（也被称作子网掩码）。<br>Gateway 指定网络目标定义的地址集和子网掩码可以到达的前进或下一跃点 IP 地址。<br>metric Metric 为路由指定一个整数成本值标（从 1 至 9999），当在路由表(与转发的数据包目标地址最匹配)的多个路由中进行选择时可以使用。<br>if Interface 为可以访问目标的接口指定接口索引。若要获得一个接口列表和它们相应的接口索引，使用 route print 命令的显示功能。可以使用十进制或十六进制值进行接口索引。  </p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p>例1：显示当前路由<br>route<br>route -n  </p>
<p>route -n (-n 表示不解析名字,列出速度会比route 快) </p>
<p>第一行表示主机所在网络的地址为192.168.120.0，若数据传送目标是在本局域网内通信，则可直接通过eth0转发数据包;<br>第四行表示数据传送目的是访问Internet，则由接口eth0，将数据包发送到网关192.168.120.240<br>其中Flags为路由标志，标记当前网络节点的状态。<br><strong>Flags标志说明：</strong><br>U Up表示此路由当前为启动状态<br>H Host，表示此网关为一主机<br>G Gateway，表示此网关为一路由器<br>R Reinstate Route，使用动态路由重新初始化的路由<br>D Dynamically,此路由是动态性地写入<br>M Modified，此路由是由路由守护程序或导向器动态修改<br>! 表示此路由当前为关闭状态  </p>
<p>例2：添加网关/设置网关<br>route add -net 224.0.0.0 netmask 240.0.0.0 dev eth0<br>增加一条 到达244.0.0.0的路由  </p>
<p>例3：屏蔽一条路由<br>route add -net 224.0.0.0 netmask 240.0.0.0 reject  </p>
<p>例4：删除路由记录<br>route del -net 224.0.0.0 netmask 240.0.0.0<br>route del -net 224.0.0.0 netmask 240.0.0.0 reject </p>
<p>例5：删除和添加设置默认网关</p>
<p>route del default gw 192.168.120.240<br>route add default gw 192.168.120.240  </p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之网络命令-ss命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E4%B9%8Bss%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="ss简介"><a href="#ss简介" class="headerlink" title="ss简介"></a><strong>ss简介</strong></h1><p>ss是Socket Statistics的缩写。ss命令可以用来获取socket统计信息，它可以显示和netstat类似的内容。但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。<br><a id="more"></a><br>当服务器的socket连接数量变得非常大时，无论是使用netstat命令还是直接cat /proc/net/tcp，执行速度都会很慢。当服务器维持的连接达到上万个的时候，使用netstat等于浪费 生命，而用ss才是节省时间。</p>
<p>ss快的秘诀在于，它利用到了TCP协议栈中tcp_diag。tcp_diag是一个用于分析统计的模块，可以获得Linux 内核中第一手的信息，这就确保了ss的快捷高效。当然，如果你的系统中没有tcp_diag，ss也可以正常运行，只是效率会变得稍慢。（但仍然比 netstat要快。）</p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><p><strong>命令格式:</strong><br>ss [参数]<br>ss [参数] [过滤]  </p>
<p><strong>命令功能：</strong><br>ss(Socket Statistics的缩写)命令可以用来获取 socket统计信息，此命令输出的结果类似于 netstat输出的内容，但它能显示更多更详细的 TCP连接状态的信息，且比 netstat 更快速高效。它使用了 TCP协议栈中 tcp_diag（是一个用于分析统计的模块），能直接从获得第一手内核信息，这就使得 ss命令快捷高效。在没有 tcp_diag，ss也可以正常运行。 </p>
<p><strong>命令参数：</strong><br>-h, –help    帮助信息<br>-V, –version    程序版本信息<br>-n, –numeric    不解析服务名称<br>-r, –resolve        解析主机名<br>-a, –all    显示所有套接字（sockets）<br>-l, –listening    显示监听状态的套接字（sockets）<br>-o, –options        显示计时器信息<br>-e, –extended       显示详细的套接字（sockets）信息<br>-m, –memory         显示套接字（socket）的内存使用情况<br>-p, –processes    显示使用套接字（socket）的进程<br>-i, –info    显示 TCP内部信息<br>-s, –summary    显示套接字（socket）使用概况<br>-4, –ipv4           仅显示IPv4的套接字（sockets）<br>-6, –ipv6           仅显示IPv6的套接字（sockets）<br>-0, –packet            显示 PACKET 套接字（socket）<br>-t, –tcp    仅显示 TCP套接字（sockets）<br>-u, –udp    仅显示 UCP套接字（sockets）<br>-d, –dccp    仅显示 DCCP套接字（sockets）<br>-w, –raw    仅显示 RAW套接字（sockets）<br>-x, –unix    仅显示 Unix套接字（sockets）<br>-f, –family=FAMILY  显示 FAMILY类型的套接字（sockets），FAMILY可选，支持  unix, inet, inet6, link, netlink<br>-A, –query=QUERY, –socket=QUERY<br>      QUERY := {all|inet|tcp|udp|raw|unix|packet|netlink}[,QUERY]<br>-D, –diag=FILE     将原始TCP套接字（sockets）信息转储到文件<br> -F, –filter=FILE   从文件中都去过滤器信息<br>       FILTER : = [ state TCP-STATE ] [ EXPRESSION ]  </p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p>例1：显示TCP连接<br>ss -t -a  </p>
<p>例2：显示 Sockets 摘要<br>ss -s  </p>
<p>列出当前的established, closed, orphaned and waiting TCP sockets  </p>
<p>例3：列出所有打开的网络连接端口<br>ss -l  </p>
<p>例4：查看进程使用的socket<br>ss -pl  </p>
<p>例5：找出打开套接字/端口应用程序<br>ss -lp | grep 3306  </p>
<p>例6：显示所有UDP Sockets<br>ss -u -a  </p>
<p>例7：显示所有状态为established的SMTP连接<br>ss -o state established ‘( dport = :smtp or sport = :smtp )’   </p>
<p>例8：显示所有状态为Established的HTTP连接<br>ss -o state established ‘( dport = :http or sport = :http )’   </p>
<p>例9：列举出处于 FIN-WAIT-1状态的源端口为 80或者 443，目标网络为 193.233.7/24所有 tcp套接字<br>ss -o state fin-wait-1 ‘( sport = :http or sport = :https )’ dst 193.233.7/24  </p>
<p>例10：用TCP 状态过滤Sockets:<br>ss -4 state FILTER-NAME-HERE<br>ss -6 state FILTER-NAME-HERE  </p>
<p>FILTER-NAME-HERE 可以代表以下任何一个：<br>established<br>syn-sent<br>syn-recv<br>fin-wait-1<br>fin-wait-2<br>time-wait<br>closed<br>close-wait<br>last-ack<br>listen<br>closing  </p>
<p>all : 所有以上状态<br>connected : 除了listen and closed的所有状态<br>synchronized :所有已连接的状态除了syn-sent<br>bucket : 显示状态为maintained as minisockets,如：time-wait和syn-recv.<br>big : 和bucket相反.  </p>
<p>例11：匹配远程地址和端口号<br>ss dst ADDRESS_PATTERN<br>ss dst 192.168.1.5<br>ss dst 192.168.119.113:http<br>ss dst 192.168.119.113:smtp<br>ss dst 192.168.119.113:443  </p>
<p>例12：匹配本地地址和端口号<br>ss src ADDRESS_PATTERN<br>ss src 192.168.119.103<br>ss src 192.168.119.103:http<br>ss src 192.168.119.103:80<br>ss src 192.168.119.103:smtp<br>ss src 192.168.119.103:25  </p>
<p>例13：将本地或者远程端口和一个数比较<br>ss dport OP PORT<br>ss sport OP PORT  </p>
<p>ss dport OP PORT 远程端口和一个数比较；ss sport OP PORT 本地端口和一个数比较。<br>OP 可以代表以下任意一个:<br><strong>&lt;= or le : 小于或等于端口号</strong><br><strong>&gt;= or ge : 大于或等于端口号</strong><br><strong>&gt;== or eq : 等于端口号</strong><br><strong>!= or ne : 不等于端口号</strong><br><strong>&lt; or gt : 小于端口号</strong><br><strong>&gt; or lt : 大于端口号</strong>  </p>
<p>例14：ss 和 netstat 效率对比<br>time netstat -at<br>time ss  </p>
<p>用time 命令分别获取通过netstat和ss命令获取程序和概要占用资源所使用的时间。在服务器连接数比较多的时候，netstat的效率完全没法和ss比。  </p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之网络命令-traceroute命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E4%B9%8Btraceroute%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="traceroute简介"><a href="#traceroute简介" class="headerlink" title="traceroute简介"></a><strong>traceroute简介</strong></h1><p>通过traceroute可以知道信息从你的计算机到互联网另一端的主机是走的什么路径。<br><a id="more"></a><br>每次数据包由某一同样的出发点（source）到达某一同样的目的地(destination)走的路径可能会不一样，但基本上来说大部分时候所走的路由是相同的。linux系统中，我们称之为traceroute,在MS Windows中为tracert。<br> traceroute通过发送小的数据包到目的设备直到其返回，来测量其需要多长时间。一条路径上的每个设备traceroute要测3次。输出结果中包括每次测试的时间(ms)和设备的名称（如有的话）及其IP地址。<br>在大多数情况下，在linux主机系统下，直接执行命令行：<br>traceroute hostname<br>而在Windows系统下是执行tracert的命令：<br>tracert hostname    </p>
<h1 id="traceroute工作原理"><a href="#traceroute工作原理" class="headerlink" title="traceroute工作原理"></a><strong>traceroute工作原理</strong></h1><p><strong>Traceroute程序的设计是利用ICMP及IP header的TTL（Time To Live）栏位（field）。</strong>  </p>
<p><strong>首先，traceroute送出一个TTL是1的IP datagram（其实，每次送出的为3个40字节的包，包括源地址，目的地址和包发出的时间标签）到目的地，当路径上的第一个路由器（router）收到这个datagram时，它将TTL减1。此时，TTL变为0了，所以该路由器会将此datagram丢掉，并送回一个「ICMP time exceeded」消息（包括发IP包的源地址，IP包的所有内容及路由器的IP地址），traceroute 收到这个消息后，便知道这个路由器存在于这个路径上，接着traceroute 再送出另一个TTL是2 的datagram，发现第2 个路由器。</strong></p>
<p><strong>traceroute 每次将送出的datagram的TTL 加1来发现另一个路由器，这个重复的动作一直持续到某个datagram 抵达目的地。当datagram到达目的地后，该主机并不会送回ICMP time exceeded消息，因为它已是目的地了，那么traceroute如何得知目的地到达了呢？</strong></p>
<p><strong>Traceroute在送出UDP datagrams到目的地时，它所选择送达的port number 是一个一般应用程序都不会用的号码（30000 以上），所以当此UDP datagram 到达目的地后该主机会送回一个「ICMP port unreachable」的消息，而当traceroute 收到这个消息时，便知道目的地已经到达了。所以traceroute 在Server端也是没有所谓的Daemon 程式。</strong>  </p>
<p><strong>Traceroute提取发 ICMP TTL到期消息设备的IP地址并作域名解析。每次 ，Traceroute都打印出一系列数据,包括所经过的路由设备的域名及 IP地址,三个包每次来回所花时间。</strong></p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><p><strong>命令格式：</strong><br>traceroute[参数][主机]  </p>
<p><strong>命令功能：</strong><br>traceroute指令让你追踪网络数据包的路由途径，预设数据包大小是40Bytes，用户可另行设置。<br>具体参数格式：traceroute [-dFlnrvx][-f&lt;存活数值&gt;][-g&lt;网关&gt;…][-i&lt;网络界面&gt;][-m&lt;存活数值&gt;][-p&lt;通信端口&gt;][-s&lt;来源地址&gt;][-t&lt;服务类型&gt;][-w&lt;超时秒数&gt;][主机名称或IP地址][数据包大小]  </p>
<p><strong>命令参数：</strong><br>-d 使用Socket层级的排错功能。<br>-f 设置第一个检测数据包的存活数值TTL的大小。<br>-F 设置勿离断位。<br>-g 设置来源路由网关，最多可设置8个。<br>-i 使用指定的网络界面送出数据包。<br>-I 使用ICMP回应取代UDP资料信息。<br>-m 设置检测数据包的最大存活数值TTL的大小。<br>-n 直接使用IP地址而非主机名称。<br>-p 设置UDP传输协议的通信端口。<br>-r 忽略普通的Routing Table，直接将数据包送到远端主机上。<br>-s 设置本地主机送出数据包的IP地址。<br>-t 设置检测数据包的TOS数值。<br>-v 详细显示指令的执行过程。<br>-w 设置等待远端主机回报的时间。<br>-x 开启或关闭数据包的正确性检验。  </p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p>例1：traceroute 用法简单、最常用的用法<br>traceroute www.baidu.com   </p>
<p>记录按序列号从1开始，每个纪录就是一跳 ，每跳表示一个网关，我们看到每行有三个时间，单位是 ms，其实就是-q的默认参数。探测数据包向每个网关发送三个数据包后，网关响应后返回的时间；如果您用 traceroute -q 4 www.58.com ，表示向每个网关发送4个数据包。<br>有时我们traceroute 一台主机时，会看到有一些行是以星号表示的。出现这样的情况，可能是防火墙封掉了ICMP的返回信息，所以我们得不到什么相关的数据包返回数据。<br>有时我们在某一网关处延时比较长，有可能是某台网关比较阻塞，也可能是物理设备本身的原因。当然如果某台DNS出现问题时，不能解析主机名、域名时，也会 有延时长的现象；您可以加-n 参数来避免DNS解析，以IP格式输出数据。<br>如果在局域网中的不同网段之间，我们可以通过traceroute 来排查问题所在，是主机的问题还是网关的问题。如果我们通过远程来访问某台服务器遇到问题时，我们用到traceroute 追踪数据包所经过的网关，提交IDC服务商，也有助于解决问题；但目前看来在国内解决这样的问题是比较困难的，就是我们发现问题所在，IDC服务商也不可能帮助我们解决。  </p>
<p>例2：跳数设置<br>traceroute -m 10 www.baidu.com  </p>
<p>例3：显示IP地址，不查主机名<br>traceroute -n www.baidu.com  </p>
<p>例4：探测包使用的基本UDP端口设置6888<br>traceroute -p 6888 www.baidu.com  </p>
<p>例5：把探测包的个数设置为值4<br>traceroute -q 4 www.baidu.com  </p>
<p>例6：绕过正常的路由表，直接发送到网络相连的主机<br> traceroute -r www.baidu.com  </p>
<p>例7：把对外发探测包的等待响应时间设置为3秒<br>traceroute -w 3 www.baidu.com  </p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux文件类型与扩展名]]></title>
      <url>/2017/03/30/linux%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%89%A9%E5%B1%95%E5%90%8D/</url>
      <content type="html"><![CDATA[<h1 id="linux文件类型与扩展名"><a href="#linux文件类型与扩展名" class="headerlink" title="linux文件类型与扩展名"></a><strong>linux文件类型与扩展名</strong></h1><h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><p>Linux文件类型常见的有：<strong>普通文件、目录文件、字符设备文件和块设备文件、符号链接文件</strong>等。<br><a id="more"></a><br><strong>1. 普通文件</strong><br>我们用 ls -lh 来查看某个文件的属性，可以看到有类似-rwxrwxrwx，值得注意的是第一个符号是 - ，这样的文件在Linux中就是普通文件。这些文件一般是用一些相关的应用程序创建，比如图像工具、文档工具、归档工具或 cp工具等。这类文件的删除方式是用rm 命令。 另外，依照文件的内容，又大略可以分为：<br><strong>1&gt;. 纯文本档(ASCII)：</strong><br>Linux系统中最多的一种文件类型，称为纯文本档是因为内容为我们可以直接读到的数据，例如数字、字母等等。 几乎只要我们可以用来做为设定的文件都属于这一种文件类型。<br>举例来说，你可以用命令： cat ~/.bashrc 来看到该文件的内容。 (cat 是将一个文件内容读出来的指令).<br><strong>2&gt;. 二进制文件(binary)：</strong><br>Linux系统其实仅认识且可以执行二进制文件(binary file)。Linux当中的可执行文件(scripts, 文字型批处理文件不算)就是这种格式的文件。 使用的命令cat就是一个binary file。<br><strong>3&gt;. 数据格式文件(data)：</strong><br>有些程序在运作的过程当中会读取某些特定格式的文件，那些特定格式的文件可以被称为数据文件 (data file)。<br>举例来说，我们的Linux在使用者登录时，都会将登录的数据记录在 /var/log/wtmp那个文件内，该文件是一个data file，能够透过last这个指令读出来！ 但是使用cat时，会读出乱码～因为他是属于一种特殊格式的文件  </p>
<p><strong>2. 目录文件</strong><br>当我们在某个目录下执行，看到有类似 drwxr-xr-x ，这样的文件就是目录，目录在Linux是一个比较特殊的文件。注意它的第一个字符是d。创建目录的命令可以用 mkdir 命令，或cp命令，cp可以把一个目录复制为另一个目录。删除用rm 或rmdir命令。  </p>
<p><strong>3. 字符设备或块设备文件</strong><br>如时您进入/dev目录，列一下文件，会看到类似如下的:<br>[root@localhost ~]# ls -al /dev/tty<br>crw-rw-rw- 1 root tty 5, 0 11-03 15:11 /dev/tty<br>[root@localhost ~]# ls -la /dev/sda1<br>brw-r—– 1 root disk 8, 1 11-03 07:11 /dev/sda1<br>我们看到/dev/tty的属性是 crw-rw-rw- ，前面第一个字符是 c ，表示字符设备文件。比如猫等串口设备。我们看到 /dev/sda1 的属性是 brw-r—– ，注意前面的第一个字符是b，这表示块设备，比如硬盘，光驱等设备。<br>这个种类的文件，是用mknode来创建，用rm来删除。目前在最新的Linux发行版本中，我们一般不用自己来创建设备文件。因为这些文件是和内核相关联的。<br>与系统周边及储存等相关的一些文件， 通常都集中在/dev这个目录之下！通常又分为两种：<br><strong>区块(block)设备档 ：</strong><br>就是一些储存数据， 以提供系统随机存取的接口设备。<br>举例来说，硬盘与软盘等就是！ 可以随机的在硬盘的不同区块读写。可以自行查一下/dev/sda看看， 会发现第一个属性为[ b ]！<br><strong>字符(character)设备文件：</strong><br>一些串行端口的接口设备， 例如键盘、鼠标等等！这些设备的特色就是一次性读取，不能够截断输出。<br> 举例来说，你不可能让鼠标跳到另一个画面，而是滑动到另一个地方！第一个属性为 [ c ]。  </p>
<p><strong>4. 数据接口文件(sockets)：</strong><br>数据接口文件（套接口文件），这种类型的文件通常被用在网络上的数据承接了。我们可以启动一个程序来监听客户端的要求， 而客户端就可以透过这个socket来进行数据的沟通了。第一个属性为 [ s ]， 最常在/var/run这个目录中看到这种文件类型了。<br>例如：当我们启动MySQL服务器时，会产生一个mysql.sock的文件。<br>[root@localhost ~]# ls -lh /var/lib/mysql/mysql.sock<br>srwxrwxrwx 1 mysql mysql 0 04-19 11:12 /var/lib/mysql/mysql.sock<br>注意这个文件的属性的第一个字符是 s。 </p>
<p><strong>5. 符号链接文件：</strong><br>当我们查看文件属性时，会看到有类似 lrwxrwxrwx,注意第一个字符是l，这类文件是链接文件。通过ln -s 源文件名 新文件名 。和Windows操作系统中的快捷方式有点相似。  </p>
<p><strong>6. 数据输送文件（FIFO,pipe）</strong><br>FIFO也是一种特殊的文件类型，他主要的目的在解决多个程序同时存取一个文件所造成的错误问题。 FIFO是first-in-first-out的缩写。第一个属性为[p] 。</p>
<h2 id="文件扩展名"><a href="#文件扩展名" class="headerlink" title="文件扩展名"></a>文件扩展名</h2><p><strong>1. 扩展名类型</strong><br>Linux的文件是没有所谓的扩展名的，一个Linux文件能不能被执行，与他的第一栏的十个属性有关，与文档名根本一点关系也没有。这个观念跟Windows的情况不相同！在Windows底下，能被执行的文件扩展名通常是 .com .exe .bat等等，而在Linux底下，只要你的权限当中具有x的话，例如[ -rwx-r-xr-x ] 即代表这个文件可以被执行。<br>不过，可以被执行跟可以执行成功是不一样的<br>举例来说，在root家目录下的install.log 是一个纯文本档，如果经由修改权限成为 -rwxrwxrwx 后，这个文件能够真的执行成功吗？ 当然不行。因为他的内容根本就没有可以执行的数据。所以说，这个x代表这个文件具有可执行的能力， 但是能不能执行成功，当然就得要看该文件的内容。<br>所以，通常我们还是会以适当的扩展名来表示该文件是什么种类的。底下有数种常用的扩展名：<br><em>.sh ： 脚本或批处理文件 (scripts)，因为批处理文件为使用shell写成的，所以扩展名就编成 .sh   
</em>Z, <em>.tar, </em>.tar.gz, <em>.zip, </em>.tgz： 经过打包的压缩文件。这是因为压缩软件分别为 gunzip, tar 等等的，由于不同的压缩软件，而取其相关的扩展名！<br><em>.html, </em>.php：网页相关文件，分别代表 HTML 语法与 PHP 语法的网页文件。 .html 的文件可使用网页浏览器来直接开启，至于 .php 的文件， 则可以透过 client 端的浏览器来 server 端浏览，以得到运算后的网页结果。<br>基本上，Linux系统上的文件名真的只是让你了解该文件可能的用途而已，真正的执行与否仍然需要权限的规范才行。<br>例如虽然有一个文件为可执行文件，如常见的/bin/ls这个显示文件属性的指令，不过，如果这个文件的权限被修改成无法执行时，那么ls就变成不能执行。<br>上述的这种问题最常发生在文件传送的过程中。例如你在网络上下载一个可执行文件，但是偏偏在你的 Linux系统中就是无法执行！那么就是可能文件的属性被改变了。从网络上传送到你的 Linux系统中，文件的属性与权限确实是会被改变的。</p>
<p><strong>2. Linux文件名长度限制</strong><br>在Linux底下，使用预设的Ext2/Ext3文件系统时，针对文件名长度限制为：<br>单一文件或目录的最大容许文件名为 255 个字符<br>包含完整路径名称及目录 (/) 之完整档名为 4096 个字符  </p>
<p><strong>3. Linux文件名的字符的限制</strong><br>由于Linux在文字接口下的一些指令操作关系，一般来说，在设定Linux底下的文件名时， 最好可以避免一些特殊字符比较好！例如这些：  </p>
<ul>
<li>? &gt; &lt; ; &amp; ! [ ] | \ ‘ “ ` ( ) { }  </li>
</ul>
<p>因为这些符号在文字接口下，是有特殊意义的。<br>另外，文件名的开头为小数点“.”时， <strong>代表这个文件为隐藏文件！</strong>同时，由于指令下达当中，常常会使用到 -option 之类的选项， 所以最好也避免将文件档名的开头以 - 或 + 来命名。  </p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux文件类型 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux目录结构]]></title>
      <url>/2017/03/30/linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<h1 id="linux目录结构简介"><a href="#linux目录结构简介" class="headerlink" title="linux目录结构简介"></a><strong>linux目录结构简介</strong></h1><p>当在使用Linux的时候，如果通过ls –l / 就会发现，在/下包含很多的目录，比如etc、usr、var、bin … … 等目录，而在这些目录中，我们进去看看，发现也有很多的目录或文件。文件系统在Linux下看上去就象树形结构，所以可以把文件系统的结构形象的称为 树形结构。<br>文件系统的是用来组织和排列文件存取的，所以是可见的，在Linux中，可以通过ls等工具来查看其结构，在Linux系统中，我们见到的都是树形结构；比如操作系统安装在一个文件系统中，他表现为由/ 起始的树形结构。<strong>linux文件系统的最顶端是/，我们称/为Linux的root，也就是 Linux操作系统的文件系统。</strong>  Linux的文件系统的入口就是/，所有的目录、文件、设备都在/之下，/就是Linux文件系统的组织者，也是最上级的领导者。<br><a id="more"></a></p>
<h1 id="目录结构学习"><a href="#目录结构学习" class="headerlink" title="目录结构学习"></a><strong>目录结构学习</strong></h1><p>目录定义成为四种交互作用的形态  ：<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/77645897.jpg" alt=""><br>四中类型:<br><strong>1. 可分享的：</strong><br>可以分享给其他系统挂载使用的目录，所以包括执行文件与用户的邮件等数据， 是能够分享给网络上其他主机挂载用的目录；<br><strong>2. 不可分享的：</strong><br>自己机器上面运作的装置文件或者是与程序有关的socket文件等， 由于仅与自身机器有关，所以当然就不适合分享给其他主机了。<br><strong>3. 不变的：</strong><br>有些数据是不会经常变动的，跟随着distribution而不变动。 例如函式库、文件说明文件、系统管理员所管理的主机服务配置文件等等；<br><strong>4. 可变动的：</strong><br>经常改变的数据，例如登录文件、一般用户可自行收受的新闻组等。  </p>
<p>FHS针对目录树架构仅定义出三层目录底下应该放置什么数据而已，分别是底下这三个目录的定义：<br>/ (root, 根目录)：与开机系统有关；<br>/usr (unix software resource)：与软件安装/执行有关；<br>/var (variable)：与系统运作过程有关。  </p>
<h3 id="一-根目录-的意义与内容："><a href="#一-根目录-的意义与内容：" class="headerlink" title="一. 根目录 (/) 的意义与内容："></a>一. 根目录 (/) 的意义与内容：</h3><p>根目录是整个系统最重要的一个目录，因为不但所有的目录都是由根目录衍生出来的， 同时根目录也与开机/还原/系统修复等动作有关。 由于系统开机时需要特定的开机软件、核心文件、开机所需程序、 函式库等等文件数据，若系统出现错误时，根目录也必须要包含有能够修复文件系统的程序才行。 因为根目录是这么的重要，所以在FHS的要求方面，他希望根目录不要放在非常大的分区， 因为越大的分区内你会放入越多的数据，如此一来根目录所在分区就可能会有较多发生错误的机会。<br>因此FHS标准建议：根目录(/)所在分区应该越小越好， 且应用程序所安装的软件最好不要与根目录放在同一个分区内，保持根目录越小越好。 如此不但效能较佳，根目录所在的文件系统也较不容易发生问题。（根目录和Windows的C盘一个样）<br>根据以上原因，FHS认为根目录(/)下应该包含如下子目录：<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/93796906.jpg" alt=""><br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/85575268.jpg" alt=""><br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/52072932.jpg" alt=""><br>事实上FHS针对根目录所定义的标准就仅限于上表，不过仍旧有些目录也需要了解一下，具体如下：<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/1247276.jpg" alt=""></p>
<p>除了这些目录的内容之外，另外要注意的是，因为根目录与开机有关，开机过程中仅有根目录会被挂载， 其他分区则是在开机完成之后才会持续的进行挂载的行为。就是因为如此，因此根目录下与开机过程有关的目录， 就不能够与根目录放到不同的分区去。有底下这些：<br><strong>/etc：配置文件<br>/bin：重要执行档<br>/dev：所需要的装置文件<br>/lib：执行档所需的函式库与核心所需的模块<br>/sbin：重要的系统执行文件<br>五个目录千万不可与根目录分开在不同的分区。</strong>  </p>
<h3 id="二-usr-的意义与内容："><a href="#二-usr-的意义与内容：" class="headerlink" title="二. /usr 的意义与内容："></a>二. /usr 的意义与内容：</h3><p>依据FHS的基本定义，/usr里面放置的数据属于可分享的与不可变动的，如果你知道如何透过网络进行分区的挂载(例如在服务器篇会谈到的NFS服务器)，那么/usr确实可以分享给局域网络内的其他主机来使用。<br>/usr不是user的缩写，其实usr是Unix Software Resource的缩写， 也就是Unix操作系统软件资源所放置的目录，而不是用户的数据。<br> FHS建议所有软件开发者，应该将他们的数据合理的分别放置到这个目录下的次目录，而不要自行建立该软件自己独立的目录。<br>因为是所有系统默认的软件(distribution发布者提供的软件)都会放置到/usr底下，因此这个目录有点类似Windows 系统的C:\Windows\ + C:\Program files\这两个目录的综合体，系统刚安装完毕时，这个目录会占用最多的硬盘容量。 一般来说，/usr的次目录建议有底下这些：<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/94359424.jpg" alt=""></p>
<h3 id="三-var-的意义与内容"><a href="#三-var-的意义与内容" class="headerlink" title="三.  /var 的意义与内容"></a>三.  /var 的意义与内容</h3><p>如果/usr是安装时会占用较大硬盘容量的目录，那么/var就是在系统运作后才会渐渐占用硬盘容量的目录。 因为/var目录主要针对常态性变动的文件，包括缓存(cache)、登录档(log file)以及某些软件运作所产生的文件， 包括程序文件(lock file, run file)，或者例如MySQL数据库的文件等等。<br>常见的次目录有：<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/16923309.jpg" alt=""><br>由于FHS仅是定义出最上层(/)及次层(/usr, /var)的目录内容应该要放置的文件或目录数据， 因此，在其他次目录层级内，就可以随开发者自行来配置了。  </p>
<h3 id="四-目录树-directory-tree"><a href="#四-目录树-directory-tree" class="headerlink" title="四. 目录树(directory tree)"></a>四. 目录树(directory tree)</h3><p>在Linux底下，所有的文件与目录都是由根目录开始的。那是所有目录与文件的源头, 然后再一个一个的分支下来，因此，我们也称这种目录配置方式为：目录树(directory tree), 这个目录树的主要特性有：<br>目录树的启始点为根目录 (/, root)；<br>每一个目录不止能使用本地端的 partition 的文件系统，也可以使用网络上的 filesystem 。举例来说， 可以利用 Network File System (NFS) 服务器挂载某特定目录等。<br>每一个文件在此目录树中的文件名(包含完整路径)都是独一无二的。<br>如果我们将整个目录树以图的方法来显示，并且将较为重要的文件数据列出来的话，那么目录树架构就如下图<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/66978683.jpg" alt=""></p>
<h3 id="五-绝对路径与相对路径"><a href="#五-绝对路径与相对路径" class="headerlink" title="五. 绝对路径与相对路径"></a>五. 绝对路径与相对路径</h3><p>除了需要特别注意的FHS目录配置外，在文件名部分也要特别注意。因为根据档名写法的不同，也可将所谓的路径(path)定义为绝对路径(absolute)与相对路径(relative)。 这两种文件名/路径的写法依据是这样的：<br>绝对路径：<br>由根目录(/)开始写起的文件名或目录名称， 例如 /home/dmtsai/.bashrc；<br>相对路径：<br>相对于目前路径的文件名写法。 例如 ./home/dmtsai 或 <a href="http://www.cnblogs.com/home/dmtsai/" target="_blank" rel="external">http://www.cnblogs.com/home/dmtsai/</a> 等等。反正开头不是 / 就属于相对路径的写法<br>必须要了解，相对路径是以你当前所在路径的相对位置来表示的。<br>举例来说，你目前在 /home 这个目录下， 如果想要进入 /var/log 这个目录时，可以怎么写呢？<br>cd /var/log   (absolute)<br>cd ../var/log (relative)<br>因为你在 /home 底下，所以要回到上一层 (../) 之后，才能继续往 /var 来移动的，特别注意这两个特殊的目录：<br>.  ：代表当前的目录，也可以使用 ./ 来表示；<br>.. ：代表上一层目录，也可以 ../ 来代表。<br>这个 . 与 .. 目录概念是很重要的，你常常会看到 cd .. 或 ./command 之类的指令下达方式， 就是代表上一层与目前所在目录的工作状态。<br>实例1：如何先进入/var/spool/mail/目录，再进入到/var/spool/cron/目录内？<br>命令：<br>cd /var/spool/mail<br>cd ../cron<br>说明：<br>由于/var/spool/mail与/var/spool/cron是同样在/var/spool/目录中。如此就不需要在由根目录开始写起了。<br>实例2：网络文件常常提到类似./run.sh之类的数据，这个指令的意义为何？<br>说明：<br>由于指令的执行需要变量的支持，若你的执行文件放置在本目录，并且本目录并非正规的执行文件目录(/bin, /usr/bin等为正规)，此时要执行指令就得要严格指定该执行档。./代表本目录的意思，所以./run.sh代表执行本目录下， 名为run.sh的文件。  </p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux目录 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux终端设备-基本类型]]></title>
      <url>/2017/03/30/linux%E7%BB%88%E7%AB%AF%E8%AE%BE%E5%A4%87%E5%AD%A6%E4%B9%A0%E2%80%94%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h1 id="linux终端设备类型"><a href="#linux终端设备类型" class="headerlink" title="linux终端设备类型"></a><strong>linux终端设备类型</strong></h1><p>linux下有多种终端设备类型，包括当前终端，前台控制终断，串口以及虚拟终端主设备。可在linux的/proc/tty下查看各设备的基本信息。<br><a id="more"></a><br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-22/60452449.jpg" alt=""><br>将这些终端设备统一由TTY管理，从而屏蔽硬件实现。同时，将所有的设备分别映射成一个文件（设备文件）。因此，可由文件管理函数IO函数操作这些文件，达到控制终端设备的目的。</p>
<h1 id="实际的物理串口"><a href="#实际的物理串口" class="headerlink" title="实际的物理串口"></a><strong>实际的物理串口</strong></h1><p>串口终端/dev/ttyS[n],ttyS系列指物理串行接口，即ttyS0为COM1,ttyS1为COM2。在/sys下的主次设备号如下：<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-22/47591658.jpg" alt=""><br>即物理串口设备主设备好为4，次设备号从64开始。<br>相关的资源信息：<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-22/69291890.jpg" alt=""></p>
<p>可通过如下命令想串口发送数据：<br>echo ttyS1&gt;/dev/ttyS1<br>echo hello world &gt;/dev/ttys1<br>虚拟机下：采用windows的文件来代替串口，然后在window下查看该文件内容。<br>设置：虚拟机下的setting中设置add一个串口设备号（没有要再关机情况下添加）,添加后在底部图标可看到添加的串口号以及window下的文件。<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-22/45440514.jpg" alt=""><br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-22/16216918.jpg" alt=""><br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-22/44997515.jpg" alt=""></p>
<h1 id="控制台终端"><a href="#控制台终端" class="headerlink" title="控制台终端"></a><strong>控制台终端</strong></h1><p>tty1-tty6为控制台终端，即非图像界面下的命令行输入模式。<br>控制台终端设备主设备号为4，次设备号从1开始<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-22/14107730.jpg" alt="">  </p>
<h1 id="虚拟终端"><a href="#虚拟终端" class="headerlink" title="虚拟终端"></a><strong>虚拟终端</strong></h1><p>当下多数使用linux都是通过网络连接到服务器的方式，如telent和ssh工具。如果是在服务器的图像界面下，运行命令一般会打开一个虚拟终端窗口。这两类情况在服务器上显示的是虚拟网络终端。<br>虚拟网络终端有两个虚拟设备：/dev/ptmx和/dev/pts   </p>
<ol>
<li><p>/dev/ptmx虚拟设备<br>/dev/ptmx是一个字符文件，用于创建虚拟网络终端设备master/slave配对设备。要打开一个未使用的虚拟终端，通过调用posix_openpt()函数，来打开/dev/ptmx设备。每次open打开这个文件，返回一个独立的master设备的文件描述符，可通过这个描述符找到关联的slave设备，且slave设备会在/dev/pts/目录下创建。  </p>
</li>
<li><p>/dev/pts虚拟终端<br>通过网络telent到linux主机或者windows环境下打开一个终端，将在/dev/pts目录下依次创建一个虚拟终端设备，相应地退出一个虚拟终端，将自动减少一个设备文件。  </p>
</li>
</ol>
<h1 id="当前终端"><a href="#当前终端" class="headerlink" title="当前终端"></a><strong>当前终端</strong></h1><p>当前控制台终端/dev/console<br>/dev/console代表当前系统使用的实际控制台终端（tty1-tty6）。<br>/dev/console设备号信息如下：<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-22/54820041.jpg" alt=""><br>其主设备号为5，次设备号为1.它始终代表当前主机打开的实际控制台终端  </p>
<p>当前终端/dev/tty<br>/dev/tty代表当前终端，无论是通过控制台终端还是虚拟终端，/dev/tty都代表自己。该设备信息如下：<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-22/45986718.jpg" alt=""><br>在任意终端下。如telent下连接终端执行，即向/dev/tty发送消息，会直接回显<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-22/14494147.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux终端设备 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之磁盘命令-du命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E7%A3%81%E7%9B%98%E5%91%BD%E4%BB%A4%E4%B9%8Bdu%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="du简介"><a href="#du简介" class="headerlink" title="du简介"></a><strong>du简介</strong></h1><hr>
<p>du命令也是查看使用空间的，但是与df命令不同的是du命令是对文件和目录磁盘使用的空间的查看。</p>
<h2 id=""><a href="#" class="headerlink" title=" "></a><a id="more"></a> </h2><h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><hr>
<p><strong>命令格式：</strong><br>du [选项][文件]  </p>
<p><strong>命令功能：</strong><br>显示每个文件和目录的磁盘使用空间。  </p>
<p><strong>命令参数：</strong><br>-a或-all  显示目录中个别文件的大小。<br>-b或-bytes  显示目录或文件大小时，以byte为单位。<br>-c或–total  除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。<br>-k或–kilobytes  以KB(1024bytes)为单位输出。<br>-m或–megabytes  以MB为单位输出。<br>-s或–summarize  仅显示总计，只列出最后加总的值。<br>-h或–human-readable  以K，M，G为单位，提高信息的可读性。<br>-x或–one-file-xystem  以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。<br>-L&lt;符号链接&gt;或–dereference&lt;符号链接&gt; 显示选项中所指定符号链接的源文件大小。<br>-S或–separate-dirs   显示个别目录的大小时，并不含其子目录的大小。<br>-X&lt;文件&gt;或–exclude-from=&lt;文件&gt;  在&lt;文件&gt;指定目录或文件。<br>–exclude=&lt;目录或文件&gt;         略过指定的目录或文件。<br>–max-depth=&lt;目录层数&gt; 超过指定层数的目录后，予以忽略。<br>-D或–dereference-args   显示指定符号链接的源文件大小。<br>-H或–si  与-h参数相同，但是K，M，G是以1000为换算单位。     </p>
<h2 id="l或–count-links-重复计算硬件链接的文件。"><a href="#l或–count-links-重复计算硬件链接的文件。" class="headerlink" title="-l或–count-links   重复计算硬件链接的文件。    "></a>-l或–count-links   重复计算硬件链接的文件。    </h2><h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><hr>
<p>例1：显示目录或者文件所占空间<br>du<br>只显示当前目录下面的子目录的目录大小和当前目录的总的大小，最下面的当前目录的总大小<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/11861250.jpg" alt=""></p>
<p>例2：显示指定文件所占空间<br>du 1.log<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/98399354.jpg" alt=""></p>
<p>例3：查看指定目录的所占空间<br>du test1<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/12752015.jpg" alt="">  </p>
<p>例4：显示多个文件所占空间<br>du 1.log 2.log<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/31024972.jpg" alt=""></p>
<p>例5：只显示总和的大小<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/27688966.jpg" alt="">  </p>
<p>例6：方便阅读的格式显示<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/27208552.jpg" alt=""></p>
<p>例7：文件和目录都显示<br>du -h test1<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/13401382.jpg" alt=""></p>
<p>例8：显示几个文件或目录各自占用磁盘空间的大小，还统计它们的总和<br>du -c 1.log 2.log<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/48395342.jpg" alt=""></p>
<p>例9：按照空间大小排序<br> du|sort -nr|more<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/18204179.jpg" alt=""></p>
<p>例10：输出当前目录下各个子目录所使用的空间<br> du -h  –max-depth=1<br>表示深入的目录层数，为0则不深入子目录，1则进入第一层子目录  </p>
<h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/94745105.jpg" alt=""></h2>]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux终端设备-终端属性termios]]></title>
      <url>/2017/03/30/linux%E7%BB%88%E7%AB%AF%E8%AE%BE%E5%A4%87%E5%AD%A6%E4%B9%A0%E2%80%94%E7%BB%88%E7%AB%AF%E5%B1%9E%E6%80%A7termios%E7%BB%93%E6%9E%84%E4%BD%93/</url>
      <content type="html"><![CDATA[<h1 id="termios结构体简介"><a href="#termios结构体简介" class="headerlink" title="termios结构体简介"></a><strong>termios结构体简介</strong></h1><hr>
<p>为便于用户层统一管理终端属性，linux使用termios结构体来统一管理<br><a id="more"></a><br>struct termios<br>{<br> unsigned short c_iflag; /<em> 输入模式标志</em>/<br> unsigned short c_oflag; /<em> 输出模式标志</em>/<br> unsigned short c_cflag; /<em> 控制模式标志</em>/<br> unsigned short c_lflag; /<em>区域模式标志或本地模式标志或局部模式</em>/<br> unsigned char c_line; /<em>行控制line discipline </em>/<br> unsigned char c_cc[NCC]; /<em> 控制字符特性</em>/<br>};<br>可以调用函数tcgetattr来初始化一个终端对应的termios结构，该函数的原型如下：  </p>
<pre><code>#include&lt;termios.h&gt;  
int tcgetattr(int fd, struct termios *termios_p);   
</code></pre><p>这个函数调用获取fd所指向的当前终端对象fd的相关属性，并写入termios_p参数指向的结构。</p>
<p>通过调用函数tcsetattr来重新配置某个终端的属性，函数原型如下：  </p>
<pre><code>#include&lt;termios.h&gt;  
int tcsetattr(int fd , int actions , const struct termios *termios_h);  
</code></pre><p>函数根据actions所指示的行为来设置与fp所指向的终端设备的属性<br>参数actions控制修改方式，共有三种修改方式，如下所示。<br>1.TCSANOW：立刻对值进行修改<br>2.TCSADRAIN：等当前的输出完成后再对值进行修改。<br>3.TCSAFLUSH：等当前的输出完成之后，再对值进行修改，但丢弃还未从read调用返回的当前的可用的任何输入。  </p>
<hr>
<h1 id="五种模式标志"><a href="#五种模式标志" class="headerlink" title="五种模式标志"></a><strong>五种模式标志</strong></h1><hr>
<h2 id="输入模式标志c-iflag"><a href="#输入模式标志c-iflag" class="headerlink" title="输入模式标志c_iflag"></a><strong>输入模式标志c_iflag</strong></h2><p><strong>输入模式控制输入数据在传递给程序之前的处理方式。通过设置termios结构中的c_iflag成员的标志对它们进行控制。所有的标志都被定义为宏,并可通过按位或的方式结合起来。</strong><br><strong>可用于c_iflag成员的宏如下所示：</strong><br>BRKINT：当在输入行中检测到一个终止状态时，产生一个中断。<br>TGNBRK：忽略输入行中的终止状态。<br>TCRNL：将接受到的回车符转换为新行符。<br>TGNCR：忽略接受到的新行符。<br>INLCR：将接受到的新行符转换为回车符。<br>IGNPAR：忽略奇偶校检错误的字符。<br>INPCK：对接收到的字符执行奇偶校检。<br>PARMRK：对奇偶校检错误作出标记。<br>ISTRIP：将所有接收的字符裁减为7比特。<br>IXOFF：对输入启用软件流控。<br>IXON：对输出启用软件流控。  </p>
<ul>
<li>注意：<br>如果BRKINT和TGNBRK标志都未被设置，则输入行中的终止状态就被读取为NULL（0X00）字符。<br>对于PARKMRK如果没有设置IGNPAR,在有奇偶校验错误的字符前插入\337\0<br>如果没有设置IGNPAR也没有设置PARMRK，将有奇偶校验错误或帧错误的字符视为/0<br>对于BRKINT,如果设置了IGNBRK,将忽略BREAK,如果没有设置，但是设置了BRKINT,那么BREAK将使得输入和输出队列被刷新。<br>如果终端是一个前台进程组的控制终端，这个进程组所有进程将收到SIGINT信号。<br>如果既未设置IGNBRK也为设置BRKINT,BRKINT将视为与NUL字符同意。除非设置了PARMRK，这种情况下被视为序列/337/0/0  </li>
</ul>
<hr>
<h2 id="输出模式标志c-oflag"><a href="#输出模式标志c-oflag" class="headerlink" title="输出模式标志c_oflag"></a><strong>输出模式标志c_oflag</strong></h2><p>输出模式控制输出字符的处理方式,即由程序发出的字符在传递到串行口或屏幕之前如何处理.通过设置c_oflag成员的标识对输出模式进行控制.<br><strong>可用于c_iflag成员的宏如下所示（部分）：</strong><br>OPSOT:打开输出处理功能<br>OLCUC:将输出的小写字母映射为大写字母<br>ONLCR:将输出中的换行符转换为回车符<br>OCRNL:将回车符转换为换行符<br>ONOCR:第０行不输出回车符<br>ONLRET:不输出回车符<br>NLDLY:换行符延时选择<br>CRDLY:回车符延时<br>TABDLY:制表符延时         </p>
<hr>
<h2 id="控制模式标志c-cflag"><a href="#控制模式标志c-cflag" class="headerlink" title="控制模式标志c_cflag"></a><strong>控制模式标志c_cflag</strong></h2><p>控制模式控制终端的硬件特性,通过c_cflag成员标识配置. 包括：波特率，数据位长度，停止位长度，奇偶校验位等<br>CBAUD ：(不属于 POSIX) 波特率掩码 (4+1 位)。<br>CSIZE：字符长度掩码（传送或接收字元时用的位数）。 取值为CS5（传送或接收字元时用5bits）, CS6, CS7, 或 CS8。<br>CSTOPB ：设置两个停止位，而不是一个。<br>CREAD ：打开接受者。<br>PARENB ：允许输出产生奇偶信息以及输入的奇偶校验（启用同位产生与侦测）。<br>PARODD ：输入和输出是奇校验（使用奇同位而非偶同位）。<br>HUPCL ：在最后一个进程关闭设备后，降低 modem 控制线 (挂断)。<br>CLOCAL ：忽略 modem 控制线。<br>LOBLK :(不属于 POSIX) 从非当前 shell 层阻塞输出。<br>CIBAUD :(不属于 POSIX) 输入速度的掩码。CIBAUD 各位的值与CBAUD 各位相同，左移了 IBSHIFT 位。<br>CRTSCTS :(不属于 POSIX) 启用 RTS/CTS (硬件) 流控制</p>
<hr>
<h3 id="设置波特率"><a href="#设置波特率" class="headerlink" title="设置波特率"></a><strong>设置波特率</strong></h3><p>波特率即调制速率，指信号被调制以后在单位时间内的变化。即单位时间内载波参数变化的次数。<br>为了减少用户编程负担，函数cfgetospeed()将获取存储于struct stermios结构中的输出波特率属性<br>函数cfgetispeed()将获取存储于struct stermios结构中的输入波特率属性，不需要自己进行位操作。<br>函数cfsetospeed()和cfsetispeed分别设置存储于termios结构的输出和输入波特率。<br>cfsetspeed()可以同时设置termios结构的输入和输出波特率。<br>例子：<br>struct termios options;<br>tcgetattr(fd,&amp;options);<br>cfsetispeed(&amp;options,B19200);  //输入波特率19200<br>cfsetospeed(&amp;options,B19200);  //输出波特率19200<br>options.c_cflag | =(CLOCAL | CREAD );  //允许接收，本地模式<br>tcsetattr(fd,TCSANOW,&amp;options);   //生效时间立即生效  </p>
<h3 id="设置帧数据位宽度"><a href="#设置帧数据位宽度" class="headerlink" title="设置帧数据位宽度"></a><strong>设置帧数据位宽度</strong></h3><p>终端可以设置为每帧数据位为5，6，7,8bit。<br>修改数据位宽度如下：<br>options.c_cflag &amp;=~CSIZE;  //清除现在数据位宽度<br>options.c_cflag ｜＝CS8;   //设置为每帧8bit</p>
<h3 id="设置奇偶校验"><a href="#设置奇偶校验" class="headerlink" title="设置奇偶校验"></a><strong>设置奇偶校验</strong></h3><p>奇偶校验是串行通信所采用的简单的差错检测方式。<br>例子：<br>设置为8N1，即每帧数据位8bit，无奇偶校验，一位停止位<br>options.c_cflag &amp; =~PARENG;<br>options.c_cflag &amp; =~CSTOPB;<br>options.c_cflag &amp; =~CSIZE;<br>options.c_cflag &amp; =~CS8；  </p>
<hr>
<h2 id="本地模式标志c-lflag"><a href="#本地模式标志c-lflag" class="headerlink" title="本地模式标志c_lflag"></a><strong>本地模式标志c_lflag</strong></h2><p>本地模式标志用来管理用何种方式输入字符，一般设置为标准模式或者原始模式。<br>标准模式：回显由客户端完成，用户输入的字符先缓存到一个缓存区，直到用户输入回车或者换行才发送到服务端<br>原始模式：又称为字符模式，回显由服务端完成。用户输入的一个字符立即发送到服务端，服务端然后将该字符回显到客户端。<br>ISIG   ： 当输入INTR、QUIT、SUSP或DSUSP时，产生相应的信号<br>ICANON ： 使用标准输入模式<br>XCASE  ： 在ICANON和XCASE同时设置的情况下，终端只使用大写。如果只设置了XCASE，则输入字符将被转换为小写字符，除非字符使用了转义字符（非POSIX，且Linux不支持该参数）<br>ECHO   ： 显示输入字符<br>ECHOE  ： 如果ICANON同时设置，ERASE将删除输入的字符，WERASE将删除输入的单词<br>ECHOK  ： 如果ICANON同时设置，KILL将删除当前行<br>ECHONL ： 如果ICANON同时设置，即使ECHO没有设置依然显示换行符<br>ECHOPRT： 如果ECHO和ICANON同时设置，将删除打印出的字符（非POSIX）<br>TOSTOP ： 向后台输出发送SIGTTOU信号  </p>
<hr>
<h2 id="控制字符标志c-cc-NCCS"><a href="#控制字符标志c-cc-NCCS" class="headerlink" title="控制字符标志c_cc[NCCS]"></a><strong>控制字符标志c_cc[NCCS]</strong></h2><p>标准模式和非标准模式下,c_cc数组的下标有不同的值:<br>标准模式:<br>VEOF:ＥＯＦ字符<br>VEOL:ＥＯＬ字符<br>VERASE:ERASE字符<br>VINTR:INTR字符<br>VKILL:KILL字符<br>VQUIT:QUIT字符<br>VSTART:START字符<br>VSTOP:STOP字符<br>非标准模式:<br>VINTR:INTR字符<br>VMIN:MIN值<br>VQUIT:QUIT字符<br>VSUSP:SUSP字符<br>VTIME:TIME值<br>VSTART:START字符<br>VSTOP:STOP字符  </p>
<p><strong>字符</strong><br>INTR:该字符使终端驱动程序向与终端相连的进程以送SIGINT信号<br>QUIT:该字符使终端驱动程序向与终端相连的进程发送SIGQUIT信号<br>EOF;该字符使终端驱动程序将输入行中的全部字符传递给正在读取输入的应用程序.如果输入行为空,read调用将返回０,就好像在文件尾调用read一样  </p>
<p><strong>TIME和MIN值</strong>  </p>
<p>这两个值只用于非标准模式,两者结合共同控制对输入的读取方式,还能控制在一个程序试图与一个终端关联的文件描述符时将发生的情况<br>MIN = 0, TIME = 0时:read立即返回,如果有待处理的字符,它们就会被返回,如果没有,read调用返回0,且不读取任何字符<br>MIN = 0, TIME &gt; 0时:有字符处理或经过TIME个0.1秒后返回<br>MIN &gt; 0, TIME = 0时:read一直等待,直到有ＭＩＮ个字符可以读取,返回值是字符的数量.到达文件尾时返回0<br>MIN &gt; 0, TIME &gt; 0时:read调用时,它会等待接收一个字符.在接收到第一个字符及其后续的每个字符后,启用一个字符间隔定时器.当有ＭＩＮ个字符可读或两字符间的时间间隔超进TIME个0.1秒时,read返回<br>通过设置ＭＩＮ和ＴＩＭＥ值,我们可以逐个字符地对输入进行处理</p>
<hr>
<h1 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a><strong>其他函数</strong></h1><p>这些函数直接作用于文件描述符,不需要读写termios结构:<br><strong>#include <termios.h></termios.h></strong><br>int tcdrain(int fd);让调用程序一直等待,直到所有排队的输出都发送完毕<br>int tcflow(int, int flowtype);暂停或重新开始输出<br>int tcflush(int fd, int in_out_selector);清空输入,输出或两者都清空    </p>
<hr>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux终端设备 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux读写串口]]></title>
      <url>/2017/03/30/linux%E8%AF%BB%E5%86%99%E4%B8%B2%E5%8F%A3/</url>
      <content type="html"><![CDATA[<h1 id="串口操作"><a href="#串口操作" class="headerlink" title="串口操作"></a><strong>串口操作</strong></h1><p>串口操作需要的头文件  </p>
<pre><code>#include     &lt;stdio.h&gt;      
#include     &lt;stdlib.h&gt;   
#include     &lt;unistd.h&gt;    
#include     &lt;sys/types.h&gt;  
#include     &lt;sys/stat.h&gt; 
#include     &lt;fcntl.h&gt;     
#include     &lt;termios.h&gt;
#include     &lt;errno.&gt;
</code></pre><a id="more"></a> 
<h1 id="打开串口"><a href="#打开串口" class="headerlink" title="打开串口"></a><strong>打开串口</strong></h1><p>在 Linux 下串口文件是位于 /dev 下的<br>串口一 为 /dev/ttyS0<br>串口二 为 /dev/ttyS1<br>打开串口是通过使用标准的文件打开函数操作：   </p>
<pre><code>int open_port(void)  
{  
    int fd;  
    fd = open( &quot;/dev/ttyS0&quot;, O_RDWR | O_NOCTTY );  
    if(-1 == fd)  
    {  
    perror(&quot; 提示错误！&quot;);  
    }  
    return (fd);  
}   
</code></pre><p>O_NOCTTY: 表示当前进程不期望与终端关联，从而避免控制端输入的信息影响当前进程   </p>
<h1 id="设置串口"><a href="#设置串口" class="headerlink" title="设置串口"></a><strong>设置串口</strong></h1><p>最基本的设置串口包括波特率设置，效验位和停止位设置。<br>串口的设置主要是设置 struct termios 结构体的各成员值。</p>
<pre><code>struct termio  
{      
unsigned short  c_iflag;    /* 输入模式标志 */      
unsigned short  c_oflag;    /* 输出模式标志 */      
unsigned short  c_cflag;    /* 控制模式标志*/      
unsigned short  c_lflag;    /* local mode flags */      
unsigned char  c_line;         /* line discipline */      
unsigned char  c_cc[NCC];    /* control characters */  
};  
</code></pre><p>下面是修改波特率的代码：  </p>
<pre><code>struct  termios Opt;  
tcgetattr(fd, &amp;Opt);  
cfsetispeed(&amp;Opt,B19200);     /*设置为19200Bps*/  
cfsetospeed(&amp;Opt,B19200);  
tcsetattr(fd,TCANOW,&amp;Opt);  
</code></pre><h1 id="设置波特率的例子函数："><a href="#设置波特率的例子函数：" class="headerlink" title="设置波特率的例子函数："></a><strong>设置波特率的例子函数：</strong></h1><pre><code>/**
*@brief  设置串口通信速率  
*@param  fd     类型 int  打开串口的文件句柄  
*@param  speed  类型 int  串口速度  
*@return  void  
*/  
int speed_arr[] = { B38400, B19200, B9600, B4800, B2400, B1200, B300,  
          B38400, B19200, B9600, B4800, B2400, B1200, B300, };  
int name_arr[] = {38400,  19200,  9600,  4800,  2400,  1200,  300, 38400,    
          19200,  9600, 4800, 2400, 1200,  300, };  
void set_speed(int fd, int speed)  
{  
  int   i;   
  int   status;   
  struct termios   Opt;  
  tcgetattr(fd, &amp;Opt);   
  for ( i= 0;  i &lt; sizeof(speed_arr) / sizeof(int);  i++)   
{  
    if  (speed == name_arr[i])  
 {       
      tcflush(fd, TCIOFLUSH);       
      cfsetispeed(&amp;Opt, speed_arr[i]);    
      cfsetospeed(&amp;Opt, speed_arr[i]);     
      status = tcsetattr(fd1, TCSANOW, &amp;Opt);    
      if  (status != 0)   
      {          
        perror(&quot;tcsetattr fd1&quot;);    
        return;       
      }       
      tcflush(fd,TCIOFLUSH);     
    }    
  }  
}   
</code></pre><h1 id="效验位和停止位的设置："><a href="#效验位和停止位的设置：" class="headerlink" title="效验位和停止位的设置："></a><strong>效验位和停止位的设置：</strong></h1><pre><code>无效验    8位    Option.c_cflag &amp;= ~PARENB;   
Option.c_cflag &amp;= ~CSTOPB;   
Option.c_cflag &amp;= ~CSIZE;   
Option.c_cflag |= ~CS8;  
奇效验(Odd)    7位    Option.c_cflag |= ~PARENB;   
Option.c_cflag &amp;= ~PARODD;   
Option.c_cflag &amp;= ~CSTOPB;   
Option.c_cflag &amp;= ~CSIZE;    
Option.c_cflag |= ~CS7;  
偶效验(Even)    7位    Option.c_cflag &amp;= ~PARENB;   
Option.c_cflag |= ~PARODD;   
Option.c_cflag &amp;= ~CSTOPB;   
Option.c_cflag &amp;= ~CSIZE;   
Option.c_cflag |= ~CS7;  
Space效验    7位    Option.c_cflag &amp;= ~PARENB;   
Option.c_cflag &amp;= ~CSTOPB;   
Option.c_cflag &amp;= &amp;~CSIZE;   
Option.c_cflag |= CS8;  
</code></pre><p>设置效验的函数：<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/34320569.jpg" alt=""><br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/76170912.jpg" alt=""><br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-21/47803048.jpg" alt=""></p>
<p>需要注意的是:<br>如果不是开发终端之类的，只是串口传输数据，而不需要串口来处理，那么使用原始模式(Raw Mode)方式来通讯。<br>设置方式如下：  </p>
<pre><code>options.c_lflag  &amp;= ~(ICANON | ECHO | ECHOE | ISIG);  /*Input*/  
options.c_oflag  &amp;= ~OPOST;   /*Output*/  
</code></pre><h1 id="读写串口"><a href="#读写串口" class="headerlink" title="读写串口"></a><strong>读写串口</strong></h1><p>设置好串口之后，把串口当作文件读写。<br>发送数据  </p>
<pre><code>char  buffer[1024];  
int    Length;int    nByte;  
nByte = write(fd, buffer ,Length)  
</code></pre><p>读取串口数据<br>使用文件操作read函数读取，如果设置为原始模式(Raw Mode)传输数据，那么read函数返回的字符数是实际串口收到的字符数。<br>可以使用操作文件的函数来实现异步读取，如fcntl，或者select等来操作。  </p>
<pre><code>char  buff[1024];int    Len;int  readByte = read(fd,buff,Len);  
</code></pre><h1 id="关闭串口"><a href="#关闭串口" class="headerlink" title="关闭串口"></a><strong>关闭串口</strong></h1><p>关闭串口就是关闭文件。  </p>
<pre><code>close(fd);  
</code></pre>]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux串口 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之exec命令]]></title>
      <url>/2017/03/30/linu%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-find%E4%B9%8Bexec%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="find之exec简介"><a href="#find之exec简介" class="headerlink" title="find之exec简介"></a><strong>find之exec简介</strong></h1><p>find一般查找文件，进一步的操作由exec完成。 使用find时，只要把想要的操作写在一个文件里，就可以用exec来配合find查找<br><a id="more"></a></p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><p>exec解释：<br>-exec 参数后面跟的是command命令，它的终止是以;为结束标志的，考虑到各个系统中分号会有不同的意义，前面加反斜杠。<br>{} 花括号代表前面find查找出来的文件名。<br>在有些操作系统中只允许-exec选项执行诸如l s或ls -l这样的命令。大多数用户使用这一选项是为了查找旧文件并删除它们。建议在真正执行rm命令删除文件之前，最好先用ls命令看一下，确认它们是所要删除的文件<br><strong>exec选项后面跟随着所要执行的命令或脚本，然后是一对儿{ }，一个空格和一个\，最后是一个分号。</strong><br> 为了使用exec选项，必须要同时使用print选项。如果验证一下find命令，会发现该命令只输出从当前路径起的相对路径及文件名。</p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p>例1：ls -l命令放在find命令的-exec选项中<br>find . -type f -exec ls -l {} \;<br>find命令匹配到了当前目录下的所有普通文件，并在-exec选项中使用ls -l命令将它们列出。</p>
<p>例2：在目录中查找更改时间在n日以前的文件并删除它们<br>find . -type f -mtime +14 -exec rm {} \;   </p>
<p>例3：在目录中查找更改时间在n日以前的文件并删除它们，在删除之前先给出提示<br>find . -name “*.log” -mtime +5 -ok rm {} \;  </p>
<p>例4：-exec中使用grep命令<br>find /etc -name “passwd<em>“ -exec grep “root” {} \;<br>find命令首先匹配所有文件名为“ passwd</em>”的文件，例如passwd、passwd.old、passwd.bak，然后执行grep命令看看在这些文件中是否存在一个root用户。</p>
<p>例5：查找文件移动到指定目录<br>find . -name “*.log” -exec mv {} .. \;  </p>
<p>例6：用exec选项执行cp命令<br>find . -name “*.log” -exec cp {} test3 \;  </p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件查找命令——find-exec命令]]></title>
      <url>/2017/03/30/linu%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE%E4%B9%8Bfind-exec%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="find之exec简介"><a href="#find之exec简介" class="headerlink" title="find之exec简介"></a><strong>find之exec简介</strong></h1><p>find一般查找文件，进一步的操作由exec完成。 使用find时，只要把想要的操作写在一个文件里，就可以用exec来配合find查找<br><a id="more"></a></p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><p>exec解释：<br>-exec 参数后面跟的是command命令，它的终止是以;为结束标志的，考虑到各个系统中分号会有不同的意义，前面加反斜杠。<br>{} 花括号代表前面find查找出来的文件名。<br>在有些操作系统中只允许-exec选项执行诸如l s或ls -l这样的命令。大多数用户使用这一选项是为了查找旧文件并删除它们。建议在真正执行rm命令删除文件之前，最好先用ls命令看一下，确认它们是所要删除的文件<br><strong>exec选项后面跟随着所要执行的命令或脚本，然后是一对儿{ }，一个空格和一个\，最后是一个分号。</strong><br> 为了使用exec选项，必须要同时使用print选项。如果验证一下find命令，会发现该命令只输出从当前路径起的相对路径及文件名。</p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p>例1：ls -l命令放在find命令的-exec选项中<br>find . -type f -exec ls -l {} \;<br>find命令匹配到了当前目录下的所有普通文件，并在-exec选项中使用ls -l命令将它们列出。<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/29363263.jpg" alt=""><br>例2：在目录中查找更改时间在n日以前的文件并删除它们<br>find . -type f -mtime +14 -exec rm {} \;<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/37578130.jpg" alt=""></p>
<p>例3：在目录中查找更改时间在n日以前的文件并删除它们，在删除之前先给出提示<br>find . -name “*.log” -mtime +5 -ok rm {} \;<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/96950514.jpg" alt=""></p>
<p>例4：-exec中使用grep命令<br>find /etc -name “passwd<em>“ -exec grep “root” {} \;<br>find命令首先匹配所有文件名为“ passwd</em>”的文件，例如passwd、passwd.old、passwd.bak，然后执行grep命令看看在这些文件中是否存在一个root用户。<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/88091928.jpg" alt=""></p>
<p>例5：查找文件移动到指定目录<br>find . -name “*.log” -exec mv {} /home/jiangbiao/Test/test4 \;<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/68435458.jpg" alt=""></p>
<p>例6：用exec选项执行cp命令<br>find . -name “*.log” -exec cp {} /home/jiangbiao/Test/test3 \;<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/38710867.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件查找命令——find-exec命令]]></title>
      <url>/2017/03/30/linu%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE%E4%B9%8Bfind-xargs%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="find之xargs简介"><a href="#find之xargs简介" class="headerlink" title="find之xargs简介"></a><strong>find之xargs简介</strong></h1><p>在使用 find命令的-exec选项处理匹配到的文件时， find命令将所有匹配到的文件一起传递给exec执行。但有些系统对能够传递给exec的命令长度有限制，这样在find命令运行几分钟之后，就会出现溢出错误。错误信息通常是“参数列太长”或“参数列溢出”。这就是xargs命令的用处所在，特别是与find命令一起使用。<br><a id="more"></a><br>find命令把匹配到的文件传递给xargs命令，而xargs命令每次只获取一部分文件而不是全部，这样它可以先处理最先获取的一部分文件，然后是下一批，并如此继续下去。<br>在有些系统中，使用-exec选项会为处理每一个匹配到的文件而发起一个相应的进程，并非将匹配到的文件全部作为参数一次执行；这样在有些情况下就会出现进程过多，系统性能下降的问题，因而效率不高； 而使用xargs命令则只有一个进程。另外，在使用xargs命令时，究竟是一次获取所有的参数，还是分批取得参数，以及每一次获取参数的数目都会根据该命令的选项及系统内核中相应的可调参数来确定。</p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><p>-0 当sdtin含有特殊字元时候，将其当成一般字符，/‘空格等<br>-a file 从文件中读入作为sdtin<br>-e flag ，注意有的时候可能会是-E，flag必须是一个以空格分隔的标志，当xargs分析到含有flag这个标志的时候就停止。<br>-p 当每次执行一个argument的时候询问一次用户。<br>-n num 后面加次数，表示命令在执行的时候一次用的argument的个数，默认是用所有的。<br>-t 表示先打印命令，然后再执行。<br>-<strong>i 或者是-I，这得看linux支持了，将xargs的每项名称，一般是一行一行赋值给{}，可以用{}代替。</strong><br>-r no-run-if-empty 当xargs的输入为空的时候则停止xargs，不用再去执行了。<br>-s num 命令行的最好字符数，指的是xargs后面那个命令的最大命令行字符数。<br>-L  num Use at most max-lines nonblank input lines per command line.-s是含有空格的。<br>-l  同-L<br>-d delim 分隔符，默认的xargs分隔符是回车，argument的分隔符是空格，这里修改的是xargs的分隔符<br>-x exit的意思，主要是配合-s使用。<br>-P 参数会提示让你确认是否执行后面的命令,y执行，n不执行。 </p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p>例1： 查找系统中的每一个普通文件，然后使用xargs命令来测试它们分别属于哪类文件<br>find . -type f -print | xargs file<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/3169637.jpg" alt=""></p>
<p>例2:在当前目录下查找所有用户具有读、写和执行权限的文件，并收回相应的写权限<br>find . -perm -7 -print | xargs chmod o-w<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/53268309.jpg" alt=""></p>
<p>例3：用grep命令在所有的普通文件中搜索in这个词<br>find . -type f -print | xargs grep “in”<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/63934215.jpg" alt=""></p>
<p>例4：用grep命令在当前目录下的所有普通文件中搜索hostnames这个词<br>find . -name * -type f -print | xargs grep “hostnames”<br>\用来取消find命令中的*在shell中的特殊含义。</p>
<p>例5：使用xargs执行mv<br>find . -name “*.log” | xargs -i mv {} test5<br>将当前目录下.log文件移到test5目录下<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/49699483.jpg" alt=""></p>
<p>例6：find后执行xargs提示xargs: argument line too long解决方法<br>find . -type f -atime +0 -print0 | xargs -0 -l1 -t rm -f<br>-l1是一次处理一个；-t是处理之前打印出命令<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/71892888.jpg" alt=""></p>
<p>例7：xargs的-p参数的使用<br>-p参数会提示让你确认是否执行后面的命令,y执行，n不执行。<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/77668623.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件查找命令——find参数详解]]></title>
      <url>/2017/03/30/linu%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE%E4%B9%8Bfind%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="find参数范例"><a href="#find参数范例" class="headerlink" title="find参数范例"></a><strong>find参数范例</strong></h1><p><strong>1．使用name选项：</strong><br>文件名选项是find命令最常用的选项，要么单独使用该选项，要么和其他选项一起使用。  可以使用某种文件名模式来匹配文件，记住要用引号将文件名模式引起来。<br><a id="more"></a><br>用户目录$HOME中查找文件名符合<em>.log的文件，使用~作为 ‘pathname’参数，波浪号~代表了$HOME目录。<br>find ~ -name “</em>.log” -print<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/46782635.jpg" alt=""></p>
<p>想要在当前目录及子目录中查找所有的”<em>.log”文件<br>find . -name “</em>.log” -print<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/44599918.jpg" alt=""></p>
<p>想要的当前目录及子目录中查找文件名以一个大写字母开头的文件<br>find . -name “[A-Z]*” -print<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/72117179.jpg" alt=""></p>
<p>想要在/etc目录中查找文件名以host开头的文件<br>find /etc -name “host*” -print<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/27916409.jpg" alt=""></p>
<p>要想让系统高负荷运行，就从根目录开始查找所有的文件<br>find / -name “*” -print  </p>
<p>想在当前目录查找文件名以一个个小写字母开头，最后是4到9加上.log结束的文件<br>find . -name “[a-z]*[4-9].log” -print<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/82102457.jpg" alt=""></p>
<p><strong>2. 用perm选项：</strong><br>按照文件权限模式用-perm选项<br>如在当前目录下查找文件权限位为755的文件，即文件属主可以读、写、执行，其他用户可以读、执行的文件<br>find . -perm 755 -print<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/86969288.jpg" alt=""></p>
<p>数字前面要加一个横杠-，表示都匹配，如-005表示至少005,-757至少757<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/48875778.jpg" alt=""></p>
<p><strong>3．忽略某个目录-prune：</strong><br>如果在查找文件时希望忽略某个目录，因为你知道那个目录中没有你所要查找的文件，那么可以使用-prune选项来指出需要忽略的目录。在使用-prune选项时要当心，因为如果你同时使用了-depth选项，那么-prune选项就会被find命令忽略。<br>find [-path ..] [expression]<br>在路径列表的后面的是表达式<br>-path “test” -prune -o -print 是 -path “test” -a -prune -o -print 的简写表达式按顺序求值, -a 和 -o 都是短路求值，与 shell 的 &amp;&amp; 和 || 类似如果<br>-path “test” 为真，则求值 -prune , -prune 返回真，与逻辑表达式为真；否则不求值 -prune，与逻辑表达式为假。如果 -path “test” -a -prune 为假，则求值 -print ，-print返回真，或逻辑表达式为真；否则不求值 -print，或逻辑表达式为真。<br>这个表达式组合特例可以用伪码写为:<br>if -path “test” then<br>-prune<br>else<br>-print  </p>
<p>查看Test目录下文件，但不希望在Test/test2目录下查找<br>find Test -path “Test/test2” -prune -o -print<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/55100289.jpg" alt=""></p>
<p>避开多个文件夹:<br>find Test ( -path Test/test2 -o -path Test/test1 ) -prune -o -print<br>圆括号表示表达式的结合。  \ 表示引用，即指示 shell 不对后面的字符作特殊解释，而留给 find 命令去解释其意义。<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/26521860.jpg" alt=""></p>
<p>查找某一确定文件，-name等选项加在-o 之后<br>find Test (-path Test/test2 -o -path test/test1 ) -prune -o -name “*.log” -print<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/50646456.jpg" alt=""></p>
<p><strong>5．使用user和nouser选项：</strong><br>按文件属主查找文件：<br>在$HOME目录中查找文件属主为peida的文件<br>find ~ -user username -print    </p>
<p>在/etc目录下查找文件属主为peida的文件:<br>命令：<br>find /etc -user username -print  </p>
<p>实例3：为了查找属主帐户已经被删除的文件，可以使用-nouser选项。在/home目录下查找所有的这类文件<br>find /home -nouser -print<br>这样就能够找到那些属主在/etc/passwd文件中没有有效帐户的文件。在使用-nouser选项时，不必给出用户名； find命令能够为你完成相应的工作。</p>
<p><strong>6．使用group和nogroup选项：</strong><br>就像user和nouser选项一样，针对文件所属于的用户组， find命令也具有同样的选项。<br>为了在/apps目录下查找属于gem用户组的文件，可以用：<br>find /apps -group gem -print<br>要查找没有有效所属用户组的所有文件，可以使用nogroup选项。下面的find命令从文件系统的根目录处查找这样的文件:<br>find / -nogroup-print</p>
<p><strong>7．按照更改时间或访问时间等查找文件：</strong><br>如果希望按照更改时间来查找文件，可以使用mtime,atime或ctime选项。如果系统突然没有可用空间了，很有可能某一个文件的长度在此期间增长迅速，这时就可以用mtime选项来查找这样的文件。<br>用减号-来限定更改时间在距今n日以内的文件，而用加号+来限定更改时间在距今n日以前的文件。<br>希望在系统根目录下查找更改时间在5日以内的文件，可以用：<br>find / -mtime -5 -print<br>为了在/var/adm目录下查找更改时间在3日以前的文件，可以用:<br>find /var/adm -mtime +3 -print</p>
<p><strong>8．查找比某个文件新或旧的文件：</strong><br>如果希望查找更改时间比某个文件新但比另一个文件旧的所有文件，可以使用-newer选项。<br>它的一般形式为：<br>newest_file_name ! oldest_file_name<br>其中，！是逻辑非符号。    </p>
<p>查找更改时间比文件1log新但比文件3.log旧的文件（包含3.log）<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/51978718.jpg" alt=""></p>
<p><strong>9．使用type选项：</strong><br>在当前目录下查找所有的目录<br>find . -type d -print  </p>
<p>在当前目录下查找除目录以外的所有类型的文件<br>find . ! -type d -print<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/29142181.jpg" alt=""></p>
<p>在当前目录下查找所有的符号链接文件<br>find . -type l -print</p>
<p><strong>10．使用size选项：</strong><br>可以按照文件长度来查找文件，这里所指的文件长度既可以用块（block）来计量，也可以用字节来计量。以字节计量文件长度的表达形式为数字加c结尾；以块计量文件长度只用数字表示即可。<br>在按照文件长度查找文件时，一般使用这种以字节表示的文件长度，在查看文件系统的大小，因为这时使用块来计量更容易转换。   </p>
<p>在当前目录下查找文件长度大于1 M字节的文件<br>find . -size +1000000c -print</p>
<p>在当前目录下查找文件长度恰好为100字节的文件:<br>find . -size 100c -print  </p>
<p>在当前目录下查找长度超过10块的文件（一块等于512字节）<br>find . -size +10 -print</p>
<p><strong>11．使用depth选项：</strong><br>在使用find命令时，可能希望先匹配所有的文件，再在子目录中查找。使用depth选项就可以使find命令这样做。这样做的一个原因就是，当在使用find命令向磁带上备份文件系统时，希望首先备份所有的文件，其次再备份子目录中的文件。<br>下面例子可以看出输出是相反的。<br><img src="http://ogdiq8qnd.bkt.clouddn.com/public/16-11-17/50517710.jpg" alt=""></p>
<p><strong>12．使用mount选项：</strong><br>在当前的文件系统中查找文件（不进入其他文件系统），可以使用find命令的mount选项。</p>
<p>从当前目录开始查找位于本文件系统中文件名以XC结尾的文件<br>find . -name “*.XC” -mount -print </p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件目录命令-touch命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E4%B9%8Btouch%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="touch简介"><a href="#touch简介" class="headerlink" title="touch简介"></a><strong>touch简介</strong></h1><p>linux的touch命令不常用，一般在使用make的时候可能会用到，用来修改文件时间戳，或者新建一个不存在的文件<br><a id="more"></a></p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><p><strong>命令格式</strong>：touch [选项] 文件<br><strong>命令功能</strong>：可更改文档或目录的日期时间，包括存取时间和更改时间。<br><strong>命令参数</strong>：<br>-a   只更改存取时间。<br>-c   不建立任何文档。<br>-d 　使用指定的日期时间，而非现在的时间。参数是年月日<br>-f 　此参数将忽略不予处理，仅负责解决BSD版本touch指令的兼容性问题。<br>-m   只更改变动时间。<br>-r 　把指定文档或目录的日期时间，统统设成和参考文档或目录的日期时间相同。<br>-t 　使用指定的日期时间，而非现在的时间。参数是年月日时分秒  </p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p>例一：创建不存在的文件<br>touch 1.log 2.log</p>
<p>例二：更改时间戳<br>touch -r 1.log 2.log<br><strong>将2.log文件的时间改为与1.log相同</strong><br><img src="http://yotuku.cn/link?url=Vy7pkJTgz&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111011" alt=""></p>
<p>例二：修改为当前时间<br>touch filename<br>系统自动将文件修改时间更新为当前时间  </p>
<p><strong>例三：设定文件的时间戳</strong><br>touch -t 201211142234.50 1.log<br>测试后发现不管是否为当月时间都是显示形式为年月日<br><img src="http://yotuku.cn/link?url=E19RZ1pxG&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111012" alt=""><br><img src="http://yotuku.cn/link?url=NyHyz1Txz&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111012" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习之文件目录命令-nl命令]]></title>
      <url>/2017/03/30/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E4%B9%8Bnl%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="nl简介"><a href="#nl简介" class="headerlink" title="nl简介"></a><strong>nl简介</strong></h1><p>nl命令在linux系统中用来计算文件中行号。nl 可以将输出的文件内容自动的加上行号。其默认的结果与 cat -n 有点不太一样， nl可以将行号做比较多的显示设计，包括位数与是否自动补齐 0 等的功能。<br><a id="more"></a></p>
<h1 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a><strong>命令学习</strong></h1><p><strong>命令格式</strong>：nl [选项] [文件]<br><strong>命令功能</strong>：<br>nl 命令读取 File 参数（缺省情况下标准输入），计算输入中的行号，将计算过的行号写入标准输出。 在输出中，nl 命令根据您在命令行中指定的标志来计算左边的行。 输入文本必须写在逻辑页中。每个逻辑页有头、主体和页脚节（可以有空节）。 除非使用 -p 标志，nl 命令在每个逻辑页开始的地方重新设置行号。 可以单独为头、主体和页脚节设置行计算标志（例如，头和页脚行可以被计算然而文本行不能）。<br><strong>命令参数</strong>：<br><strong>-b  ：行号指定的方式，主要有两种：</strong><br>-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；<br>-b t ：如果有空行，空的那一行不要列出行号(默认值)；</p>
<p><strong>-n  ：列出行号表示的方法，主要有三种：</strong><br>-n ln ：行号在萤幕的最左方显示；<br>-n rn ：行号在自己栏位的最右方显示，且不加 0 ；<br>-n rz ：行号在自己栏位的最右方显示，且加 0 ； </p>
<p>-w  ：行号栏位的占用的位数。<br>-p 在逻辑定界符处不重新开始计算。   </p>
<h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a><strong>常用范例</strong></h1><p>例一：用 nl 列出 1.log的内容<br>nl 1.log<br>文件中的空白行，nl 不会加上行号<br><img src="http://yotuku.cn/link?url=V1tgrlplG&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111013" alt=""></p>
<p>例二：用 nl 列出 1.log 的内容，空本行也加上行号<br>nl -b a 1.log<br><img src="http://yotuku.cn/link?url=V1uPBlTeG&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111013" alt=""></p>
<p>例3：让行号前面自动补上0,统一输出格式<br>nl -b a -n rz 1.log<br><img src="http://yotuku.cn/link?url=Ny2P8epgG&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111013" alt=""><br>nl -b a -n rz -w 3 1.log<br><img src="http://yotuku.cn/link?url=N1nuLgaeM&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=4845b80b-ca9e-424d-912c-aad34515f3fa&amp;tk_time=2016111013" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Github创建本地库]]></title>
      <url>/2017/03/29/github%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</url>
      <content type="html"><![CDATA[<h1 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h1><p>在github上创建新仓库new repository,取名为Demo。勾选Initialize this repository with a README，可以省略本地创建README的步骤。</p>
<a id="more"></a>
<h1 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h1><p>新建文件夹后右键选择git bash here,进入git控制台</p>
<h1 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h1><h2 id="创建ssh-key"><a href="#创建ssh-key" class="headerlink" title="创建ssh key"></a>创建ssh key</h2><pre><code>ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;
</code></pre><p>之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在c/Users/Administator下生成.ssh文件夹，打开id_rsa.pub，复制里面的key。<br>回到github，进入Account Settings，左边选择SSH Keys，Add SSH Key,title随便填，粘贴key</p>
<h2 id="验证ssh-key"><a href="#验证ssh-key" class="headerlink" title="验证ssh key"></a>验证ssh key</h2><pre><code>ssh -T git@github.com
</code></pre><p>如出现You’ve successfully authenticated, but GitHub does not provide shell access ，则就表示已成功连上github。</p>
<h2 id="关联本地仓库与远程仓库"><a href="#关联本地仓库与远程仓库" class="headerlink" title="关联本地仓库与远程仓库"></a>关联本地仓库与远程仓库</h2><pre><code>git config --global user.name &quot;your name&quot;
git config --global user.email &quot;your_email@youremail.com&quot;
git remote add origin https://github.com/yourName/yourRepo.git  
</code></pre><p>后面的yourName和yourRepo表示你再github的用户名和刚才新建的仓库，加完之后进入.git，打开config，这里会多出一个remote “origin”内容，这就是刚才添加的远程地址，也可以直接修改config来配置远程地址。<br>如果执行git remote add origin <a href="https://github.com/findingsea/myRepoForBlog.git，出现错误：" target="_blank" rel="external">https://github.com/findingsea/myRepoForBlog.git，出现错误：</a><br>fatal: remote origin already exists<br>则执行以下语句： </p>
<pre><code>git remote rm origin
</code></pre><h1 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h1><pre><code>git add text.txt //添加指定文件
git add .        //添加所有文件
</code></pre><h1 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h1><pre><code>git commit -m &quot;first add&quot;  //提交，后面为当前提交说明
</code></pre><h1 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h1><pre><code>git push origin master //本地仓库推送到远程服务器。
</code></pre><p>在执行git push origin master时，报错：error:failed to push som refs to…….</p>
<pre><code>git pull origin master
</code></pre>]]></content>
      
        <categories>
            
            <category> github </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[keil兼容51与ARM]]></title>
      <url>/2017/03/29/keil%E5%85%BC%E5%AE%B9C51%E4%B8%8EARM/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>设置keil4使其兼容C51与ARM，避免装多个版本keil。<br><a id="more"></a><br>环境：keil4 for ARM</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>在keil4的安装文件中找到TOOLS.ini，在[ARM]前面添加C51项</p>
<pre><code>[C51]
PATH=&quot;E:\keil\C51\&quot;
SN=K1DZP-5IUSH-A01UE
VERSION=V9.01
BOOK0=HLP\RELEASE_NOTES.HTM(&quot;Release Notes&quot;,GEN)
BOOK1=HLP\GS51.PDF(&quot;uVision2 Getting Started&quot;,GEN)
BOOK2=HLP\C51.PDF(&quot;C51 User&apos;s Guide&quot;,GEN)
BOOK3=HLP\C51LIB.CHM(&quot;C51 Library Functions&quot;,C)
BOOK4=HLP\A51.PDF(&quot;Assembler/Utilities&quot;,GEN)
BOOK5=HLP\TR51.CHM(&quot;RTX51 Tiny User&apos;s Guide&quot;,GEN)
BOOK6=HLP\DBG51.CHM(&quot;uVision2 Debug Commands&quot;,GEN)
BOOK7=HLP\ISD51.CHM(&quot;ISD51 In System Debugger&quot;,GEN)
BOOK8=HLP\FlashMon51.CHM(&quot;Flash Monitor&quot;,GEN)
BOOK9=MON390\MON390.HTM(&quot;MON390: Dallas Contiguous Mode Monitor&quot;,GEN)
TDRV0=BIN\MON51.DLL (&quot;Keil Monitor-51 Driver&quot;)
TDRV1=BIN\ISD51.DLL (&quot;Keil ISD51 In-System Debugger&quot;)
TDRV2=BIN\MON390.DLL (&quot;MON390: Dallas Contiguous Mode&quot;)
TDRV3=BIN\LPC2EMP.DLL (&quot;LPC900 EPM Emulator/Programmer&quot;)
TDRV4=BIN\UL2UPSD.DLL (&quot;ST-uPSD ULINK Driver&quot;)
RTOS1=RTXTINY.DLL (&quot;RTX-51 Tiny&quot;)
RTOS2=RTX51.DLL (&quot;RTX-51 Full&quot;)
</code></pre><p>TOOLS修改后如下图所示：<br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-4-20/23783146-file_1492657589965_14269.png" alt=""></p>
<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>按照安装ARM时注册一样，注册C51</p>
<h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>在keil4安装文件下添加C51编译器，可有从他人装好了的c51下复制过来。这里我采用的是keil2下的c51编译器<br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-4-20/57973457-file_1492658268412_5a5b.png" alt=""></p>
<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><p><a href="">keil4</a><br><a href="![](http://ogdiq8qnd.bkt.clouddn.com/17-4-20/23783146-file_1492657589965_14269.png">c51编译器</a>)</p>
]]></content>
      
        <categories>
            
            <category> 软件工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> keil </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo+Github搭建个人博客（二）]]></title>
      <url>/2017/03/29/hexo-github-two/</url>
      <content type="html"><![CDATA[<h2 id="安装NEXT主题"><a href="#安装NEXT主题" class="headerlink" title="安装NEXT主题"></a>安装NEXT主题</h2><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。  </p>
<blockquote>
<p>cd blog<br>git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">https://github.com/iissnan/hexo-theme-next</a> themes/next</p>
</blockquote>
<h3 id="启用next主题"><a href="#启用next主题" class="headerlink" title="启用next主题"></a>启用next主题</h3><p>在站点配置文件_config.yml中：  </p>
<blockquote>
<p>theme: next  </p>
</blockquote>
<a id="more"></a>
<h3 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h3><blockquote>
<p>hexo s<br><a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>  </p>
</blockquote>
<h2 id="NEXT主题设置"><a href="#NEXT主题设置" class="headerlink" title="NEXT主题设置"></a>NEXT主题设置</h2><p>Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，主要用于配置主题相关的选项。前者称为 <span id="inline-blue">站点配置文件</span>，后者称为 <span id="inline-purple">主题配置文件</span></p><p></p>
<h3 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h3><p>关于NEXT主题的基本设置可参考<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">NEXT在线文档</a>，包含NEXT主题的详细使用介绍。</p>
<h3 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h3><h4 id="添加High一下"><a href="#添加High一下" class="headerlink" title="添加High一下"></a>添加High一下</h4><p>打开博客根目录 <code>\themes\next\layout\_partials\header.swig</code> ，在<br><code>&lt;ul&gt; ... /ul&gt;</code> 标签之间加入以下代码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div></pre></td><td class="code"><pre><div class="line">&lt;li&gt; &lt;a title="把这个链接拖到你的Chrome收藏夹工具栏中" href='javascript:(function() &#123;</div><div class="line">    function c() &#123;</div><div class="line">        var e = document.createElement("link");</div><div class="line">        e.setAttribute("type", "text/css");</div><div class="line">        e.setAttribute("rel", "stylesheet");</div><div class="line">        e.setAttribute("href", f);</div><div class="line">        e.setAttribute("class", l);</div><div class="line">        document.body.appendChild(e)</div><div class="line">    &#125;</div><div class="line">    function h() &#123;</div><div class="line">        var e = document.getElementsByClassName(l);</div><div class="line">        for (var t = 0; t &lt; e.length; t++) &#123;</div><div class="line">            document.body.removeChild(e[t])</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    function p() &#123;</div><div class="line">        var e = document.createElement("div");</div><div class="line">        e.setAttribute("class", a);</div><div class="line">        document.body.appendChild(e);</div><div class="line">        setTimeout(function() &#123;</div><div class="line">            document.body.removeChild(e)</div><div class="line">        &#125;, 100)</div><div class="line">    &#125;</div><div class="line">    function d(e) &#123;</div><div class="line">        return &#123;</div><div class="line">            height : e.offsetHeight,</div><div class="line">            width : e.offsetWidth</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    function v(i) &#123;</div><div class="line">        var s = d(i);</div><div class="line">        return s.height &gt; e &amp;&amp; s.height &lt; n &amp;&amp; s.width &gt; t &amp;&amp; s.width &lt; r</div><div class="line">    &#125;</div><div class="line">    function m(e) &#123;</div><div class="line">        var t = e;</div><div class="line">        var n = 0;</div><div class="line">        while (!!t) &#123;</div><div class="line">            n += t.offsetTop;</div><div class="line">            t = t.offsetParent</div><div class="line">        &#125;</div><div class="line">        return n</div><div class="line">    &#125;</div><div class="line">    function g() &#123;</div><div class="line">        var e = document.documentElement;</div><div class="line">        if (!!window.innerWidth) &#123;</div><div class="line">            return window.innerHeight</div><div class="line">        &#125; else if (e &amp;&amp; !isNaN(e.clientHeight)) &#123;</div><div class="line">            return e.clientHeight</div><div class="line">        &#125;</div><div class="line">        return 0</div><div class="line">    &#125;</div><div class="line">    function y() &#123;</div><div class="line">        if (window.pageYOffset) &#123;</div><div class="line">            return window.pageYOffset</div><div class="line">        &#125;</div><div class="line">        return Math.max(document.documentElement.scrollTop, document.body.scrollTop)</div><div class="line">    &#125;</div><div class="line">    function E(e) &#123;</div><div class="line">        var t = m(e);</div><div class="line">        return t &gt;= w &amp;&amp; t &lt;= b + w</div><div class="line">    &#125;</div><div class="line">    function S() &#123;</div><div class="line">        var e = document.createElement("audio");</div><div class="line">        e.setAttribute("class", l);</div><div class="line">        e.src = i;</div><div class="line">        e.loop = false;</div><div class="line">        e.addEventListener("canplay", function() &#123;</div><div class="line">            setTimeout(function() &#123;</div><div class="line">                x(k)</div><div class="line">            &#125;, 500);</div><div class="line">            setTimeout(function() &#123;</div><div class="line">                N();</div><div class="line">                p();</div><div class="line">                for (var e = 0; e &lt; O.length; e++) &#123;</div><div class="line">                    T(O[e])</div><div class="line">                &#125;</div><div class="line">            &#125;, 15500)</div><div class="line">        &#125;, true);</div><div class="line">        e.addEventListener("ended", function() &#123;</div><div class="line">            N();</div><div class="line">            h()</div><div class="line">        &#125;, true);</div><div class="line">        e.innerHTML = " &lt;p&gt;If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.&lt;/p&gt; &lt;p&gt;";</div><div class="line">        document.body.appendChild(e);</div><div class="line">        e.play()</div><div class="line">    &#125;</div><div class="line">    function x(e) &#123;</div><div class="line">        e.className += " " + s + " " + o</div><div class="line">    &#125;</div><div class="line">    function T(e) &#123;</div><div class="line">        e.className += " " + s + " " + u[Math.floor(Math.random() * u.length)]</div><div class="line">    &#125;</div><div class="line">    function N() &#123;</div><div class="line">        var e = document.getElementsByClassName(s);</div><div class="line">        var t = new RegExp("\\b" + s + "\\b");</div><div class="line">        for (var n = 0; n &lt; e.length; ) &#123;</div><div class="line">            e[n].className = e[n].className.replace(t, "")</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    var e = 30;</div><div class="line">    var t = 30;</div><div class="line">    var n = 350;</div><div class="line">    var r = 350;</div><div class="line">    var i = "//7xuupy.com1.z0.glb.clouddn.com/tongxingSibel%20-%20Im%20Sorry.mp3";</div><div class="line">    var s = "mw-harlem_shake_me";</div><div class="line">    var o = "im_first";</div><div class="line">    var u = ["im_drunk", "im_baked", "im_trippin", "im_blown"];</div><div class="line">    var a = "mw-strobe_light";</div><div class="line">    var f = "//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css";</div><div class="line">    var l = "mw_added_css";</div><div class="line">    var b = g();</div><div class="line">    var w = y();</div><div class="line">    var C = document.getElementsByTagName("*");</div><div class="line">    var k = null;</div><div class="line">    for (var L = 0; L &lt; C.length; L++) &#123;</div><div class="line">        var A = C[L];</div><div class="line">        if (v(A)) &#123;</div><div class="line">            if (E(A)) &#123;</div><div class="line">                k = A;</div><div class="line">                break</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if (A === null) &#123;</div><div class="line">        console.warn("Could not find a node of the right size. Please try a different page.");</div><div class="line">        return</div><div class="line">    &#125;</div><div class="line">    c();</div><div class="line">    S();</div><div class="line">    var O = [];</div><div class="line">    for (var L = 0; L &lt; C.length; L++) &#123;</div><div class="line">        var A = C[L];</div><div class="line">        if (v(A)) &#123;</div><div class="line">            O.push(A)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    &#125;)()    '&gt;High一下&lt;/a&gt; &lt;/li&gt;</div></pre></td></tr></table></figure></p>
<h4 id="添加最近访客"><a href="#添加最近访客" class="headerlink" title="添加最近访客"></a>添加最近访客</h4><ol>
<li>在主题配置文件中menu项添加guestbook菜单  </li>
<li>在Hexo的source文件夹下，利用<code>hexo new page guestbook</code>创建guestbook页面,对应的index文件中添加如下代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">最近访客  </div><div class="line">&lt;div class=&quot;ds-recent-visitors&quot; data-num-items=&quot;39&quot; data-avatar-size=&quot;40&quot; id=&quot;ds-recent-visitors&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="修改文章内链接文本样式"><a href="#修改文章内链接文本样式" class="headerlink" title="修改文章内链接文本样式"></a>修改文章内链接文本样式</h4><p>将链接文本设置为蓝色，鼠标划过时文字颜色加深，并显示下划线。<br>找到文件 <code>themes\next\source\css\_custom\custom.styl</code> ，添加如下 css 样式：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.post-body p a &#123;</div><div class="line">  color: #0593d3;</div><div class="line">  border-bottom: none;</div><div class="line">  &amp;:hover &#123;</div><div class="line">    color: #0477ab;</div><div class="line">    text-decoration: underline;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="给-Github-添加-README"><a href="#给-Github-添加-README" class="headerlink" title="给 Github 添加 README"></a>给 Github 添加 README</h4><p>默认情况下，Github中每一个项目，我们希望有一份 README.md 的文件来作为项目的说明，但是我们在项目根目录下的 blog\source 目录下创建一份 README.md 文件，写好说明介绍，部署的时候，这个 README.md 会被 hexo 解析掉，而不会被解析到 Github 中去的。<br>正确的解决方法其实很简单：<br><strong> 把 README.md 文件的后缀名改成 “MDOWN” 然后扔到<code>blog/source</code>文件夹下即可，这样 hexo 不会解析，Github 也会将其作为 MD 文件解析。 </strong></p>
<h4 id="插入网易云音乐"><a href="#插入网易云音乐" class="headerlink" title="插入网易云音乐"></a>插入网易云音乐</h4><p>如果只加入单曲，只需要搜索歌曲，点开歌曲名，点击生成外链播放器，复制html代码将html代码无需任何修改放入markdown文章里就OK了。</p>
<p>如果想要加入歌单，就需要自己创建歌单，然后分享歌单，找到自己的分享动态，点进去可以看到有“生成外链播放器”这些字眼，其余操作就和上面一样了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://neveryu.github.io/2016/09/30/hexo-next-two/" target="_blank" rel="external">Never_yu’s Blog</a>  </p>
]]></content>
      
        <categories>
            
            <category> 综合 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[嵌入式位域]]></title>
      <url>/2017/03/29/C%E8%AF%AD%E8%A8%80%E4%BD%8D%E5%9F%9F/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有些信息在存储时，并不需要占用一个完整的字节， 而只需占几个或一个二进制位。例如在存放一个开关量时，只有0和1 两种状态，用一位二进位即可。<br>为了节省存储空间，并使处理简便，Ｃ语言提供了一种数据结构，称为“位域”或“位段”。所谓“位域”是把一个字节中的二进位划分为几个不同的区域，并说明每个区域的位数。每个域有一个域名，允许在程序中按域名进行操作。 这样就可以把几个不同的对象用一个字节的二进制位域来表示。<br><a id="more"></a></p>
<h1 id="位域的定义和位域变量的说明"><a href="#位域的定义和位域变量的说明" class="headerlink" title="位域的定义和位域变量的说明"></a>位域的定义和位域变量的说明</h1><p>位域定义与结构定义相仿，其形式为：<br>struct 位域结构名<br>{ 位域列表 };<br>其中位域列表的形式为： 类型说明符 位域名：位域长度<br>例如：</p>
<pre><code>struct bs
{
    int a:8;
    int b:2;
    int c:6;
};  
</code></pre><p>位域变量的说明与结构变量说明的方式相同。 可采用先定义后说明，同时定义说明或者直接说明这三种方式。<br>例如：</p>
<pre><code>struct bs
{
    int a:8;
    int b:2;
    int c:6;
}data;
</code></pre><p>说明data为bs变量，共占两个字节。其中位域a占8位，位域b占2位，位域c占6位。<br><strong>备注：</strong>  </p>
<ol>
<li><p>一个位域必须存储在同一个字节中，不能跨两个字节。如一个字节所剩空间不够存放另一位域时，应从下一单元起存放该位域。也可以有意使某位域从下一单元开始。<br>例如：<br>struct bs<br>{<br> unsigned a:4;<br> unsigned :0;<br> unsigned b:4;<br> unsigned c:4;<br>}<br>在这个位域定义中，a占第一字节的4位，后4位填0表示不使用，b从第二字节开始，占用4位，c占用4位。  </p>
</li>
<li><p>由于位域不允许跨两个字节，因此位域的长度不能大于一个字节的长度，也就是说不能超过8位二进位。<br>位域可以无位域名，这时它只用来作填充或调整位置。无名的位域是不能使用的。<br>例如： </p>
<p> struct k</p>
<pre><code>{
    int a:1;
    int :2;
    int b:3;
    int c:2;
};
</code></pre></li>
</ol>
<h1 id="位域的使用"><a href="#位域的使用" class="headerlink" title="位域的使用"></a>位域的使用</h1><p>位域的使用和结构成员的使用相同，其一般形式为：<br>位域变量名·位域名<br>位域允许用各种格式输出。</p>
<pre><code>main(){
    struct bs
        {
             unsigned a:1;
             unsigned b:3;
             unsigned c:4;
        } bit,*pbit;
    bit.a=1;
    bit.b=7;
    bit.c=15;
    printf(&quot;%d,%d,%d\n&quot;,bit.a,bit.b,bit.c);
    pbit=&amp;bit;
    pbit-&gt;a=0;
    pbit-&gt;b&amp;=3;
    pbit-&gt;c|=1;
    printf(&quot;%d,%d,%d\n&quot;,pbit-&gt;a,pbit-&gt;b,pbit-&gt;c);
}
</code></pre><p>上例程序中定义了位域结构bs，三个位域为a,b,c。说明了bs类型的变量bit和指向bs类型的指针变量pbit。<br>这表示位域也是可以使用指针的。程序的9、10、11三行分别给三个位域赋值。( 赋值不能超过该位域的允许范围)程序第12行以整型量格式输出三个域的内容。第13行把位域变量bit的地址送给指针变量pbit。第14行用指针方式给位域a重新赋值，赋为0。第15行使用了复合的位运算符”&amp;=”，该行相当于：pbit-&gt;b=pbit-&gt;b&amp;3位域b中原有值为7，与3作按位与运算的结果为3(111&amp;011=011,十进制值为3)。同样，程序第16行中使用了复合位运算”|=”  </p>
<h1 id="位域规则"><a href="#位域规则" class="headerlink" title="位域规则"></a>位域规则</h1><p>C99规定int、unsigned int和bool可以作为位域类型，但编译器几乎都对此作了扩展，允许其它类型类型的存在。<br>使用位域的主要目的是压缩存储，其大致规则为：<br>1) 如果相邻位域字段的类型相同，且其位宽之和小于类型的sizeof大小，则后面的字<br>段将紧邻前一个字段存储，直到不能容纳为止；<br>2) 如果相邻位域字段的类型相同，但其位宽之和大于类型的sizeof大小，则后面的字<br>段将从新的存储单元开始，其偏移量为其类型大小的整数倍；<br>3) 如果相邻的位域字段的类型不同，则各编译器的具体实现有差异，VC6采取不压缩方<br>式，Dev-C++采取压缩方式；<br>4) 如果位域字段之间穿插着非位域字段，则不进行压缩；<br>5) 整个结构体的总大小为最宽基本类型成员大小的整数倍。  </p>
<h1 id="位域实例"><a href="#位域实例" class="headerlink" title="位域实例"></a>位域实例</h1><pre><code>typedef struct  AA
{
       unsigned char b1:5;
       unsigned char b2:5;
       unsigned char b3:5;
       unsigned char b4:5;
       unsigned char b5:5;
}AA;
</code></pre><p>sizeof(AA) = 5;　但实际上只用了25位，即4个字节  </p>
<pre><code>（1）typedef struct  AA
{
       unsigned int b1:5;
       unsigned int b2:5;
       unsigned int b3:5;
       unsigned int b4:5;
       unsigned int b5:5;
}AA;

（2）typedef struct  AA
{
       unsigned int b1:5;
       unsigned int b2:5;
       unsigned int b3:5;
       unsigned int b4:5;
       unsigned int b5:5;
       unsigned int b6:5;
       unsigned int b7:5;
}AA;
</code></pre><p>（1）是5个成员,按第一条规则,共占25位,按第五条规则,即sizeof(AA)=4<br>现把成员加到7个，参考（2）,按第一条规则,共占35位,按第五条规则,即sizeof(AA)=8,</p>
<pre><code> struct test1
{
char a:1;
char :2;
long b:3;
char c:2;
};
</code></pre><p>int len = sizeof(test1);<br>对于上述例子，len的值应该是12.<br>  　<br>首先以最长的类型位宽做为偏移量，最长的是long型，占4位，所以不同类型之间应该是4个字节的偏移，即test1应该是4字节的整数倍。<br> 　<br>char a：1；　//用一个字节去存储<br>char ：2；　 //空域。因为与前面的a的类型相同，而两个位域的位宽相加仍然少于8位，所以依然用1个字节表示<br>long b：3； //long类型的位宽是4个字节，与前面的char类型不同，所以b与a之间偏移4个字节，它们之间自动补充3个字节  　<br>char c：2； //因为c与b又不同型，以test1中的最长的long类型的位宽进行偏移，所以虽然char只用1个字节就够了<br>//但依然要占4个字节。<br>总共是12字节。  </p>
<pre><code>struct s1
　　{
　　int i: 8;
　　int j: 4;
　　int a: 3;
　　double b;
　　};
　　struct s2
　　{
　　int i: 8;
　　int j: 4;
　　double b;
　　int a:3;
　　};
　　printf(&quot;sizeof(s1)= %d\n&quot;, sizeof(s1));
　　printf(&quot;sizeof(s2)= %d\n&quot;, sizeof(s2));
　　result: 16, 24
　　第一个struct s1
　　{
　　int i: 8;
　　int j: 4;
　　int a: 3;
　　double b;
　　};
</code></pre><p>　　理论上是这样的，首先是i在相对0的位置，占8位一个字节，然后，j就在相对一个字节的位置，由于一个位置的字节数是4位的倍数，因此不用对齐，就放 在那里了，然后是a，要在3位的倍数关系的位置上，因此要移一位，在15位的位置上放下，目前总共是18位，折算过来是2字节2位的样子，由于 double是8 字节的，因此要在相对0要是8个字节的位置上放下，因此从18位开始到8个字节之间的位置被忽略，直接放在8字节的位置了，因此，总共是16字节。</p>
<h1 id="位域应用"><a href="#位域应用" class="headerlink" title="位域应用"></a>位域应用</h1><p>但是当我们编写网络程序的时候，要注意网络字节序和位序都是大端序的，而主机很多都是小端序。所以在网络中的第一个位字段通常放在一个字节的末尾，而在网络中的最后一个字节的位字段，则放在一个字节的前面。 </p>
<pre><code>struct{
uint8_t type: 4;  
uint8_t flag: 1;  //1: control, 0:data  
uint8_t extension: 1;  
uint8_t R: 2;  
} __attribute__((__packed__)) MacCtlHdr_t;    
</code></pre><p>这个是小端序主机上的定义，对应于下图中的帧格式<br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-4-3/41960539-file_1491182809783_8fa1.png" alt=""> </p>
<pre><code> struct{
 uint8_t RN_M4: 4;  
uint8_t cause: 3;  
uint8_t type: 1;  
uint8_t RN_M8: 8;  
uint8_t RN_L8: 8;  
uint8_t R: 4;  
uint8_t bsr: 4;  
}__attribute__((__packed__)) RA_HEADER;   
</code></pre><p>对应于这样的帧格式：<br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-4-3/45740257-file_1491182813000_14b41.png" alt=""><br>本地存储的是小端序，但是机器发送的时候是大端序。对已从每个字节的高位先行发送。所以顺序是第一字节的type，cause，RN4，之后是第二字节RNM8和第三字节RNL8，之后是第三字节的bsr和R。   </p>
<p>#参考<br><a href="http://blog.sina.com.cn/s/blog_3d8529400100istl.html" target="_blank" rel="external">C语言位域精解</a><br><a href="http://blog.csdn.net/yang_chen_shi_wo/article/details/46793205" target="_blank" rel="external">C语言位域，字节序，帧格式</a></p>
]]></content>
      
        <categories>
            
            <category> 嵌入式C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 位域 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C常见关键字]]></title>
      <url>/2017/03/29/static%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>原文为<a href="http://pan.baidu.com/s/1hsxFRZu" target="_blank" rel="external">C语言进阶之道</a>中的关键字章节<br>标准C程序一直由下列部分组成：<br>1）正文段——CPU执行的机器指令部分，也就程序。一个程序只有一个副本；只读，这是为了防止程序由于意外事故而修改自身指令；<br>2）初始化数据段（数据段）——在程序中所有赋了初值的全局变量，存放在这里。<br>3）非初始化数据段（bss段）——在程序中没有初始化的全局变量；内核将此段初始化为0。<br>注意：只有全局变量被分配到数据段中。<br>4）栈——增长方向：自顶向下增长；自动变量以及每次函数调用时所需要保存的信息（返回地址；环境信息）。<br>5）堆——动态存储分配。</p>
<a id="more"></a>
<h1 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h1><h2 id="作用1"><a href="#作用1" class="headerlink" title="作用1"></a>作用1</h2><p><strong>在函数体，一个被声明为静态的变量在这一函数被调用过程中维持其值不变。</strong><br>这样定义的变量称为局部静态变量：在局部变量之前加上关键字static，局部变量就被定义成为一个局部静态变量。也就是上面的作用一中提到的在函数体内定义的变量。除了类型符外，若不加其它关键字修饰，默认都是局部变量。比如以下代码：</p>
<pre><code>void test1（void）
{
unsigned char a；
static unsigned char b；
…
a++；
b++；
}
</code></pre><p>变量a是局部变量，变量b为局部静态变量。在函数体，一个被声明为静态的变量（也就是局部静态变量）在这一函数被调用过程中维持其值不变。若是连续两次调用上面的函数test1(),读取a和b的值，a=1，b=2。每次调用test1函数，局部变量a都会重新初始化为0x00；然后执行a++；而局部静态变量在调用过程中却能维持其值不变。   </p>
<p>局部静态变量的详细特性，注意它的作用域。<br>1）内存中的位置：静态存储区<br>2）初始化：未经初始化的全局静态变量会被程序自动初始化为0（自动对象的值是任意的，除非他被显示初始化）<br>3）作用域：作用域仍为局部作用域，当定义它的函数或者语句块结束的时候，作用域随之结束。<br>注：当static用来修饰局部变量的时候，它就改变了局部变量的存储位置，从原来的栈中存放改为静态存储区。但是局部静态变量在离开作用域之后，并没有被销毁，而是仍然驻留在内存当中，直到程序结束，只不过我们不能再对他进行访问。</p>
<h2 id="作用2"><a href="#作用2" class="headerlink" title="作用2"></a>作用2</h2><p><strong>在模块内（但在函数体外），一个被声明为静态的变量可以被模块内所用函数访问，但不能被模块外其它函数访问。它是一个本地的全局变量。</strong><br>这样定义的变量也称为全局静态变量：在全局变量之前加上关键字static，全局变量就被定义成为一个全局静态变量。也就是模块内（但在函数体外）声明的静态变量。<br>例如在源文件中，定义全局静态变量n，该变量只能用与该源文件中的函数。 </p>
<pre><code>static int n;
void test();
void main()
{
    test();
}
</code></pre><p>定义全局静态变量的好处：  </p>
<p><1>不会被其他文件所访问，修改，是一个本地的局部变量。  </1></p>
<p><2>其他文件中可以使用相同名字的变量，不会发生冲突。</2></p>
<p>全局变量的详细特性，注意作用域，可以和局部静态变量相比较：<br>1）内存中的位置：静态存储区（静态存储区在整个程序运行期间都存在）<br>2）初始化：未经初始化的全局静态变量会被程序自动初始化为0（自动对象的值是任意的，除非他被显示初始化）<br>3）作用域：全局静态变量在声明他的文件之外是不可见的。准确地讲从定义之处开始到文件结尾。  </p>
<p>当static用来修饰全局变量的时候，它就改变了全局变量的作用域（在声明他的文件之外是不可见的），但是没有改变它的存放位置，还是在静态存储区中。</p>
<h2 id="作用3"><a href="#作用3" class="headerlink" title="作用3"></a>作用3</h2><p><strong>在模块内，一个被声明为静态的函数只可被这一模块内的其它函数调用。这个函数被限制在声明它的模块的本地范围内使用。</strong><br>这样定义的变量也称为全局静态变量：在全局变量之前加上关键字static，全局变量就被定义成为一个全局静态变量。也就是上述作用二中提到的在模块内（但在函数体外）声明的静态变量。  </p>
<p>定义全局静态变量的好处：  </p>
<p><1>不会被其他文件所访问，修改，是一个本地的局部变量。  </1></p>
<p><2>其他文件中可以使用相同名字的变量，不会发生冲突。  </2></p>
<p>全局变量的详细特性，注意作用域，可以和局部静态变量相比较：<br>1）内存中的位置：静态存储区（静态存储区在整个程序运行期间都存在）<br>2）初始化：未经初始化的全局静态变量会被程序自动初始化为0（自动对象的值是任意的，除非他被显示初始化）<br>3）作用域：全局静态变量在声明他的文件之外是不可见的。准确地讲从定义之处开始到文件结尾。</p>
<p>当static用来修饰全局变量的时候，它就改变了全局变量的作用域（在声明他的文件之外是不可见的），但是没有改变它的存放位置，还是在静态存储区中。</p>
<h1 id="const关键字"><a href="#const关键字" class="headerlink" title="const关键字"></a>const关键字</h1><p>（1）const关键字修饰的变量可以认为有只读属性，但它绝不与常量划等号。  </p>
<pre><code>const int i=5;
int j=0;
i=j;   //非法，导致编译错误，因为只能被读
j=i;   //合法
</code></pre><p>（2）const关键字修饰的变量在声明时必须进行初始化。  </p>
<pre><code>const int i=5;    //合法
const int j;      //非法，导致编译错误
</code></pre><p>（3）用const声明的变量虽然增加了分配空间，但是可以保证类型安全。const最初是从C++变化得来的，它可以替代define来定义常量。在旧版本(标准前)的c中，如果想建立一个常量，必须使用预处理器：  </p>
<pre><code>#define PI 3.14159
</code></pre><p>此后无论在何处使用PI，都会被预处理器以3.14159替代。编译器不对PI进行类型检查，如果使用不慎，很可能由预处理引入错误。而且，我们也不能得到PI的地址（即不能向PI传递指针和引用）。const的出现，比较好的解决了上述问题。  </p>
<p>（4）C标准中，const定义的常量是全局的。  </p>
<p>（5）指针定义，若是想定义一个只读属性的指针，那么关键字const要放到‘* ’后面。</p>
<pre><code>char *const cp; //指针不可改变，但指向的内容可以改变
char const *pc1; //指针可以改变，但指向的内容不能改变
const char *pc2; //同上（后两个声明是等同的）
</code></pre><p>（6）将函数传入参数声明为const，以指明使用这种参数仅仅是为了效率的原因，而不是想让调用函数能够修改对象的值。<br>参数const通常用于参数为指针或引用的情况，且只能修饰输入参数;若输入参数采用“值传递”方式，由于函数将自动产生临时变量用于复制该参数，该参数本就不需要保护，所以不用const修饰。</p>
<pre><code>void fun0(const int * a );
void fun1(const int &amp; a);
</code></pre><p>调用函数的时候，用相应的变量初始化const常量，则在函数体中，按照const所修饰的部分进行常量化，如形参为const int * a，则不能对传递进来的指针所指向的内容进行改变，保护了原指针所指向的内容；如形参为const int &amp; a，则不能对传递进来的引用对象进行改变，保护了原对象的属性。  </p>
<p>（7）修饰函数返回值，可以阻止用户修改返回值。（在嵌入式C中一般不用，主要用于C++）</p>
<p>（8）const消除了预处理器的值替代的不良影响，并且提供了良好的类型检查形式和安全性</p>
<p>两个常用的标准C库函数声明，它们都是使用const的典范：<br>1.字符串拷贝函数：  </p>
<pre><code>char *strcpy（char *strDest，const char *strSrc）；
</code></pre><p>2.返回字符串长度函数：  </p>
<pre><code>int strlen（const char *str）；
</code></pre><h1 id="volatile关键"><a href="#volatile关键" class="headerlink" title="volatile关键"></a>volatile关键</h1><p>定义为volatile 的变量是说这变量可能会被意想不到地改变，这样，编译器就不会去假设这个变量的值了。精确地说就是，优化器在用到这个变量时必须每次都小心地重新读取这个变量的值，而不是使用保存在寄存器里的备份。　　<br>由于访问寄存器的速度要快过RAM，所以编译器一般都会作减少存取外部RAM的优化。比如：　　</p>
<pre><code>static int i=0; 
int main(void) 
{ 
    ... 
    while (1) 
    { 
        if (i) 
            dosomething(); 
    } 
} 
/* Interrupt service routine. */ 
void ISR_2(void) 
{ 
     i=1; 
} 
</code></pre><p>程序的本意是ISR_2中断产生时，在main当中调用dosomething函数，但是，由于编译器判断在main函数里面没有修改过i，因此可能只执行一次对从i到某寄存器的读操作，然后每次if判断都只使用这个寄存器里面的“i副本”，导致dosomething永远也不会被调用。如果将变量加上volatile修饰，则编译器保证对此变量的读写操作都不会被优化（肯定执行）。此例中i也应该如此说明。　　</p>
<p>volatile用在如下的几个地方： </p>
<p>1、中断服务程序中修改的供其它程序检测的变量需要加volatile； </p>
<p>2、多任务环境下各任务间共享的标志应该加volatile； </p>
<p>3、存储器映射的硬件寄存器通常也要加volatile说明，因为每次对它的读写都可能有不同意义；</p>
<p><strong>举例分析</strong>：　　</p>
<p>代码一:         </p>
<pre><code>int a,b,c;                             
//读取I/O空间0x100端口的内容    
a= inword(0x100);                                                  
b=a;                               
a=inword(0x100)                            
c=a;  
</code></pre><p>代码二:   </p>
<pre><code>volatile int a;   
int a,b,c;                             
//读取I/O空间0x100端口的内容    
a= inword(0x100);                                               
b=a;                               
a=inword(0x100)                        
c=a; 
</code></pre><p>在上述例子中,代码一会被绝大多数编译器优化为如下代码:<br>     a=inword(0x100)<br>     b=a;<br>     c=a;<br>这显然与编写者的目的不相符,会出现I/O空间0x100端口漏读现象,若是增加volatile,像代码二所示的那样,优化器将不会优化掉任何代码　　</p>
<h1 id="struct与typedef关键字"><a href="#struct与typedef关键字" class="headerlink" title="struct与typedef关键字"></a>struct与typedef关键字</h1><p>在网络协议、通信控制、嵌入式系统的C/C++编程中，经常要传送的不是简单的字节流（char型数组），而是多种数据组合起来的一个整体，其表现形式是一个结构体　　</p>
<p>struct关键字的作用是它可以实现对数据的封装,有一点点类似与C++的对象,可以将一些分散的特性对象化,这在编写某些复杂程序时提供很大的方便性.<br>用法:<br>在C中定义一个结构体类型要用typedef:　　</p>
<pre><code>typedef struct Student
{
       int a;
}Stu;
</code></pre><p>声明变量</p>
<pre><code>Stu stu1;　　
</code></pre><p>如果没有typedef声明变量　　</p>
<pre><code>struct Student stu1;
</code></pre><p>这里的Stu实际上就是struct Student的别名，另外这里也可以不写Student</p>
<pre><code>typedef struct
{
       int a;
}Stu;
</code></pre><p>比如编写一个菜单程序,你要知道本级菜单的菜单索引号、焦点在屏上是第几项、显示第一项对应的菜单条目索引、菜单文本内容、子菜单索引、当前菜单执行的功能操作。若是对上述条目单独操作，那么程序的复杂程度将会大到不可想象，这时候结构体struct就开始显现它的威力了：　　</p>
<pre><code>//结构体定义
typedef struct
{
unsigned char CurrentPanel;//本级菜单的菜单索引号
unsigned char ItemStartDisplay; //显示第一项对应的菜单条目索引
unsigned char FocusLine;  //焦点在屏上是第几项
}Menu_Statestruct;

typedef struct
{
unsigned char *MenuTxt; //菜单文本内容
unsigned char MenuChildID;//子菜单索引
void    (*CurrentOperate)();//当前菜单执行的功能操作
}MenuItemStruct;

typedef struct
{
MenuItemStruct  *MenuPanelItem;
unsigned char    MenuItemCount;
}MenuPanelStruct;　　
</code></pre>]]></content>
      
        <categories>
            
            <category> C语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C关键字 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[函数指针总结]]></title>
      <url>/2017/03/29/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>#函数指针定义#<br>函数指针是指向函数的指针变量，即本质是一个指针变量。</p>
<a id="more"></a>
<p>##一般函数指针定义##<br>    int (<em>funcPtr)(char </em>, int);<br>(<em>funcPtr)表明funcPtr是一个指针，(char </em>, int)表明funcPtr是一个函数，函数参数为char *和int，返回值为in</p>
<pre><code>int *(*funcPtr)(char *, int);
</code></pre><p>funcPtr是函数指针，不同的是前面的int *，表明该函数的返回值为int指针。</p>
<p>##函数指针数组##<br>    int (<em>funcPtr[])(char </em>, int);<br>[]的优先级较高，所以funcPtr是数组，里面的元素为函数指针，所指向的函数原型为int funcPtr(char *, int)。</p>
<p>#函数指针传参#<br>函数指针作为一种类型同样可以作为函数的输入与输出。</p>
<pre><code>//作为输入参数
void func(int x, int (*funcPtr)(char *, int));
//作为返回值
void (*func(int x, int y))(int);
</code></pre><p>这里括号的优先级最高，func(int x, int y)表面func是一个函数，前面的*表明返回值为一个指针，(int)说明该指针为一个参数为int的函数，void表示该函数指针的返回值为void。<br> 上面定义了一个返回值为函数指针的函数，那怎么定义一个函数指针指向该函数呢，看下面：</p>
<pre><code>//一步一步来写，首先他是一个函数指针
(*funcPtr)()
//指向的函数的参数为int x, int y
(*funcPtr)(int x, int y)
//指向的函数的返回值为一个指针
(*(*funcPtr)(int x, int y))
//指向的函数的返回值为一个指针，该指针是参数为int的函数指针
(*(*funcPtr)(int x, int y))(int)
//指向的函数的返回值为一个指针，该指针是返回值为void的函数指针
void (*(*funcPtr)(int x, int y))(int)
</code></pre><p>函数指针和函数原型就差一个(*)，如果知道函数原型的话将函数名改成指针就行了。</p>
<pre><code>void (*func(int x, int y))(int);
void (*(*funcPtr)(int x, int y))(int);
</code></pre><p>##typedef定义##<br>另一种简单的方法是使用typedef，将函数指针定义成一种类型后，可以方便的在函数中使用。</p>
<pre><code>typedef void (*funcPtr1)(int);//定义返回值的函数指针
funcPtr1 (*funcPtr)(int x, int y);
</code></pre><p>#函数指针应用#</p>
<p>##普通函数指针应用##<br>一个函数总是占用一段连续的内存区，而函数名就是该函数所占内存区的首地址（入口地址），所以函数名跟数组名很类似，都是指针常量。函数指针就是指向这个入口地址的指针变量，注意函数指针是一个变量。</p>
<pre><code>void f(int);  

int main()  
{  
    //定义函数指针pf并给pf赋值使其指向函数f的入口地址  
    //pf先跟*结合，说明pf是一个指针，然后与括号结合，说明这个指针指向函数  
    void (*pf)(int)=f;  //等价于void (*pf)(int)=&amp;f;  
    pf(1);  
    (*pf)(2);//把函数指针转换成函数名，这个转换并不需要  
    f(3);  
    return 0;  
}  

void f(int a)  
{  
    printf(&quot;%d\n&quot;,a);  
}  
</code></pre><p>void (*pf)(int)=&f;函数名被使用时总是由编译器把它转换为函数指针，&amp;操作符只是显示地说明了编译器将隐式执行的任务 。</p>
<p>##函数指针数组应用##</p>
<pre><code>void Touch();  
void DuanJiong();  
void MeiKai();  
void YinJun();  
void JiangHaiLong();  

void main()  
{  
    int i;  
    scanf(&quot;%d&quot;,&amp;i);  
    switch(i){  
    case 0:  
        Touch();  
        break;  
    case 1:  
        DuanJiong();  
        break;  
    case 2:  
        MeiKai();  
        break;  
    case 3:  
        YinJun();  
        break;  
    case 4:  
        JiangHaiLong();  
        break;  
    }  
}  

void Touch()  
{  
    puts(&quot;我是Touch&quot;);  
}  

void DuanJiong()  
{  
    puts(&quot;我是段炯&quot;);  
}  

void MeiKai()  
{  
    puts(&quot;我是梅凯&quot;);  
}  

void YinJun()  
{  
    puts(&quot;我是殷俊&quot;);  
}  

void JiangHaiLong()  
{  
    puts(&quot;我是木子&quot;);  
}
</code></pre><p>这里只列出了5种情况，如果总共有很多种情况呢，那么就要写一大堆的case语句。而且每次都是从case 1 开始判断。那么是否可以简化代码并且能让程序不做这么多判断呢？这就引出了函数指针数组，顾名思义，就是存放函数指针的数组。现主函数修改如下所示：</p>
<pre><code>void main()  
{  
    int i;  
    void (*p[])()={Touch,DuanJiong,MeiKai,YinJun,JiangHaiLong};  
    scanf(&quot;%d&quot;,&amp;i);  
    p[i]();  
}  
</code></pre><p>void (*p[])()={Touch,DuanJiong,MeiKai,YinJun,JiangHaiLong};声明了一个函数指针数组并赋值。把每个函数的入口地址存入这个数组，这样就不需要用switch语句了，根据下标i直接找到函数入口，省去了判断的时间。</p>
<p>##回调函数##<br>回调函数就是一个通过函数指针调用的函数。如果你把函数的指针(地址)作为参数传递给另一个函数，当这个指针被用为调用它所指向的函数时，我们就说这是回调函数。这里函数指针是作为参数传递给另一个函数。<br>冒泡排序，其代码如下：</p>
<pre><code>void bubbleSort(int *a,int n)  
{  
    int i,j;  
    for(i=1;i&lt;n;i++)  
        for(j=1;j&lt;n-i+1;j++){  
            if(a[j+1]&lt;a[j]){  
                a[j]=a[j]+a[j+1];  
                a[j+1]=a[j]-a[j+1];  
                a[j]=a[j]-a[j+1];  
            }  
        }  
}
</code></pre><p>这个冒泡排序只能对int型数组进行排序。如果我们想写这样一个函数，能同时对int型、float型、double型、char型、结构体类型…数组进行排序，该怎么写呢？也许你会想到函数重载，但是C语言没有这个概念。这里可以用函数指针来实现，其代码比重载更简洁，更高效这也是函数指针的最大用处，参考代码：</p>
<pre><code>//回调函数对多种数据类型数组进行冒泡排序  
//a表示待排序数组  
//n表示数组长度  
//size表示数组元素大小(即每个数组元素占用的字节数)  
//int (*compare)(void *,void *) 声明了一个函数指针，在此作为参数  
//void *类型的指针表示指向未知类型的指针,编译器并不会给void类型的指针分配空间,但我们可以把它进行强制类型转换  
void bubbleSort(void *a,int n,int size,int (*compare)(void *,void *))  
{  
    int i,j,k;  
    char *p,*q;  
    char temp;//交换时暂存一个字节的数据  
    for(i=0;i&lt;n;i++)  
        for(j=0;j&lt;n-i-1;j++){  
            //注意p,q都是字符类型的指针，加一都只移动一个字节  
            p=(char*)a+j*size;  
            q=(char*)a+(j+1)*size;  
            if(compare(p,q)&gt;0)
                {  
                //一个一个字节的交换,从而实现了一个数据类型数据的交换  
                for(k=0;k&lt;size;k++){  
                    temp=*p;  
                    *p=*q;  
                    *q=temp;  
                    p++;  
                    q++;  
                }  
            }  
        }  
}
</code></pre><p>（1）void<em>类型的指针未分配空间的，我们可以把它进行强制类型转换成char</em>。<br>（2）对数组元素进行交换时，并不是一次就把两个数交换了，因为我们并不知道数据的确切类型。但知道数组元素的大小，这样就可以逐个字节进行交换。比如对int类型（占用四个字节）的值a、b进行交换，先交换a、b的第一个字节，然后第二个字节…<br>理解了这个代码，该怎么用呢？参数要传入一个函数指针，于是必须要写一个比较两个数大小的函数，且函数原型必须与int (<em>compare)(void </em>,void *)相匹配。下面是测试各种类型数组排序的代码：</p>
<pre><code>#include&lt;stdio.h&gt;  
typedef struct{  
    int data;  
}Node;  

//函数声明  
int charCompare(void *a,void *b);  
int intCompare(void *a,void *b);  
int floatCompare(void *a,void *b);  
int doubleCompare(void *a,void *b);  
int nodeCompare(void *a,void *b);  
void bubbleSort(void *a,int n,int size,int (*compare)(void *,void *));  

//比较两个char类型的数据的大小，a&gt;b返回1，a&lt;b返回-1，a==b返回0  
int charCompare(void *a,void *b)  
{  
    if(*(char*)a==*(char*)b)  
        return 0;  
    return *(char*)a&gt;*(char*)b?1:-1;  
}  
//比较两个int类型的数据的大小  
int intCompare(void *a,void *b)  
{  
    if(*(int*)a==*(int*)b)  
        return 0;  
    return *(int*)a&gt;*(int*)b?1:-1;  
}  
//比较两个float类型的数据的大小  
int floatCompare(void *a,void *b)  
{  
    if(*(float*)a==*(float*)b)  
        return 0;  
    return *(float*)a&gt;*(float*)b?1:-1;  
}  
//比较两个double类型的数据的大小  
int doubleCompare(void *a,void *b)  
{  
    if(*(double*)a==*(double*)b)  
        return 0;  
    return *(double*)a&gt;*(double*)b?1:-1;  
}  
//比较两个结构体类型（Node）的数据的大小  
int nodeCompare(void *a,void *b)  
{  
    if(((Node*)a)-&gt;data == ((Node*)b)-&gt;data)  
        return 0;  
    return ((Node*)a)-&gt;data &gt; ((Node*)b)-&gt;data ? 1 : -1;  
}  

void main()  
{  
    int i=0;  
    //用于测试的各种类型数组  
    char c[]={&apos;d&apos;,&apos;a&apos;,&apos;c&apos;,&apos;e&apos;,&apos;b&apos;};  
    int a[]={3,2,4,0,1};  
    float f[]={4.4,5.5,3.3,0,1};  
    double b[]={4.4,5.5,3.3,0,1};  
    Node n[]={{2},{0},{1},{4},{3}};  

    //对各种数组进行排序  
    puts(&quot;对char类型数组进行排序：&quot;);  
    bubbleSort(c,5,sizeof(char),charCompare);  
    for(i=0;i&lt;5;i++)  
        printf(&quot;%c &quot;,c[i]);  
    puts(&quot;&quot;);  

    puts(&quot;对int类型数组进行排序：&quot;);  
    bubbleSort(a,5,sizeof(int),intCompare);  
    for(i=0;i&lt;5;i++)  
        printf(&quot;%d &quot;,a[i]);  
    puts(&quot;&quot;);  

    puts(&quot;对float类型数组进行排序：&quot;);  
    bubbleSort(f,5,sizeof(float),floatCompare);  
    for(i=0;i&lt;5;i++)  
        printf(&quot;%.2f &quot;,f[i]);  
    puts(&quot;&quot;);  

    puts(&quot;对double类型数组进行排序：&quot;);  
    bubbleSort(b,5,sizeof(double),doubleCompare);  
    for(i=0;i&lt;5;i++)  
        printf(&quot;%.2lf &quot;,b[i]);  
    puts(&quot;&quot;);  

    puts(&quot;对结构体（Node）类型数组进行排序：&quot;);  
    bubbleSort(n,5,sizeof(Node),nodeCompare);  
    for(i=0;i&lt;5;i++)  
        printf(&quot;%d &quot;,n[i].data);  
    puts(&quot;&quot;);  
}  


//回调函数对多种数据类型数组进行冒泡排序  
//a表示待排序数组  
//n表示数组长度  
//size表示数组元素大小(即每个数组元素占用的字节数)  
//int (*compare)(void *,void *) 声明了一个函数指针，在此作为参数  
//void *类型的指针表示指向未知类型的指针,编译器并不会给void类型的指针分配空间,但我们可以把它进行强制类型转换  
void bubbleSort(void *a,int n,int size,int (*compare)(void *,void *))  
{  
    int i,j,k;  
    char *p,*q;  
    char temp;//交换时暂存一个字节的数据  
    for(i=0;i&lt;n;i++)  
        for(j=0;j&lt;n-i-1;j++){  
            //注意p,q都是字符类型的指针，加一都只移动一个字节  
            p=(char*)a+j*size;  
            q=(char*)a+(j+1)*size;  
            if(compare(p,q)&gt;0){  
                //一个一个字节的交换,从而实现了一个数据类型数据的交换  
                for(k=0;k&lt;size;k++){  
                    temp=*p;  
                    *p=*q;  
                    *q=temp;  
                    p++;  
                    q++;  
                }  
            }  
        }  
}
</code></pre><p>#指针函数#<br>指针函数是指带指针的函数，即本质是一个函数。函数返回类型是某一类型的指针<br>    int <em>f(int a, int b);<br>此函数有返回值，返回值为int </em>，即返回值是指针类型的。<br>上面的函数声明又可以写成如下形式：<br>int<em> f(int a, int b);<br>让指针标志 </em> 与int紧贴在一起，而与函数名f间隔开，这样看起来就明了些了，f是函数名，返回值类型是一个int类型的指针。  </p>
<p>#指针函数应用#<br>返回指针的函数，确切的说是返回指针类型的函数</p>
<pre><code>#include&lt;stdio.h&gt;  
//创建长度为n的动态数组  
//这是一个指针函数  
int* array(int n)  
{  
    int *a=(int*)malloc(sizeof(int)*n);  
    return a;  
}  
void main()  
{   
    int i,n=3;  
    int *a=array(n);  
    for(i=0;i&lt;n;i++)  
        a[i]=i;  
    free(a);//注意a不用时要free掉，否则内存泄露  
}
</code></pre><p>参考文章<br><a href="https://wuyuans.com/2013/09/function-pointer" target="_blank" rel="external">函数指针总结</a><br><a href="函数指针与指针函数">http://blog.csdn.net/touch_2011/article/details/6984029</a></p>
]]></content>
      
        <categories>
            
            <category> C语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C指针 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[单片机寄存器总结]]></title>
      <url>/2017/03/29/%E5%8D%95%E7%89%87%E6%9C%BA%E5%AF%84%E5%AD%98%E5%99%A8%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>#前言#<br>51单片机内部有一个CPU用来运算、控制，<br>四个并行I/O口，分别是P0、P1、P2、P3，<br>ROM存放程序，<br>RAM存放中间结果，<br>此外包括定时/计数器，串行I/O口，中断系统，以及一个内部的时钟电路。<br>在单片机中有一些独立的存储单元是用来控制这些器件的，被称之为特殊功能寄存器（SFR）。这样的特殊功能寄存器在51单片机中共有21个并且都是可位寻址的。<br><a id="more"></a></p>
<p>#单片机寄存器#<br>21个特殊功能寄存器（52系列是26个）不连续地分布在128个字节的SFR存储空间中，地址空间为80H-FFH，在这片SFR空间中，包含有128个位地址空间，地址也是80H-FFH，但只有83个有效位地址，可对11个特殊功能寄存器的某些位作位寻址操作（其地址能被8整除的都可以位寻址）。<br>列表如下(其中带*号的为52系列所增加的特殊功能寄存器）：<br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-5-4/81635553-file_1493899850639_63e5.png" alt=""><br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-5-4/30955010-file_1493899865138_eb35.png" alt=""><br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-5-4/17654953-file_1493899867880_18d8.png" alt=""><br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-5-4/7673607-file_1493900122170_1ed2.png" alt=""></p>
<p>##B寄存器##<br>在做乘、除法时放乘数或除数，不做乘除法时，可以随便使用。</p>
<p>##ACC累加器##<br>自身带有全零标志Z，若A＝0则Z＝1；若A≠0则z＝0。该标志常用作程序分枝转移的判断条件。  </p>
<p>##PSW程序状态字##<br>里面放了CPU工作时的很多状态，可以了解CPU的当前状态，并作出相应的处理<br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-5-4/33287705-file_1493900153625_7e58.png" alt=""><br><strong>CY进位标志：</strong><br>8051中的运算器是一种8位的运算器，8位运算器只能表示到0-255，如果做加法的话，两数相加可能会超过255，这样最高位就会丢失，造成运算的错误。最高位就进到CY中来。有进、借位，CY＝1；无进、借位，CY＝0  </p>
<p><strong>AC辅助进、借位(高半字节与低半字节间的进、借位)：</strong>  </p>
<p>　　例：57H+3AH（01010111+00111010）  </p>
<p><strong>F0用户标志位：</strong><br>由用户（编程人员）决定什么时候用，什么时候不用。  </p>
<p><strong>RS1、RS0工作寄存器组选择位：</strong><br>通过修改PSW中的RS1、RS0两位的状态，就能任选一个工作寄存器区。这个特点提高了MCS-51现场保护和现场恢复的速度。对于提高CPU的工作效率和响应中断的速度是很有利的。若在一个实际的应用系统中，不需要四组工作寄存器，那么这个区域中多余单元可以作为一般的数据缓冲器使用。<br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-5-4/87784798-file_1493900438517_f754.png" alt="">  </p>
<p><strong>0V溢出标志位：</strong><br>　　运算结果按补码运算理解。有溢出，OV=1；无溢出，OV＝0。 </p>
<p><strong>P奇偶校验位：</strong><br>它用来表示运算结果中二进制数位“1”的个数的奇偶性。若为奇数，则P=1，否则为0。运算结果有奇数个1，P＝1；运算结果有偶数个1，P＝0。<br>　　例：某运算结果是78H（01111000），显然1的个数为偶数，所以P=0。</p>
<p>##IP中断优先级控制寄存器##<br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-5-4/78057943-file_1493900767028_96f.jpg" alt=""><br>可按位寻址，地址位B8H  </p>
<ul>
<li>（IP.7）：保留  </li>
<li>（IP.6）：保留<br>PT2（IP.5）：定时2中断优先（8052用）<br>PS （IP.4）：串行口中断优先<br>PT1（IP.3）：定时1中断优先<br>PX1（IP.2）：外中断INT1中断优先<br>PT0（IP.1）：定时器0中断优先<br>PX0（IP.0）：外部中断INT0的中断优先<br>##P0,P1,P2,P3寄存器##<br>四个并行输入/输出口（I/O）的寄存器，对应着管脚的输出。<br>##IE中断充许寄存器##<br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-5-4/63809272-file_1493900927623_5701.png" alt=""><br>可按位寻址，地址：A8H<br>EA （IE.7）：EA=0时，所有中断禁止（即不产生中断）；EA=1时，各中断的产生由个别的允许位决定  </li>
<li>（IE.6）：保留<br>ET2（IE.5）：定时2溢出中断充许（8052用）<br>ES （IE.4）：串行口中断充许（ES=1充许，ES=0禁止）<br>ET1（IE.3）：定时1中断充许<br>EX1（IE.2）：外中断INT1中断充许<br>ET0（IE.1）：定时器0中断充许<br>EX0（IE.0）：外部中断INT0的中断允许  </li>
</ul>
<p>##TMOD定时器方式控制寄存器##<br>不按位寻址，地址89H<br><strong>GATE</strong> ：定时操作开关控制位，当GATE=1时，INT0或INT1引脚为高电平，同时TCON中的TR0或TR1控制位为1时，计时/计数器0或1才开始工作。若GATE=0，则只要将TR0或TR1控制位设为1，计时/计数器0或1就开始工作。<br><strong>C/T</strong> ：定时器或计数器功能的选择位。C/T=1为计数器，通过外部引脚T0或T1输入计数脉冲。C/T=0时为定时器，由内部系统时钟提供计时工作脉冲。<br><strong>M1 、M0：T0、T1工作模式选择位</strong> </p>
<p>##TCON定时器控制寄存器##<br>可按位寻址，地址位88H<br>TF1：定时器T1溢出标志，可由程序查询和清零，TF1也是中断请求源，当CPU响应T1中断时由硬件清零。<br>TF0：定时器T0溢出标志，可由程序查询和清零，TF0也是中断请求源，当CPU响应T0中断时由硬件清零。<br>TR1：T1充许计数控制位，为1时充许T1计数。<br>TR0：T0充许计数控制位，为1时充许T0计数。<br>IE1：外部中断1请示源（INT1，P3.3）标志。IE1＝1，外部中断1正在向CPU请求中断，当CPU响应该中断时由硬件清“0”IE1（边沿触发方式）。<br>IT1：外部中断源1触发方式控制位。IT1＝0，外部中断1程控为电平触发方式，当INT1（P3.3）输入低电平时，置位IE1。<br>IE0：外部中断0请示源（INT0，P3.2）标志。IE0＝1，外部中断1正在向CPU请求中断，当CPU响应该中断时由硬件清“0”IE0（边沿触发方式）。<br>IT0：外部中断源0触发方式控制位。IT0＝0，外部中断1程控为电平触发方式，当INT0（P3.2）输入低电平时，置位IE0。  </p>
<p>##SCON—-串行通信控制寄存器##<br>可寻址的专用寄存器，用于串行数据的通信控制，单元地址是98H<br>(1)SM0、SM1：串行口工作方式控制位。<br>　　SM0，SM1    工作方式<br>　　　　　00      方式0－波特率由振荡器频率所定：振荡器频率/12<br>　　　　　01      方式1－波特率由定时器T1或T2的溢出率和SMOD所定：2SMOD ×(T1溢出率)/32<br>　　　　　10      方式2－波特率由振荡器频率和SMOD所定：2SMOD ×振荡器频率/64<br>　　　　　11      方式3－波特率由定时器T1或T2的溢出率和SMOD所定：2SMOD ×(T1溢出率)/32  </p>
<p>(2)SM2：多机通信控制位。&lt; br&gt;    多机通信是工作于方式2和方式3，SM2位主要用于方式2和方式3。接收状态，当串行口工作于方式2或3，以及SM2=1时，只有当接收到第9位数据（RB8）为1时，才把接收到的前8位数据送入SBUF，且置位RI发出中断申请，否则会将接受到的数据放弃。当SM2=0时，就不管第位数据是0还是1，都难得数据送入SBUF，并发出中断申请。<br>工作于方式0时，SM2必须为0。 </p>
<p>(3)REN：允许接收位。&lt; br&gt;    REN用于控制数据接收的允许和禁止，REN=1时，允许接收，REN=0时，禁止接收。  </p>
<p>(4)TB8：发送接收数据位8。&lt; br&gt;    在方式2和方式3中，TB8是要发送的——即第9位数据位。在多机通信中同样亦要传输这一位，并且它代表传输的地址还是数据，TB8=0为数据，TB8=1时为地址。  </p>
<p>(5)RB8：接收数据位8。<br>在方式2和方式3中，RB8存放接收到的第9位数据，用以识别接收到的数据特征。 </p>
<p>(6)TI：发送中断标志位。<br>可寻址标志位。方式0时，发送完第8位数据后，由硬件置位，其它方式下，在发送或停止位之前由硬件置位，因此，TI=1表示帧发送结束，TI可由软件清“0”。  </p>
<p>(7)RI：接收中断标志位。<br>可寻址标志位。接收完第8位数据后，该位由硬件置位，在其他工作方式下，该位由硬件置位，RI=1表示帧接收完成。  </p>
<p>##PCON电源管理寄存器##<br>PCON主要是为CHMOS型单片机的电源控制而设置的专用寄存器，单元地址是87H<br>在CHMOS型单片机中，除SMOD位外，其他位均为虚设的，SMOD是串行口波特率倍增位，当SMOD=1时，串行口波特率加倍。系统复位默认为SMOD=0。   </p>
<p>#文章来源#<br><a href="http://blog.sina.com.cn/s/blog_a05b986d0101545c.html" target="_blank" rel="external">单片机寄存器</a></p>
]]></content>
      
        <categories>
            
            <category> 单片机 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 寄存器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Notepad使用教程]]></title>
      <url>/2017/03/29/Notepad++%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>#Notepad++简介#<br>Notepad++是Windows平台上一款强大的文本编辑器，轻量化，可定制性强，加上功能强大的插件，可以胜任绝大部分工作。<br><a id="more"></a></p>
<h1 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h1><h2 id="书签功能"><a href="#书签功能" class="headerlink" title="书签功能"></a>书签功能</h2><p>书签是一种特殊的行标记，显示在编辑器的书签栏处。使用书签，可以很容易转到指定行处，进行一些相关的操作。<br>在任意行点击左边栏或者按Ctrl+F2会出现蓝色小点，点击蓝色小点或按Ctrl+F2可以取消该行书签。F2光标移动到上一个书签，Shift+F2光标移动到下一个书签。<br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-5-3/54746767-file_1493784837186_87ab.jpg" alt="">  </p>
<h2 id="多视图功能"><a href="#多视图功能" class="headerlink" title="多视图功能"></a>多视图功能</h2><p>可以在 Notepad++ 中打开第二个编辑窗口，这同时查看两个文档了（也可以是同一个文档）。如果它们是同一个文档的话，你就可以快速比较这两个文档，或者同时编辑文档的两个地方，而不需要滚动或通过书签来做到这点。<br>对于同一文件，在文件标签项上右键-复制到另一视图<br>对于不同文件，在文件标签项上右键-移动到另一视图<br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-5-3/88949451-file_1493786049391_4822.jpg" alt=""></p>
<h2 id="折叠功能"><a href="#折叠功能" class="headerlink" title="折叠功能"></a>折叠功能</h2><p>根据文档语言可以隐藏文档中的多行文本，文本块分成多个层次，可以折叠父层的文本块，折叠后只会显示文本块的第一行内容。取消折叠文本块（展开或取消折叠）将会再次显示折叠的文本块。<br>折叠所有层次： Alt+0<br>展开所有层次： Alt+shift+0<br>折叠当前层次： Ctrl+Alt+f<br>展开当前层次： Ctrl+Alt+Shift+f<br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-5-3/47060803-file_1493786444806_15c3b.jpg" alt=""></p>
<h2 id="行定位功能"><a href="#行定位功能" class="headerlink" title="行定位功能"></a>行定位功能</h2><p>用于快速跳至某一行。Ctrl+g会弹出一个对话框，可以选择输入绝对行号跳转或者相对于当前行做偏移量跳转。<br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-5-3/8268849-file_1493786549851_6596.jpg" alt=""></p>
<h2 id="向后回滚和向前回滚"><a href="#向后回滚和向前回滚" class="headerlink" title="向后回滚和向前回滚"></a>向后回滚和向前回滚</h2><p>向后回滚即撤销： Ctrl+z，<br>向前回滚即回到前一步骤： Ctrl+y。  </p>
<h2 id="快匹配功能"><a href="#快匹配功能" class="headerlink" title="快匹配功能"></a>快匹配功能</h2><p>选择一个括号，按Ctrl+b会跳转到与它对应的另外一半括号处。此处括号包括”(“和”{“。</p>
<h2 id="颜色标记功能"><a href="#颜色标记功能" class="headerlink" title="颜色标记功能"></a>颜色标记功能</h2><p>给内容用不同的颜色做标记，选择要标记的文本然后点击右键-&gt;Style token，选择一个标记即可。也可以通过点击右键选择删除颜色标记Remove style。</p>
<h2 id="tab键转换成空格"><a href="#tab键转换成空格" class="headerlink" title="tab键转换成空格"></a>tab键转换成空格</h2><p>在设置-首选项-&gt;语言页面可以选择“以空格代替Tab”，同时可以配置一个Tab键替换成几个空格。可以很方便的按Tab键进行缩进，按Shift+Tab进行反向缩进。<br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-5-3/70923195-file_1493787423426_56b8.jpg" alt="">  </p>
<h2 id="显示符号功能"><a href="#显示符号功能" class="headerlink" title="显示符号功能"></a>显示符号功能</h2><p>在视图选项卡中能找到显示符号功能，可以显示空格、制表键、换行等 可以方便编辑，尤其可以防止无意中加入好多不需要的空格。</p>
<h1 id="快捷键大全"><a href="#快捷键大全" class="headerlink" title="快捷键大全"></a>快捷键大全</h1><p>文件菜单<br>快捷键    动作<br>Ctrl-O    打开文件<br>Ctrl-N    新建文件<br>Ctrl-S    保存文件<br>Ctrl-Alt-S    另存为<br>Ctrl-Shift-S    保存所有<br>Ctrl-P    打印<br>Alt-F4    退出<br>Ctrl-Tab    下一个文档 (显示所有打开的文件列表)。可以禁止此快捷键 - 参见 设置/首选项/全局.<br>Ctrl-Shift-Tab    上一个文档 (显示所有打开的文件列表). 可以禁止此快捷键 - 同上.<br>Ctrl-W    关闭当前文档  </p>
<p>编辑菜单<br>快捷键    动作<br>Ctrl-C    拷贝<br>Ctrl-Insert    拷贝<br>Ctrl-Shift-T    拷贝当前行<br>Ctrl-X    剪切<br>Shift-Delete    剪切<br>Ctrl-V    粘贴<br>Shift-Insert    粘贴<br>Ctrl-Z    撤销<br>Alt-Backspace    撤销<br>Ctrl-Y    重做<br>Ctrl-A    选择全部<br>Alt-Shift-方向键, 或者 Alt + 鼠标左键    列模式选择<br>Ctrl + 鼠标左键    开始新的选择区域。仅在多块区域有效<br>ALT-C    列编辑<br>Ctrl-D    复制当前行<br>Ctrl-T    当前行和前一行交换<br>Ctrl-Shift-Up    当前行或当前单个选中文本块上移<br>Ctrl-Shift-Down    当前行或当前单个选择文本块下移<br>Ctrl-L    删除当前行<br>Ctrl-I    分割当前行<br>Ctrl-J    连结行<br>Ctrl-G    打开转到对话框<br>Ctrl-Q    行注释/取消行注释<br>Ctrl-Shift-Q    块注释<br>Tab (一行或多行被选中)    插入制表符或空格 (缩进)<br>Shift-Tab (一行或多行被选中)    删除行首制表符或空格(取消缩进)<br>Ctrl-BackSpace    删除到单词开头<br>Ctrl-Delete    删除到单词末尾<br>Ctrl-Shift-BackSpace    删除到行首<br>Ctrl-Shift-Delete    删除到行尾<br>Ctrl-U    转换为小写<br>Ctrl-Shift-U    转换为大写<br>Ctrl-B    转到匹配括号处<br>Ctrl-Space    显示函数参数提示列表<br>Ctrl-Shift-Space    显示函数提示列表<br>Ctrl-Enter    显示单词提示列表<br>Ctrl-Alt-R    文本方向从右到走<br>Ctrl-Alt-L    文本方向从左到右<br>Enter    回车插入新行或分割文本到新行<br>Shift-Enter    插入新行或分割文本到新行  </p>
<p>搜索菜单<br>快捷键    操作<br>Ctrl-F    打开查找对话框<br>Ctrl-H    打开 查找 / 替换 对话框<br>F3    查找下一个<br>Shift-F3    查找上一个<br>Ctrl-Shift-F    在文件中查找<br>F7    切换到搜索结果窗口（即版本5.2之前的激活子视图）<br>Ctrl-Alt-F3    查找 (快速) 下一个<br>Ctrl-Alt-Shift-F3    查找 (快速) 上一个<br>Ctrl-F3    选择并查找下一个（即版本5.6.5之前中的查找（快速）下一个）<br>Ctrl-Shift-F3    选择并查找下一个(即版本5.6.5之前的查找 (快速) 上一个)<br>F4    转到下一个结果<br>Shift-F4    转到上一个结果<br>Ctrl-Shift-I    增量搜索<br>Ctrl-n    向下跳转（到下一个样式n标记的文本。 n 从1到5, 对于默认查找样式为0<br>Ctrl-Shift-n    向上跳转 (到上一个样式n标记的文本。n 从1到5，对于默认查找样式为0<br>Ctrl-F2    标记/取消标记书签<br>F2    转到下一个书签<br>Shift-F2    转到上一个书签  </p>
<p>视图菜单<br>快捷键    动作<br>Ctrl-(Keypad-/Keypad+)    或者 Ctrl + 鼠标滚轮按钮 (如果你的鼠标有这个键的话) 放大 (+ 或者 向上键) 和 缩小 (- 或者 向下键)<br>Ctrl-Keypad/    恢复视图到原始大小<br>F11    转到/退出全屏视图<br>F12    转到/退出切换快捷视图<br>Ctrl-Alt-F    折叠当前大纲级别<br>Ctrl-Alt-Shift-F    展开当前大纲级别<br>Alt-0    折叠所有<br>Alt-(1~8)    折叠大纲级别 (1~8)<br>Alt-Shift-0    展开所有<br>Alt-Shift-(1~8)    展开大纲级别 (1~8)  </p>
<p>运行菜单<br>快捷键    操作<br>F5    打开运行对话框<br>Alt-F1    获取PHP帮助<br>Alt-F2    Google 搜索<br>Alt-F3    Wikipedia 搜索<br>Alt-F5    打开文件(当前光标处的文件名)<br>Alt-F6    在新的实例中打开文件 (当前光标处的文件名)<br>Ctrl-Alt-Shift-R    在 Chrome 中打开<br>Ctrl-Alt-Shift-X    在 Firefox 中打开<br>Ctrl-Alt-Shift-I    在 IE 中打开<br>Ctrl-Alt-Shift-F    在 Safari 中打开<br>Ctrl-Alt-Shift-O    通过 Outlook 发送  </p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://www.open-open.com/lib/view/open1409819851650.html" target="_blank" rel="external">Notepad++使用教程</a></p>
]]></content>
      
        <categories>
            
            <category> 软件工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NotePad </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu常见问题]]></title>
      <url>/2017/03/29/Ubuntu%E8%AF%86%E5%88%AB%E9%A9%B1%E5%8A%A8%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Ubuntu下经常碰到这样那样的问题，将这些问题总结起来方便解决<br><a id="more"></a></p>
<h1 id="USB无法识别"><a href="#USB无法识别" class="headerlink" title="USB无法识别"></a>USB无法识别</h1><p><strong>情况：Host USb device connections disabled</strong></p>
<p><img src="http://ogdiq8qnd.bkt.clouddn.com/17-4-17/25909527-file_1492393565642_9638.png" alt=""></p>
<p>解决：<br>在Windows中的运行下输入services.MSC,进入系统服务列表项，启动USB服务。<br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-4-17/85046379-file_1492393667066_8bff.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Ubuntu </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[嵌入式编程风格]]></title>
      <url>/2017/03/29/%E5%B5%8C%E5%85%A5%E5%BC%8Fc%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>编程的总则: 编程首要是要考虑程序的可行性，然后是可读性、可移植性、健壮性以及可测试性。　　<br><a id="more"></a><br>原文为<a href="http://pan.baidu.com/s/1hsxFRZu" target="_blank" rel="external">C语言进阶之道</a>中的编程风格章节 </p>
<h1 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h1><p>（1）代码缩进空格数为4个。若是可能，尽量用空格来代替Tab键，因为有些编译器不支持Tab键</p>
<pre><code>BOOL BufClr(UINT8 * dest,UINT32 size)  
{  
    if(NULL ==dest || NULL==size)  
    {  
        return FALSE;  
    }  
}  
</code></pre><p>（2）较长的语句要分2行来书写，并用‘\’符号隔开。</p>
<pre><code>if((UINT8) uncrc != Packet.down_ser.mCrc[0] \  
                 ||(UINT8)(uncrc&gt;&gt;8)!= Packet.down_ser.mCrc[1])  
{  
    BELL(ON);  
}  
</code></pre><p>（3）函数代码的参数过长，分多行来书写。  </p>
<pre><code>void UARTSendAndRecv(UINT8 *ucSendBuf,  
    UINT8 ucSendLength,  
    UINT8 *ucRecvBuf,  
    UINT8 ucRecvLength)  
{  
    …  
}  
</code></pre><p>（4）if、do、while、switch、for、case、default等关键字，必须加上大括号{}。</p>
<pre><code>    if(bSendEnd)  
{  
    BELL(ON);  
}  
else  
{  
    BELL(OFF);  
}  

switch(ucintStatus)  
{  
    case USB_INT_EP2_OUT:  
    {  
        USBCiEP2Send(USBMainBuf,ucrecvLen);  
        USBCiEP1Send(USBMainBuf,ucrecvLen);  
    }  
    break;  
    case USB_INT_EP2_IN:  
    {  
        USBCiWriteSingleCmd (CMD_UNLOCK_USB);  
    }  
    break;  
    …  
}  
</code></pre><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>（1）边写代码边注释，修改代码同时修改相应的注释，以保证注释与代码的一致性。不再有用的注释要删除。  注释应当准确、易懂，防止注释有二义性。错误的注释不但无益反而有害。  尽量避免在注释中使用缩写，特别是不常用缩写。注释的位置应与被描述的代码相邻，可以放在代码的上方或右方，不可放在下方。  </p>
<p>（2）说明性文件必选在文件头着重说明，例如<em>.c、</em>.h文件  </p>
<p>（3）函数头应该进行注释，例如函数名称、输入参数、返回值、功能说明。  </p>
<pre><code>******将所有参数写入AT24C64,共4字节********************* 
*说明:将表号和用户电量共四字节数据写入AT24C64中 
*入口参数: 
*    1.数据间接寻址地址-buf 
*    2.写入到AT24C64的地址字-addh,addrl 
*    3.写入字节数-count 
*出口参数:1表示写成功,0表示写失败 
***************************************************************/  
bit write_byte( unsigned charchar * buf,        
            unsigned char addrh,  
            unsigned char addrl,  
            unsigned char count)  
{  
……  
}  
</code></pre><p>（4）全局变量要注释其功能，若为关键的局部变量同样需要注释其功能。</p>
<pre><code>volatile UINT8 __ucSysMsg=SYS_IDLE;  
void SYSSetMsgPriority(void)  
{  
    SYSMSG Msgt;//临时存储消息  
    UINT8 i;  
}  
</code></pre><p>（5）复杂的宏定义同样要加上注释。</p>
<pre><code>/* SYS_MSG_MAP 建立一个消息映射 
   宏参数NAME：消息映射表的名字 
   宏参数NUM_OF_MSG:消息映射的个数 
*/  
#define SYS_MSG_MAP(NAME,NUM_OF_MSG) do/  
{  /  
    DEFINE_MSG_NAME((NAME));/  
    UINT8 i;/  
    for(i=0;i&lt; NUM_OF_MSG;i++)/  
    {/  
        ININ_CUR_MSG(i)/  
    }/  
}while(0)  
</code></pre><p>（6）复杂的结构体同样要加上注释。  </p>
<pre><code>奇偶校验结构体*/  
typedef struct _ PKT_PARITY  
{  
    UINT8 m_ucHead1;      //首部1  
    UINT8 m_ucHead2;      //首部2  
    UINT8 m_ucOptCode;    //操作码  
    UINT8 m_ucDataLength; //数据长度  
    UINT8 m_szDataBuf[16];//数据  
    UINT8 m_ucParity;     //奇偶校验值  
}PKT_PARITY;  
</code></pre><p> （7）相对独立的语句组注释。对这一组语句做特别说明，写在语句组上侧，和此语句组之间不留空行，与当前语句组的缩进一致。注意，说明语句组的注释一定要写在语句组上面，不能写在语句组下面。</p>
<h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><p>（1）变量命名<br>局部变量以小写字母命名；<br>全局变量以首字母大写方式命名（骆驼式）；<br>定义类型和宏定义常数以大写字母命名；<br>变量的作用域越大，它的名字所带有的信息就应该越多。<br>局部变量：   int  student_age;<br>全局变量：   int  StudentAge;<br>宏定义常数：#define STUDENT_NUM  10<br>类型定义：   typedef  INT16S  int;  </p>
<p>（2） 变量命名要注意缩写而且让人简单易懂，若是特别缩写要详细说明。<br>经常用到的缩写如：<br>Count 可缩写为Cnt<br>Message 可缩写为Msg<br>Packet 可缩写为Pkt<br>Temp 可缩写为Tmp<br>平时不经常用到的缩写，要注释：<br>SerialCommunication 可缩写为SrlComm //串口通信变量<br>SerialCommunicationStatus 可缩写为SrlCommStat //串口通信状态变量  </p>
<p>（3）全局变量和全局函数的命名一定要详细，不惜多用几个单词，例如函数UARTPrintfStringForLCD<br>因为它们在整个项目的许多源文件中都会用到，必须让使用者明确这个变量或函数是干什么用的。局部变量和只在一个源文件中调用的内部函数的命名可以。简略一些，但不能太短，不要使用单个字母做变量名，只有一个例外：用i、j 、k 做循环变量是可以的。  </p>
<p>（4）用于编译开关的文件头，必须加上当前文件名称，防止编译时产生冲突。<br>例如在UARTInterface.h 头文件中，必须加上以下内容</p>
<pre><code>#ifndef __UARTINTERFACE_H__
#define __UARTINTERFACE_H__
extern void UARTPrintfString(CONST INT8* str);
extern void UARTSendNBytes(UINT8 *ucSendBytes,UINT8 ucLen);
…… //其他外部声明的代码
#endif
</code></pre><p>（5）禁止用汉语拼音作为标识符名称，可读性极差  </p>
<p>（6）建议名称间的区别要显而易见。使用标识符名称要注意的一个相关问题是发生在名称之间只有一个字符或少数字符不同的情况，特别是名称比较长时，当名称间的区别很容易被误读时问题就比较显著，比如1（数字1）和l（L 的小写）、0 和O、2 和Z、5 和S，或者n 和h。  </p>
<h1 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h1><p>（1）不要编写太复杂的复合表达式；  </p>
<pre><code>i = a &gt;= b &amp;&amp; c &lt; d &amp;&amp; c + f &lt;= g + h;  //复合表达式过于复杂
</code></pre><p>（2）不要有多用途的复合表达式  </p>
<pre><code>d = (a = b + c) + r ;                   //应拆分为两个语句：
a = b + c;
d = a + r;
</code></pre><p>（3）如果代码行中的运算符比较多，用括号确定表达式的操作顺序，避免使用默认的优先级。  </p>
<pre><code>if(a | b &amp;&amp; a &amp; c)                      //不良的风格
if((a | b) &amp;&amp; (a &amp; c))                  //良好的风格
</code></pre><h1 id="基本语句"><a href="#基本语句" class="headerlink" title="基本语句"></a>基本语句</h1><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p>（1）布尔变量与零值比较<br>不可将布尔变量直接与TRUE、FALSE 或者1、0 进行比较。<br>根据布尔类型的语义，零值为“假”（记为FALSE），任何非零值都是“真”（记为TRUE）。TRUE的值究竟是什么并没有统一的标准。例如Visual C++ 将TRUE 定义为1，而Visual Basic 则将TRUE 定义为-1。<br>例：假设布尔变量名字为flag，它与零值比较的标准if 语句如下：  </p>
<pre><code>if (flag)                // 表示flag为真时满足条件
if (!flag)               // 表示flag为假时满足条件 
</code></pre><p>其它的用法都属于不良风格，例如：</p>
<pre><code>if (flag == TRUE)
if (flag == 1 )
if (flag == FALSE)
if (flag == 0)
</code></pre><p>（2）整型变量与零值比较<br>应当将整型变量用“==”或“！=”直接与0比较。<br>例：假设整型变量为value，它与零值比较的标准if 语句如下： </p>
<pre><code>if (value == 0)
if (value != 0)  
</code></pre><p>不可模仿布尔变量的风格而写成 </p>
<pre><code>if (value)                       // 会让人误解 value 是布尔变量
if (!value)
</code></pre><p>（3）浮点变量与零值比较<br>不可将浮点变量用“==”或“！=”与任何数字比较。<br>千万要留意，无论float 还是double 类型变量，都有精度限制。所以一定要避免将浮点变量用“==”或“！=”与数字比较，应该设法转化成“&gt;=”或“&lt;=”形式。<br>假设浮点变量的名字为x，应当将  </p>
<pre><code>if (x == 0.0)                       // 隐含错误的比较
</code></pre><p>转化为</p>
<pre><code>if ((x&gt;=-EPSINON) &amp;&amp; (x&lt;=EPSINON))  //EPSINON 是精度
</code></pre><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>（1）一些常量(如圆周率PI)或者常需要在调试时修改的参数最好用#define定义，但要注意宏定义只是简单的替换，因此有些括号不可少。  </p>
<p>（2）不要轻易调用某些库函数，因为有些库函数代码很长(我是反对使用printf之类的库函数的，但是是一家之言，并不勉强各位)。 </p>
<p>（3）对各运算符的优先级有所了解，记不得没关系，加括号就是，千万不要自作聪明说自己记得很牢。 </p>
<p>（4）不管有没有无效分支，switch函数一定要defaut这个分支。一来让阅读者知道程序员并没有遗忘<br>default,并且防止程序运行过程中出现的意外(健壮性)。  </p>
<p>（5）函数的参数和返回值没有的话最好使用void。 </p>
<p>（6）一些常数和表格之类的应该放到code中去以节省RAM。  </p>
<p>（7）程序编完编译看有多少code多少data，注意不要使堆栈为难。  </p>
<p>（8）减少函数本身或函数间的递归调用  </p>
<p>（9）编写可重入函数时，若使用全局变量，则应通过关中断、信号量（即P、V操作）等手段对其加以保护。</p>
<p>（10）在多重循环中，应将最忙的循环放在最内层  </p>
<p>（11）避免循环体内含判断语句，应将循环语句置于判断语句的代码块之中。  </p>
<p>（12）系统运行之初，要初始化有关变量及运行环境，防止未经初始化的变量被引用。  </p>
<p>（13）编写代码时要注意随时保存，并定期备份，防止由于断电、硬盘损坏等原因造成代码丢失。  </p>
]]></content>
      
        <categories>
            
            <category> 嵌入式C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 编程风格 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[排序算法之冒泡排序]]></title>
      <url>/2017/03/29/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>冒泡排序：<br>依次比较相邻的数据，将小数据放在前，大数据放在后；即第一趟先比较第1个和第2个数，大数在后，小数在前，再比较第2个数与第3个数，大数在后，小数在前，以此类推则将最大的数”滚动”到最后一个位置；第二趟则将次大的数滚动到倒数第二个位置……第n-1(n为无序数据的个数)趟即能完成排序。<br><a id="more"></a><br>如下图中的第一趟比较过程，元素40被移动到最后位置，依次类推，第二趟比较过程将元素14移动到倒数第二位位置，需要N-1趟即可排序完成，实现元素从小到大排序。<br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-4-19/39857098-file_1492562250926_200e.jpg" alt=""></p>
<h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p>设数组长度为N。</p>
<p>1．比较相邻的前后二个数据，如果前面数据大于后面的数据，就将二个数据交换。if (pDataArray[j] &gt; pDataArray[j + 1]) </p>
<p>2．这样对数组的第0个数据到N-1个数据进行一次遍历后，最大的一个数据就“沉”到数组第N-1个位置。</p>
<p>3．重复前面二步，直到N-1趟排序完成。for (j = 0; j &lt; iDataNum - i - 1; j++)</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre><code>#include&lt;stdio.h&gt;
#define MAX 8
//交换data1和data2所指向的整形  
void DataSwap(int* data1, int* data2)  
{  
    int temp = *data1;  
    *data1 = *data2;  
    *data2 = temp;  
}  

/******************************************************** 
*函数名称：BubbleSort 
*参数说明：pDataArray 无序数组； 
*          iDataNum为无序数据个数 
*说明：    冒泡排序 
*********************************************************/  
void BubbleSort(int* pDataArray, int iDataNum)  
{  
    int i;
    int j;
    for (i = 0; i &lt; iDataNum - 1; i++)   //走iDataNum-1趟  
        for (j = 0; j &lt; iDataNum - i - 1; j++)      
            if (pDataArray[j] &gt; pDataArray[j + 1])  
                DataSwap(&amp;pDataArray[j], &amp;pDataArray[j + 1]);////前面的数大于后面的数则交换，即大数向后移动一位 
}  
int main(void)
{
    int a[MAX]={8,7,5,6,4,3,2,1};
    int i=0;
    BubbleSort(a,MAX);
    printf(&quot;after:\n&quot;);
    for(i=0;i&lt;8;i++)
    {
        printf(&quot;%d &quot;,a[i]);
    }
    printf(&quot;\n&quot;);
    return 0;
}
</code></pre><h2 id="实验验证"><a href="#实验验证" class="headerlink" title="实验验证"></a>实验验证</h2><p><strong>环境：VC6.0</strong><br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-4-19/63589360-file_1492563233604_b127.jpg" alt=""></p>
<h2 id="算法优化1"><a href="#算法优化1" class="headerlink" title="算法优化1"></a>算法优化1</h2><p>用一个标记来记录在一趟的比较过程中是否存在交换，如果不存在交换则整个数组已经有序退出排序过程，反之则继续进行下一趟的比较。</p>
<pre><code>void BubbleSort(int* pDataArray, int iDataNum)  
{  
    BOOL flag = FALSE;    //记录是否存在交换  
    for (int i = 0; i &lt; iDataNum - 1; i++)    //走iDataNum-1趟  
    {  
        flag = FALSE;  
        for (int j = 0; j &lt; iDataNum - i - 1; j++)      
            if (pDataArray[j] &gt; pDataArray[j + 1])  
            {  
                flag = TRUE;  
                DataSwap(&amp;pDataArray[j], &amp;pDataArray[j + 1]);  
            }  

            if (!flag)    //上一趟比较中不存在交换，则退出排序  
                break;  
    }  
}  
</code></pre><h2 id="算法优化2"><a href="#算法优化2" class="headerlink" title="算法优化2"></a>算法优化2</h2><p>如果有100个数的数组，仅前面10个无序，后面90个都已排好序且都大于前面10个数字，那么在第一趟遍历后，最后发生交换的位置必定小于10，且这个位置之后的数据必定已经有序了，记录下这位置，第二次只要从数组头部遍历到这个位置就可以了。</p>
<pre><code>void BubbleSort(int* pDataArray, int iDataNum)  
{  
    int i;
    int j;
    int flag ;    //记录是否存在交换  
    int k;
    flag=iDataNum;
    for (i = 0; i &lt; iDataNum - 1; i++)    //走iDataNum-1趟  
    {  
        k=flag;
        flag=0;
        for (j = 0; j &lt; k-1; j++)      
            if (pDataArray[j] &gt; pDataArray[j + 1])  
            {  
                flag = j+1;  
                DataSwap(&amp;pDataArray[j], &amp;pDataArray[j + 1]);  
            }  

             if (flag&lt;0)    //上一趟比较中不存在交换，则退出排序  
                break;  
    }  
}  
</code></pre>]]></content>
      
        <categories>
            
            <category> C语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C排序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[排序算法之希尔排序]]></title>
      <url>/2017/03/29/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><p>希尔(Shell)排序又称为缩小增量排序，是直接插入排序的加强版。<br><a id="more"></a><br>希尔排序的基本思想：<br>把记录按步长 gap 分组，对每组记录采用直接插入排序方法进行排序。<br>随着步长逐渐减小，所分成的组包含的记录越来越多，当步长的值减小到 1 时，整个数据合成为一组，构成一组有序记录。<br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-4-21/45770441-file_1492735667115_137e.png" alt=""><br>初始时，有一个大小为 10 的无序序列。</p>
<p>在第一趟排序中，设 gap1 = N / 2 = 5，即相隔距离为 5 的元素组成一组，可以分为 5 组。<br>按照直接插入排序的方法对每个组进行排序。</p>
<p>在第二趟排序中，gap2 = gap1 / 2 = 2 (取整数)。这样每相隔距离为 2 的元素组成一组，可以分为 2 组。按照直接插入排序的方法对每个组进行排序。</p>
<p>在第三趟排序中，gap3 = gap2 / 2 = 1。 这样相隔距离为 1 的元素组成一组，即只有一组。<br>按照直接插入排序的方法对每个组进行排序。此时，排序已经结束。</p>
<p>图中有两个相等数值的元素 5 和 5 ，在排序过程中，两个元素位置交换了。表明希尔排序是不稳定的算法。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
void shellSort(int a[],int len)  
{  
    int step;  
    int i,j;  
    int temp;  
    for(step=len/2; step&gt;0;step/=2) //step用来控制步长,最后递减到1  
    {  
        // i从第step开始排列，应为插入排序的第一个元素  
        // 可以先不动，从第二个开始排序  
        for(i=step;i&lt;len;i++)  
        {  
            temp = a[i];  
            for(j=i-step;(j&gt;=0 &amp;&amp; temp &lt; a[j]);j-=step)  
            {  
                a[j+step] = a[j];  
            }  
            a[j+step] = temp; //将第一个位置填上  
        }  

    }  
}  
void main()  
{  
    int i;
    int j;
    int a[] = {5, 18, 151, 138, 160, 63, 174, 169, 79, 200};  
    int len = sizeof(a)/sizeof(int);  
    printf(&quot;Begin sorting...\n&quot;); 
    for (i=0;i&lt;len;i++)
    {
        printf(&quot;%d\t&quot;,a[i]);
    }
    shellSort(a,len);  
    printf(&quot;After sorting...\n&quot;);  
    for (j=0;j&lt;len;j++)
    {
        printf(&quot;%d\t&quot;,a[j]);
    }


}  
</code></pre><h1 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h1><p><img src="http://ogdiq8qnd.bkt.clouddn.com/17-4-21/7977723-file_1492737685842_6f89.jpg" alt=""></p>
<h1 id="实验验证"><a href="#实验验证" class="headerlink" title="实验验证"></a>实验验证</h1><p>环境：VC6.0<br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-4-21/16905706-file_1492737806113_8154.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> C语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C排序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[排序算法之快速排序]]></title>
      <url>/2017/03/29/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>快速排序是对冒泡排序的改进，主要思想是分治与递归。<br>分治即通过一次排序将序列分成两部分，左边的部分全部小于基准值，右边的部分大于基准值<br>递归即对分治区间继续采取快速排序<br><a id="more"></a><br>主要步骤：  </p>
<p>1．先从数列中取出一个数作为基准数。</p>
<p>2．分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</p>
<p>3．再对左右区间递归排序，直到各区间只有一个数。</p>
<h1 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h1><p>假设要排序的数组是A[0]……A[N-1]，首先任意选取一个数据（通常选用第一个数据）作为关键数据(key)，然后将所有比它小的数都放到它前面，所有比它大的数都放到它后面，这个过程称为一趟快速排序。一趟快速排序的算法是：<br>1）定义两个变量low和high，将low、high分别设置为要进行排序的序列的起始元素和最后一个元素的下标。第一次，low和high的取值分别为0和n-1，接下来的每次取值由划分得到的序列起始元素和最后一个元素的下标来决定。 </p>
<p>2）定义一个变量key，接下来以key的取值为基准将数组A划分为左右两个部分，通 常，key值为要进行排序序列的第一个元素值。第一次的取值为A[0]，以后毎次取值由要划 分序列的起始元素决定。  </p>
<p>3）从high所指向的数组元素开始向左扫描，扫描的同时将下标为high的数组元素依次与划分基准值key进行比较操作，直到high不大于low或找到第一个小于基准值key的数组元素，然后将该值赋值给low所指向的数组元素，同时将low右移一个位置。   </p>
<p>4）如果low依然小于high，那么由low所指向的数组元素开始向右扫描，扫描的同时将下标为low的数组元素值依次与划分的基准值key进行比较操作，直到low不小于high或找到第一个大于基准值key的数组元素，然后将该值赋给high所指向的数组元素，同时将high左移一个位置。  </p>
<p>5）重复步骤(3) (4)，直到low的植不小于high为止，这时成功划分后得到的左右两部分分别为A[low……pos-1]和A[pos+1……high]，其中，pos下标所对应的数组元素的值就是进行划分的基准值key，所以在划分结束时还要将下标为pos的数组元素赋值 为 key。</p>
<p><img src="http://ogdiq8qnd.bkt.clouddn.com/17-4-20/84340123-file_1492651387931_8d12.png" alt=""></p>
<h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#define N 6
int partition(int arr[], int low, int high){
    int key;
    key = arr[low];//关键数据
    //low==high停止
    while(low&lt;high){
        //从后向前查找比关键数据key小的数据，否则high减1继续查找
        while(low &lt;high &amp;&amp; arr[high]&gt;= key )
            high--;
        if(low&lt;high)
            //若找到第一个比关键数据key小的数据，进行交换，同时low+1开始从前向后查找比key大的数据
            arr[low++] = arr[high];
        //从前向后查找比关键数据key大的数据，否则low加1继续查找
        while( low&lt;high &amp;&amp; arr[low]&lt;=key )
            low++;
        if(low&lt;high)
            //若找到第一个比关键数据key大的数据，继续交换，同时high-1继续从后向前查找，直到循环结束
            arr[high--] = arr[low];
    }
    //low==high时循环结束，此时将关键数据放在此时位置，实现分治
    arr[low] = key;
    return low;
}
void quick_sort(int arr[], int start, int end){
    int pos;
    if (start&lt;end){
        pos = partition(arr, start, end);
        quick_sort(arr,start,pos-1);
        quick_sort(arr,pos+1,end);
    }
    return;
}
int main(void){
    int i;
    int arr[N]={32,12,7, 78, 23,45};
    printf(&quot;排序前 \n&quot;);
    for(i=0;i&lt;N;i++)
        printf(&quot;%d\t&quot;,arr[i]);
    quick_sort(arr,0,N-1);
    printf(&quot;\n 排序后 \n&quot;);
    for(i=0; i&lt;N; i++)
        printf(&quot;%d\t&quot;, arr[i]);
    printf (&quot;\n&quot;);
    system(&quot;pause&quot;);
    return 0;
}
</code></pre><h1 id="算法实现2"><a href="#算法实现2" class="headerlink" title="算法实现2"></a>算法实现2</h1><pre><code>#include &lt;stdio.h&gt;
#include &lt;time.h&gt;
#include &lt;stdlib.h&gt;
#define MAX 10
#define SWAP(x, y) {int t=x; x=y; y=t;}

void quickSort(int *a, int left, int right);

int main(void)
{
    int a[MAX] = {0};
    int i;

    printf(&quot;排序前:\n&quot;);
    for (i=0; i&lt;MAX; i++)
    {
        a[i] = rand()%100;
        printf(&quot;%d &quot;, a[i]);
    }

    quickSort(a, 0, MAX-1);

    printf(&quot;\n排序后:\n&quot;);
    for (i=0; i&lt;MAX; i++)
    {
        printf(&quot;%d &quot;, a[i]);
    }
    printf(&quot;\n&quot;);

    return 0;
}

void quickSort(int *a, int left, int right)
{
    if (left &lt; right)
    {
        int i = left;
        int j = right+1;

        while (1)
        {
            //从前向后查找第一个比关键数据a[left]大的数据，否则i+1继续查找
            while (i+1&lt;MAX &amp;&amp; a[++i]&lt;a[left]);
            //从后向前查找第一个比关键数据a[left]小的数据，否则j-1继续查找
            while (j-1&gt;-1 &amp;&amp; a[--j]&gt;a[left]);
            //知道i==j跳出循环，第一次分治结束
            if (i &gt;= j)
            {
                break;
            }
            //将两个数据进行交换，即小的数据到前面去，大数据到后面去
            SWAP(a[i], a[j]);
        }
        //i==j时吗，将关键数据a[left]放在中间位置,实现分治
        SWAP(a[left], a[j]);
        //分治区间递归排序
        quickSort(a, left, j-1);
        quickSort(a, j+1, right);
    }
}
</code></pre><h2 id="算法优化"><a href="#算法优化" class="headerlink" title="算法优化"></a>算法优化</h2><p>将基准值设定为序列中间的数，从中间向两边寻找</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;time.h&gt;
#include &lt;stdlib.h&gt;
#define MAX 10
#define SWAP(x, y) {int t=x; x=y; y=t;}

void quickSort(int *a, int left, int right);

int main(void)
{
    int a[MAX] = {0};
    int i;

    printf(&quot;排序前:\n&quot;);
    for (i=0; i&lt;MAX; i++)
    {
        a[i] = rand()%100;
        printf(&quot;%d &quot;, a[i]);
    }

    quickSort(a, 0, MAX-1);

    printf(&quot;\n排序后:\n&quot;);
    for (i=0; i&lt;MAX; i++)
    {
        printf(&quot;%d &quot;, a[i]);
    }
    printf(&quot;\n&quot;);

    return 0;
}

void quickSort(int *a, int left, int right)
{
    if (left &lt; right)
    {
        //中间元素
        int t = a[(left+right)/2];
        int i = left - 1;
        int j = right + 1;

        while (1)
        {
            //从前向后查找比中间元素大的数据
            while (a[++i] &lt; t);
            //从后向前查找比中间元素小的数据
            while (a[--j] &gt; t);

            if (i &gt;= j)
            {
                break;
            }
            SWAP(a[i], a[j]);

        }

        quickSort(a, left, i-1);
        quickSort(a, j+1, right);
    }
}
</code></pre><h2 id="算法优化2"><a href="#算法优化2" class="headerlink" title="算法优化2"></a>算法优化2</h2><p>有指针left和right，对于right，如果其所指的元素的值大于或者等于基准值，那么指针往左移一位，如果小于基准值，则和基准值交换；同理，对于left，如果left所指元素的值小于或者等于基准值，那么指针往右移一位，如果大于基准值，则和基准值交换。从right开始执行，重复这两步骤，直至left == right为止。</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;time.h&gt;
#include &lt;stdlib.h&gt;
#define MAX 10
#define SWAP(x, y) {int t=x; x=y; y=t;}

void quickSort(int *a, int left, int right);
int Partition(int *a, int left, int right);

int main(void)
{
    int a[MAX] = {0};
    int i;

    printf(&quot;排序前:\n&quot;);
    for (i=0; i&lt;MAX; i++)
    {
        a[i] = rand()%100;
        printf(&quot;%d &quot;, a[i]);
    }

    quickSort(a, 0, MAX-1);

    printf(&quot;\n排序后:\n&quot;);
    for (i=0; i&lt;MAX; i++)
    {
        printf(&quot;%d &quot;, a[i]);
    }
    printf(&quot;\n&quot;);

    return 0;
}

int Partition(int *a, int left, int right)
{
    int pivot = a[left];
    while (left &lt; right)
    {
        while (left &lt; right &amp;&amp; a[right] &gt;= pivot)
        {
            --right;
        }
        a[left] = a[right];
        while (left &lt; right &amp;&amp; a[left] &lt;= pivot)
        {
            ++left;
        }
        a[right] = a[left];
    }

    return left;
}

void quickSort(int *a, int left, int right)
{
    int pivot;

    if (left &lt; right)
    {
        pivot = Partition(a, left, right);
        quickSort(a, left, pivot-1);
        quickSort(a, pivot+1, right);
    }

}
</code></pre><h1 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h1><p>平均时间复杂度：O(nlog2n)</p>
<p>空间复杂度：O(n) </p>
<p>稳定性：不稳定</p>
<h1 id="实验验证"><a href="#实验验证" class="headerlink" title="实验验证"></a>实验验证</h1><p><strong>环境：vc6.0</strong><br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-4-20/48173040-file_1492651989449_1433f.jpg" alt=""></p>
<h1 id="参考学习"><a href="#参考学习" class="headerlink" title="参考学习"></a>参考学习</h1><p><a href="http://www.cnblogs.com/RootJie/archive/2012/02/13/2349649.html" target="_blank" rel="external">几种快速排序的实现</a><br><a href="http://c.biancheng.net/cpp/html/2741.html" target="_blank" rel="external">c语言快速排序及代码</a></p>
]]></content>
      
        <categories>
            
            <category> C语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C排序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[排序算法之插入排序]]></title>
      <url>/2017/03/29/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p>基本思想：通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应的位置并插入。  </p>
<a id="more"></a>
<p>插入排序有N-1趟排序组成，对于P=1趟到p=N-1趟排序，插入排序保证从位置0到位置P的元素为已排序状态。每次遍历的任务是：通过扫描前面已排序的子列表，将位置P处的元素定位到从0到P的子列表之内的正确的位置上。<br>如下图所示，P=1时，位置1上的元素3与子列表4进行比较；P=2时，位置2上的元素1与子列表[3,4]比较；P=3时，位置3上的元素2与子列表[1,3,4]比较。<br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-4-18/56688248-file_1492479978213_1207e.png" alt=""></p>
<h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p>假定n是数组的长度，第一个元素被放置在正确的位置上，这样仅需从1-n-1范围内对剩余元素进行排序。对于每次遍历，从0-i-1范围内的元素已经被排好序，</p>
<p>每次遍历的任务是：通过扫描前面已排序的子列表，将位置i处的元素定位到从0到i的子列表之内的正确的位置上。</p>
<p>将arr[i]复制为一个名为key的临时元素。</p>
<p>采用向下扫描列表方式（从后向前方式），key依次与子列表arr[i-1]、arr[i-2]的大小比较</p>
<p>当key小于子列表的某一项时，a[j-1]&gt;key，该项向右移动一个位置，供key使用。a[j] = a[j-1]<br>当key大于子列表某一项时，a[j-1]&lt;key,该项后一位即为key的位置。a[j] = key; </p>
<p>与选择排序不同的是，插入排序将数据向右滑动，并且不会执行交换。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre><code>#include&lt;stdio.h&gt;
#define MAX 8
int main(void)
{
    int a[MAX]={8,7,6,5,4,3,2,1};
    void insert(int*a,int n);//函数声明
    int i=0;
    insert(a,MAX);
    printf(&quot;after:\n&quot;);
    for(i=0;i&lt;8;i++)
    {
        printf(&quot;%d &quot;,a[i]);
    }
    printf(&quot;\n&quot;);
    return 0;
}

void insert(int *a,int n)
{
    int i,j,key;
    for(i=1;i&lt;n;i++)//控制需要插入的元素
    {
        key=a[i]; //key为要插入的元素
        for(j=i;j&gt;0 &amp;&amp; a[j-1]&gt;key;j--) //查找要插入的位置,循环结束,则找到插入位置
        {
            a[j] = a[j-1]; //移动元素的位置.供要插入元素使用
        }
        a[j] = key; //插入需要插入的元素

    }
}
</code></pre><h2 id="效率分析"><a href="#效率分析" class="headerlink" title="效率分析"></a>效率分析</h2><p>空间复杂度O(1)<br>时间复杂度O(n2)：嵌套循环的每一个都花费N次迭代<br>最差情况：反序，需要移动n*(n-1)/2个元素<br>最好情况：正序，不需要移动元素  </p>
<p>数组在已排序或者是“近似排序”时，插入排序效率的最好情况运行时间为O(n)<br>（因为内层的for检测总是判定不成立的）</p>
<p>插入排序最坏情况运行时间和平均情况运行时间都为O(n2)。</p>
<p>在列表已被排序时，插入排序是线性算法O(n)。</p>
<p>在列表“近似排序”时，插入排序仍然是线性算法。</p>
<p>在列表的许多元素已位于正确的位置上时，就会出现“近似排序”的条件。</p>
<p>通过使用O(nlog2n)效率的算法（如快速排序）对数组进行部分排序，</p>
<p>然后再进行选择排序，某些高级的排序算法就是这样实现的。</p>
<h2 id="实验验证"><a href="#实验验证" class="headerlink" title="实验验证"></a>实验验证</h2><p><strong>环境：VC6.0</strong><br><img src="http://ogdiq8qnd.bkt.clouddn.com/17-4-18/46492612-file_1492482886672_15a82.jpg" alt=""></p>
<h1 id="二分法插入排序"><a href="#二分法插入排序" class="headerlink" title="二分法插入排序"></a>二分法插入排序</h1><p>插入排序中，总是先寻找插入位置，然后在实行挪动和插入过程；寻找插入位置采用顺序查找的方式（从前向后或者从后向前），既然需要插入的数组已经是有序的，那么可以采用二分查找方法来寻找插入位置，提高算法效率，但算法的时间复杂度仍为O(n2)。  </p>
<p>二分法插入排序过程：<br>1.首先，原数组是一个有序序列，iBegin=0 iEnd=count-1。<br>2.将要插入的数与数组中间位置的元素进行比较，<br>如果比中间元素大，则iBegin=mid+1作为下一次判断的数组开头。<br>如果比中间元素小，则iEnd=mid-1作为下一次判断的数组结尾。<br>3.直到iBegin&gt;iEnd结束，iBegin就是新元素插入的位置。<br>4.将数组中从iBegin开始的元素全部向后移动一位，之后在iBegin位置插入新元素。   </p>
<pre><code>#include&lt;stdio.h&gt;
#define MAX 8
//查找数值iData在长度为iLen的pDataArray数组中的插入位置  
int FindInsertIndex(int *pDataArray, int iLen, int iData)  
{  
    int iBegin = 0;  
    int iEnd = iLen - 1;  
    int index = -1;    //记录插入位置  
    while (iBegin &lt;= iEnd)  
    {  
        index = (iBegin + iEnd) / 2;  
        if (pDataArray[index] &gt; iData)  
            iEnd = index - 1;  
        else  
            iBegin = index + 1;   
    }  
    if (pDataArray[index] &lt;= iData)  
        index++;  
    return index;  
}  
    /*函数名称：BinaryInsertSort 
    *参数说明：pDataArray 无序数组； 
    *          iDataNum为无序数据个数 
    *说明：    二分查找插入排序 
    *********************************************************/  
void BinaryInsertSort(int* pDataArray, int iDataNum)  
{  
    int i;
    for (i = 1; i &lt; iDataNum; i++)    //从第2个数据开始插入  
    {  
        int index = FindInsertIndex(pDataArray, i, pDataArray[i]);    //二分寻找插入的位置  

        if (i != index)    //插入位置不为i，才挪动、插入  
        {  
            int j = i;  
            int temp = pDataArray[i];  
            while (j &gt; index)    //挪动位置  
            {  
                pDataArray[j] = pDataArray[j-1];  
                j--;  
            }  
            pDataArray[j] = temp;    //插入  
        }  
    }  
}  
int main(void)
{
    int a[MAX]={8,7,6,5,4,3,2,1};
    int i=0;
    BinaryInsertSort(a,MAX);
    printf(&quot;after:\n&quot;);
    for(i=0;i&lt;8;i++)
    {
        printf(&quot;%d &quot;,a[i]);
    }
    printf(&quot;\n&quot;);
    return 0;
}
</code></pre>]]></content>
      
        <categories>
            
            <category> C语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C排序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[排序算法之选择排序]]></title>
      <url>/2017/03/29/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>选择排序（从小到大）的基本思想是先选出最小的数，放在第一个位置；然后，选出第二小的数，放在第二个位置；以此类推，直到所有的数从小到大排序。<br><a id="more"></a></p>
<h1 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h1><p>选择排序对大小为N的无序数组R[N]进行排序，进行N-1轮选择过程。第i轮选取第i小的数，并将其放在第i个位置上。当第N-1次完成时，第N小（也就是最大）的数自然在最后的位置上。</p>
<p>下面对 3  2  4  1 进行选择排序说明排序过程，使用min_index 记录当前最小的数所在的位置。</p>
<p>第1轮 排序过程 （寻找第1小的数所在的位置）</p>
<p>3  2  4  1（min_index=1）</p>
<p>3  2  4  1（3 &gt; 2， min_index=2）</p>
<p>3  2  4  1（2 &lt; 4， min_index=2）</p>
<p>3  2  4  1（2 &gt; 1， min_index=4）</p>
<p>1  2  4  3 （第1轮结果，将3和1交换，也就是位置1和位置4交换）</p>
<p>第2轮 排序过程 （寻找第2小的数所在的位置）</p>
<p>1  2  4  3（第1轮结果， min_index=2，只需要从位置2开始寻找）</p>
<p>1  2  4  3（4 &gt; 2， min_index=2）</p>
<p>1  2  4  3（3 &gt; 2， min_index=2）</p>
<p>1  2  4  3（第2轮结果，因为min_index位置刚好在第2个位置，无需交换）</p>
<p>第3轮 排序过程 （寻找第3小的数所在的位置）</p>
<p>1  2  4  3（第2轮结果， min_index=3，只需要从位置2开始寻找）</p>
<p>1  2  4  3（4 &gt; 3， min_index=4）</p>
<p>1  2  3  4（第3轮结果，将3和4交换，也就是位置4和位置3交换）</p>
<p>至此，排序完毕。</p>
<p>#代码实现#</p>
<pre><code>#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt; 
#define N 8
void select_sort(int a[],int n); 
//选择排序实现,n为数组a的元素个数 
 void select_sort(int a[],int n) 
 {      
     int i=0;
     int j=0;
     //进行N-1轮选择
     for(i=0; i&lt;n-1; i++)  
     {   
         int min_index = i;    
     //找出第i小的数所在的位置  
         for(j=i+1; j&lt;n; j++)  
         {    
             if(a[j] &lt; a[min_index])    
                {   
                    min_index = j;    
                }   
         }   
     //将第i小的数，放在第i个位置；如果刚好，就不用交换   
         if( i != min_index)   
         {    
             int temp = a[i];    
             a[i] = a[min_index];    
             a[min_index] = temp;   
         }  
    } 

 } 
 int main() 
 {  
     int i=0;
     int num[N] = {89, 38, 11, 78, 96, 44, 19, 25}; 
     select_sort(num, N); 
     for(i=0; i&lt;N; i++)  
         printf(&quot;%d &quot;, num[i]);  
     printf(&quot;\n&quot;);  
     system(&quot;pause&quot;); 
     return 0; 
 } 
</code></pre><p>#性能分析#<br>在比较次数上为n<em>(n-1)/2<br>时间复杂度为o(n</em>n)<br>在最好的情况下，数字初始有序则只需要比较即可，不存在交换操作。<br>在最差情况下，数字初始逆序。同样时间复杂度为o(n*n)。</p>
]]></content>
      
        <categories>
            
            <category> C语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C排序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构之单链表]]></title>
      <url>/2017/03/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8D%95%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>链表由多个结点离散分配，彼此通过指针相连，每个结点只有一个前驱结点和后继结点。首节点无前驱结点，尾结点无后继结点的一种存储结构<br><a id="more"></a></p>
<h1 id="链表结构"><a href="#链表结构" class="headerlink" title="链表结构"></a>链表结构</h1><p><img src="http://ogdiq8qnd.bkt.clouddn.com/17-4-13/54746715-file_1492049893870_6b7f.png" alt=""><br>头结点：链表的第一个有效结点前面的结点，头结点并不存放有效数据，也就是数据域为空，加头结点的主要目的是为了方便链表的操作。<br>首节点：链表的第一个有效结点，结点包含数据域和指针域。<br>尾结点：尾结点的指针域为空。<br>头指针：指向头结点的指针变量，它存放了头结点的地址(头指针存放的是头结点的地址)。    </p>
<h1 id="定义链表结点"><a href="#定义链表结点" class="headerlink" title="定义链表结点"></a>定义链表结点</h1><pre><code>/* 定义单链表结点类型 */
typedef struct Node{    
    int element;//数据域
    struct Node *next;//指针域
}Node;
</code></pre><h1 id="单链表初始化"><a href="#单链表初始化" class="headerlink" title="单链表初始化"></a>单链表初始化</h1><h2 id="无头结点链表"><a href="#无头结点链表" class="headerlink" title="无头结点链表"></a>无头结点链表</h2><pre><code>/* 初始化线性表，即置单链表的表头指针为空 */
void initList(Node **pNode)
{
    *pNode=(Node *)malloc( sizeof(Node));
    *pNode = NULL;
    printf(&quot;initList函数执行，初始化成功\n&quot;);
}
</code></pre><h2 id="带头结点链表"><a href="#带头结点链表" class="headerlink" title="带头结点链表"></a>带头结点链表</h2><pre><code>/* 初始化线性表，即置单链表的首节点指针为空 */
void initHeadList(Node **pNode)
{
    *pNode=(Node *)malloc( sizeof(Node));
    (*pNode)-&gt;next= NULL;
    printf(&quot;initHeadList函数执行，初始化成功\n&quot;);
}
</code></pre><h1 id="单链表创建"><a href="#单链表创建" class="headerlink" title="单链表创建"></a>单链表创建</h1><h2 id="无头结点链表-1"><a href="#无头结点链表-1" class="headerlink" title="无头结点链表"></a>无头结点链表</h2><pre><code>Node *creatList(Node *pHead)
{
    Node *new_node;//新建结点
    Node *cur_node;//当前结点
    int data;
    printf(&quot;输入节点：\n&quot;);
    scanf(&quot;%d&quot;,&amp;data);  

    while(data &gt; 0)        //输入的值大于0则继续，直到输入的值为负
    {
        new_node=(Node *)malloc(sizeof(Node)); //申请新节点
        if(NULL==new_node)
        {
            printf(&quot;新节点内存分配失败\n&quot;);
            exit(0);

        }

        memset(new_node,0,sizeof(Node));

        new_node-&gt;element=data;//输入data存入结点的数据域

        if (pHead==NULL)      //首结点若为空，新节点为首结点
        {
            pHead=new_node;
        }
        else                  //首结点不为空，已插入结点
        {
            cur_node-&gt;next=new_node;//当前结点的指针指向新节点
        }
        cur_node=new_node;          //将当前结点移向新节点
        scanf(&quot;%d&quot;,&amp;data);
        new_node-&gt;next = NULL;        //新节点指针域为空

    }
    printf(&quot;creatList函数执行，链表创建成功\n&quot;);
    return pHead;           //返回链表的头指针
}
</code></pre><h2 id="带头结点链表-1"><a href="#带头结点链表-1" class="headerlink" title="带头结点链表"></a>带头结点链表</h2><pre><code>    /*头节点创建*/
Node *creatHeadList(Node *pHead)
{
    Node *new_node;
    Node *cur_node;
    int data;
    printf(&quot;输入节点：\n&quot;);
    scanf(&quot;%d&quot;,&amp;data);  

    while(data &gt; 0)        //输入的值大于0则继续，直到输入的值为负
    {
        new_node=(Node *)malloc(sizeof(Node)); //申请新节点
        if(NULL==new_node)
        {
            printf(&quot;新节点内存分配失败\n&quot;);
            exit(0);

        }
        memset(new_node,0,sizeof(Node));
        new_node-&gt;element=data;

        if (pHead-&gt;next==NULL)
        {
            pHead-&gt;next=new_node;
        }
        else
        {
            cur_node-&gt;next=new_node;
        }
        cur_node=new_node;
        scanf(&quot;%d&quot;,&amp;data);
        new_node-&gt;next = NULL;

    }
    printf(&quot;creatHeadList函数执行，链表创建成功\n&quot;);
    return pHead;           //返回链表的头指针
}
</code></pre><h1 id="打印链表"><a href="#打印链表" class="headerlink" title="打印链表"></a>打印链表</h1><h2 id="无头结点链表-2"><a href="#无头结点链表-2" class="headerlink" title="无头结点链表"></a>无头结点链表</h2><pre><code>/* 3.打印链表，链表的遍历*/
void printList(Node *pHead)
{
    if(NULL == pHead)   //链表为空
    {
        printf(&quot;PrintList函数执行，链表为空\n&quot;);
    }
    else
    {
        while(NULL != pHead)
        {
            printf(&quot;%d &quot;,pHead-&gt;element);
            pHead = pHead-&gt;next;
        }
        printf(&quot;\n&quot;);
    }
}
</code></pre><h2 id="带头结点链表-2"><a href="#带头结点链表-2" class="headerlink" title="带头结点链表"></a>带头结点链表</h2><pre><code>    /* 3.打印链表，链表的遍历*/
void printHeadList(Node *pHead)
{
    if(NULL == pHead-&gt;next)   //链表为空
    {
        printf(&quot;PrintList函数执行，链表为空\n&quot;);
    }
    else
    {
        while(NULL != pHead-&gt;next)
        {
            printf(&quot;%d &quot;,pHead-&gt;next-&gt;element);
            pHead = pHead-&gt;next;
        }
        printf(&quot;\n&quot;);
 }
</code></pre><h1 id="链表长度"><a href="#链表长度" class="headerlink" title="链表长度"></a>链表长度</h1><h2 id="无头结点链表-3"><a href="#无头结点链表-3" class="headerlink" title="无头结点链表"></a>无头结点链表</h2><pre><code>int lengthList(Node *pHead)
{
    int length = 0;

    while(pHead != NULL)
    {
        length++;         //遍历链表size大小比链表的实际长度小1
        pHead = pHead-&gt;next;
    }
    printf(&quot;lengthList函数执行，链表长度 %d \n&quot;,length);
    return length;    //链表的实际长度
}
</code></pre><h2 id="带头结点链表-3"><a href="#带头结点链表-3" class="headerlink" title="带头结点链表"></a>带头结点链表</h2><pre><code>    /* 返回单链表的长度 */
int lengthHeadList(Node *pHead)
{
    int length = 0;

    while(NULL != pHead-&gt;next)
    {
        length++;         //遍历链表size大小比链表的实际长度小1
        pHead = pHead-&gt;next;
    }
    printf(&quot;lengthList函数执行，链表长度 %d \n&quot;,length);
    return length;    //链表的实际长度
}
</code></pre><h1 id="链表非空判断"><a href="#链表非空判断" class="headerlink" title="链表非空判断"></a>链表非空判断</h1><h2 id="无头结点链表-4"><a href="#无头结点链表-4" class="headerlink" title="无头结点链表"></a>无头结点链表</h2><pre><code>/* 检查单链表是否为空，若为空则返回0，否则返回1 */
int isEmptyList(Node *pHead)
{
    int emptyFlag=0;
    if(pHead == NULL)  //链表为空
    {
        printf(&quot;isEmptyList函数执行，链表为空\n&quot;);
        emptyFlag=0;

    }
    else              //链表非空
    {
        printf(&quot;isEmptyList函数执行，链表非空\n&quot;);
        emptyFlag=1;
    }

    return emptyFlag;
}
</code></pre><h2 id="带头结点链表-4"><a href="#带头结点链表-4" class="headerlink" title="带头结点链表"></a>带头结点链表</h2><pre><code>    /* 检查单链表是否为空，若为空则返回0，否则返回1 */
int isEmptyHeadList(Node *pHead)
{
    int emptyFlag=0;
    if(pHead-&gt;next == NULL)
    {
        printf(&quot;isEmptyList函数执行，链表为空\n&quot;);
        emptyFlag=0;

    }
    else
    {
        printf(&quot;isEmptyList函数执行，链表非空\n&quot;);
        emptyFlag=1;
    }

    return emptyFlag;
}
</code></pre><h1 id="取出链表结点元素"><a href="#取出链表结点元素" class="headerlink" title="取出链表结点元素"></a>取出链表结点元素</h1><h2 id="无头结点链表-5"><a href="#无头结点链表-5" class="headerlink" title="无头结点链表"></a>无头结点链表</h2><pre><code>/* 返回单链表中第pos个结点中的元素，若pos超出范围，则停止程序运行 */
int getElement(Node *pHead, int pos)
{
    int i=0;

    if(pos &lt; 1)
    {
        printf(&quot;getElement函数执行，pos值非法\n&quot;);
        return 0;
    }
    if(pHead == NULL)
    {
        printf(&quot;getElement函数执行，链表为空\n&quot;);
        return 0;
        //exit(1);
    }
    while(pHead !=NULL)
    {
        ++i;
        if(i == pos) //到达节点。退出
        {
            break;
        }
        pHead = pHead-&gt;next; //头结点移到下一结点
    }
    if(i &lt; pos)                  //链表长度不足则退出
    {
        printf(&quot;getElement函数执行，pos值超出链表长度\n&quot;);
        return 0;
    }

    return pHead-&gt;element;
}
</code></pre><h2 id="带头结点链表-5"><a href="#带头结点链表-5" class="headerlink" title="带头结点链表"></a>带头结点链表</h2><pre><code>    /* 返回单链表中第pos个结点中的元素，若pos超出范围，则停止程序运行 */
int getElementHeadList(Node *pHead, int pos)
{
    int i=0;

    if(pos &lt; 1)
    {
        printf(&quot;getElement函数执行，pos值非法\n&quot;);
        return 0;
    }
    if(pHead-&gt;next == NULL)
    {
        printf(&quot;getElement函数执行，链表为空\n&quot;);
        return 0;
        //exit(1);
    }
    while(pHead-&gt;next !=NULL)
    {
        ++i;
        if(i == pos) //到达节点。退出
        {
            break;
        }
        pHead = pHead-&gt;next; //头结点移到下一结点
    }
    if(i &lt; pos)                  //链表长度不足则退出
    {
        printf(&quot;getElement函数执行，pos值超出链表长度\n&quot;);
        return 0;
    }

    return pHead-&gt;next-&gt;element;
}
</code></pre><h1 id="查找链表元素"><a href="#查找链表元素" class="headerlink" title="查找链表元素"></a>查找链表元素</h1><h2 id="无头结点链表-6"><a href="#无头结点链表-6" class="headerlink" title="无头结点链表"></a>无头结点链表</h2><pre><code>/*从单链表中查找具有给定值x的第一个元素，若查找成功则返回该结点data域的存储地址，否则返回NULL */
int *getElemAddr(Node *pHead, int x)
{
    if(NULL == pHead)
    {
        printf(&quot;getElemAddr函数执行，链表为空\n&quot;);
        return NULL;
    }
    if(x &lt; 0)
    {
        printf(&quot;getElemAddr函数执行，给定值X不合法\n&quot;);
        return NULL;
    }
    while((pHead-&gt;element != x) &amp;&amp; (NULL != pHead-&gt;next)) //判断是否到链表末尾，以及是否存在所要找的元素
    {
        pHead = pHead-&gt;next;
    }
    if((pHead-&gt;element != x) &amp;&amp; (pHead != NULL))
    {
        printf(&quot;getElemAddr函数执行，在链表中未找到x值\n&quot;);
        return NULL;
    }
    if(pHead-&gt;element == x)
    {
        printf(&quot;getElemAddr函数执行，元素 %d 的地址为 0x%x\n&quot;,x,&amp;(pHead-&gt;element));
    }

    return &amp;(pHead-&gt;element);//返回元素的地址
}
</code></pre><h2 id="带头结点链表-6"><a href="#带头结点链表-6" class="headerlink" title="带头结点链表"></a>带头结点链表</h2><pre><code>/*从单链表中查找具有给定值x的第一个元素，若查找成功则返回该结点data域的存储地址，否则返回NULL */
int *getElemAddrHeadList(Node *pHead, int x)
{
    if(NULL == pHead-&gt;next)
    {
        printf(&quot;getElemAddr函数执行，链表为空\n&quot;);
        return NULL;
    }
    if(x &lt; 0)
    {
        printf(&quot;getElemAddr函数执行，给定值X不合法\n&quot;);
        return NULL;
    }
    while((pHead-&gt;next-&gt;element != x) &amp;&amp; (NULL != pHead-&gt;next)) //判断是否到链表末尾，以及是否存在所要找的元素
    {
        pHead = pHead-&gt;next;
    }
    if((pHead-&gt;next-&gt;element != x) &amp;&amp; (pHead-&gt;next != NULL))
    {
        printf(&quot;getElemAddr函数执行，在链表中未找到x值\n&quot;);
        return NULL;
    }
    if(pHead-&gt;next-&gt;element == x)
    {
        printf(&quot;getElemAddr函数执行，元素 %d 的地址为 0x%x\n&quot;,x,&amp;(pHead-&gt;next-&gt;element));
    }

    return &amp;(pHead-&gt;next-&gt;element);//返回元素的地址
}
</code></pre><h1 id="修改链表元素"><a href="#修改链表元素" class="headerlink" title="修改链表元素"></a>修改链表元素</h1><h2 id="无头结点链表-7"><a href="#无头结点链表-7" class="headerlink" title="无头结点链表"></a>无头结点链表</h2><pre><code>/* 9.把单链表中第pos个结点的值修改为x的值，若修改成功返回１，否则返回０ */
int modifyElem(Node *pNode,int pos,int x)
{
    int i=0;
    Node *pHead;
    pHead = pNode;
    if(NULL == pHead)
    {
        printf(&quot;modifyElem函数执行，链表为空\n&quot;);
    }
    if(pos &lt; 1)
    {
        printf(&quot;modifyElem函数执行，pos值非法\n&quot;);
        return 0;
    }
    while(pHead !=NULL)
    {
        ++i;
        if(i == pos)
        {
            break;
        }
        pHead = pHead-&gt;next; //移到下一结点
    }
    if(i &lt; pos)                  //链表长度不足则退出
    {
        printf(&quot;modifyElem函数执行，pos值超出链表长度\n&quot;);
        return 0;
    }
    pNode = pHead;//要修改结点
    pNode-&gt;element = x;  //修改为要修改值
    printf(&quot;modifyElem函数执行\n&quot;);

    return 1;
}
</code></pre><h2 id="带头结点链表-7"><a href="#带头结点链表-7" class="headerlink" title="带头结点链表"></a>带头结点链表</h2><pre><code>    /* 把单链表中第pos个结点的值修改为x的值，若修改成功返回１，否则返回０ */
int modifyElemHeadList(Node *pNode,int pos,int x)
{
    int i=0;
    Node *pHead;
    pHead = pNode;
    if(NULL == pHead-&gt;next)
    {
        printf(&quot;modifyElemHeadList函数执行，链表为空\n&quot;);
    }
    if(pos &lt; 1)
    {
        printf(&quot;modifyElemHeadList函数执行，pos值非法\n&quot;);
        return 0;
    }
    while(pHead-&gt;next !=NULL)
    {
        ++i;
        if(i == pos)
        {
            break;
        }
        pHead = pHead-&gt;next; //移到下一结点
    }
    if(i &lt; pos)                  //链表长度不足则退出
    {
        printf(&quot;modifyElemHeadList函数执行，pos值超出链表长度\n&quot;);
        return 0;
    }
    pNode = pHead;
    pNode-&gt;next-&gt;element = x;
    printf(&quot;modifyElemHeadList函数执行\n&quot;);

    return 1;
}
</code></pre><h1 id="链表插入"><a href="#链表插入" class="headerlink" title="链表插入"></a>链表插入</h1><h2 id="表头插入元素"><a href="#表头插入元素" class="headerlink" title="表头插入元素"></a>表头插入元素</h2><h3 id="无头节点链表"><a href="#无头节点链表" class="headerlink" title="无头节点链表"></a>无头节点链表</h3><pre><code>/* 10.向单链表的表头插入一个元素 */
int insertHeadList(Node **pNode,int insertElem)
{
    Node *pInsert;
    pInsert = (Node *)malloc(sizeof(Node));
    memset(pInsert,0,sizeof(Node));
    pInsert-&gt;element = insertElem;
    pInsert-&gt;next = *pNode;
    *pNode = pInsert;
    printf(&quot;insertHeadList函数执行，向表头插入元素成功\n&quot;);

    return 1;
}
</code></pre><h3 id="带头结点链表-8"><a href="#带头结点链表-8" class="headerlink" title="带头结点链表"></a>带头结点链表</h3><pre><code>/* 向单链表的表头插入一个元素 */
Node *inserFirsttHeadList(Node *pHead,int insertElem)
{
    Node *pInsert;
    pInsert = (Node *)malloc(sizeof(Node));
    memset(pInsert,0,sizeof(Node));
    pInsert-&gt;element = insertElem;
    pInsert-&gt;next = pHead-&gt;next;
    pHead-&gt;next = pInsert;
    printf(&quot;inserFirsttHeadList函数执行，向表头插入元素成功\n&quot;);

    return pHead;
}
</code></pre><h2 id="表尾插入元素"><a href="#表尾插入元素" class="headerlink" title="表尾插入元素"></a>表尾插入元素</h2><h3 id="无头节点链表-1"><a href="#无头节点链表-1" class="headerlink" title="无头节点链表"></a>无头节点链表</h3><pre><code>int insertLastList(Node **pNode,elemType insertElem)
{
    Node *pInsert;
    Node *pHead;
    Node *pTmp; //定义一个临时链表用来存放第一个节点

    pHead = *pNode;
    pTmp = pHead;
    pInsert = (Node *)malloc(sizeof(Node)); //申请一个新节点
    memset(pInsert,0,sizeof(Node));
    pInsert-&gt;element = insertElem;

    while(pHead-&gt;next != NULL)
    {
        pHead = pHead-&gt;next;
    }
    pHead-&gt;next = pInsert;   //将链表末尾节点的下一结点指向新添加的节点
    *pNode = pTmp;
    printf(&quot;insertLastList函数执行，向表尾插入元素成功\n&quot;);

    return 1;
}
</code></pre><h3 id="带头结点链表-9"><a href="#带头结点链表-9" class="headerlink" title="带头结点链表"></a>带头结点链表</h3><pre><code>    /* 向单链表的末尾添加一个元素 */
int insertLasHeadtList(Node *pNode,int insertElem)
{
    Node *pInsert;
    Node *pHead;
    Node *pTmp; //定义一个临时链表用来存放第一个节点

    pHead = pNode;
    pTmp = pHead;
    pInsert = (Node *)malloc(sizeof(Node)); //申请一个新节点
    memset(pInsert,0,sizeof(Node));
    pInsert-&gt;element = insertElem;

    while(pHead-&gt;next != NULL)
    {
        pHead = pHead-&gt;next;
    }
    pHead-&gt;next = pInsert;   //将链表末尾节点的下一结点指向新添加的节点
    pNode = pTmp;
    printf(&quot;insertLastList函数执行，向表尾插入元素成功\n&quot;);

    return 1;
}
</code></pre><h1 id="链表删除"><a href="#链表删除" class="headerlink" title="链表删除"></a>链表删除</h1><h2 id="删除链表指定数据"><a href="#删除链表指定数据" class="headerlink" title="删除链表指定数据"></a>删除链表指定数据</h2><h3 id="无头节点链表-2"><a href="#无头节点链表-2" class="headerlink" title="无头节点链表"></a>无头节点链表</h3><pre><code>    /* 删除单链表单个元素 */
Node *delElementList(Node *pHead,int delElem)
{
    Node *pre_node;//要删除节点的前一节点
    Node *del_node;//删除节点
    Node *Head;
    if(NULL == pHead)
    {
        printf(&quot;delElementList函数执行，链表为空\n&quot;);
        return pHead;
    }
    if(delElem &lt; 0)
    {
        printf(&quot;delElementList函数执行，给定值X不合法\n&quot;);
        return pHead;
    }
    del_node=pHead;  //删除节点从头结点开始

    while((del_node-&gt;element != delElem) &amp;&amp; (NULL != del_node-&gt;next)) //判断是否到链表末尾，以及是否存在所要找的元素
    {    
        pre_node=del_node; //该节点不是要找节点，设置为前一节点

        del_node = del_node-&gt;next;//节点下移

    }
    //到链表尾依然没有要找元素
    if((del_node-&gt;element != delElem) &amp;&amp; (del_node != NULL))
    {
        printf(&quot;getElemAddr函数执行，在链表中未找到x值\n&quot;);
        return NULL;
    }
    //找到要删除元素
    if(del_node-&gt;element == delElem)
    {
        if (del_node==pHead)  //若为头结点
        {
            pHead=del_node-&gt;next;
        }
        else                 //不是头结点
        {
            pre_node-&gt;next=del_node-&gt;next;    //前一节点的指针指向要删除节点的指针域，即后一节点
        }
        free(del_node);                      //释放删除节点
        printf(&quot;delElementList函数执行，删除元素为 %d \n&quot;,delElem);
    }
    Head=pHead;
    return Head;
}
</code></pre><h3 id="带头结点链表-10"><a href="#带头结点链表-10" class="headerlink" title="带头结点链表"></a>带头结点链表</h3><pre><code>    /* 删除单链表单个元素 */
Node *delElementHeadList(Node *pHead,int delElem)
{
    Node *pre_node;//要删除节点的前一节点
    Node *del_node;//删除节点
    Node *Head;
    if(NULL == pHead-&gt;next)
    {
        printf(&quot;delElementHeadList函数执行，链表为空\n&quot;);
        return pHead;
    }
    if(delElem &lt; 0)
    {
        printf(&quot;delElementHeadList函数执行，给定值X不合法\n&quot;);
        return pHead;
    }
    del_node=pHead-&gt;next;  //删除节点从第一个节点开始

    while((del_node-&gt;element != delElem) &amp;&amp; (NULL != del_node-&gt;next)) //判断是否到链表末尾，以及是否存在所要找的元素
    {    
        pre_node=del_node; //该节点不是要找节点，设置为前一节点

        del_node = del_node-&gt;next;//节点下移

    }
    //到链表尾依然没有要找元素
    if((del_node-&gt;element != delElem) &amp;&amp; (del_node!= NULL))
    {
        printf(&quot;delElementHeadList函数执行，在链表中未找到x值\n&quot;);
        return NULL;
    }
    //找到要删除元素
    if(del_node-&gt;element == delElem)
    {
        if (del_node==pHead-&gt;next)  //若为第一个结点
        {
            pHead-&gt;next=del_node-&gt;next;
        }
        else                 //不是第一个结点
        {
            pre_node-&gt;next=del_node-&gt;next;    //前一节点的指针指向要删除节点的指针域，即后一节点
        }
        free(del_node);                      //释放删除节点
        printf(&quot;delElementList函数执行，删除元素为 %d \n&quot;,delElem);
    }
    Head=pHead;
    return Head;
}
</code></pre><h2 id="删除链表指定结点"><a href="#删除链表指定结点" class="headerlink" title="删除链表指定结点"></a>删除链表指定结点</h2><h3 id="无头节点链表-3"><a href="#无头节点链表-3" class="headerlink" title="无头节点链表"></a>无头节点链表</h3><pre><code>/* 删除单链表指定节点 */
Node *delPosList(Node *pHead,int pos)
{
    int i=0;
    Node *pre_node;//要删除节点的前一节点
    Node *del_node;//删除节点

    if(NULL == pHead)
    {
        printf(&quot;delPosLis函数执行，链表为空\n&quot;);
        return pHead;
    }
    if(pos &lt; 0)
    {
        printf(&quot;delPosLis函数执行，给定位置pos不合法\n&quot;);
        return pHead;
    }
    del_node=pHead;     //删除节点从头结点开始匹配
    while(del_node !=NULL)
    {
        ++i;
        if(i == pos)
        {
            if (pos==1)   //若删除的是头结点
            {
                pHead=del_node-&gt;next;  
            }
            else          //若删除的不是头结点
            {
                pre_node-&gt;next=del_node-&gt;next;
            }
            printf(&quot;delPosList函数执行，删除第 %d个元素\n&quot;,pos);
            break;
        }
        pre_node=del_node;        //设置前一节点

        del_node= del_node-&gt;next; //移到下一结点
    }
    free(del_node);            //释放删除节点

    return pHead;
}
</code></pre><h3 id="带头结点链表-11"><a href="#带头结点链表-11" class="headerlink" title="带头结点链表"></a>带头结点链表</h3><pre><code>/* 删除单链表指定节点 */
Node *delPosHeadList(Node *pHead,int pos)
{
    int i=0;
    Node *pre_node;//要删除节点的前一节点
    Node *del_node;//删除节点
    Node *Head;
    if(NULL == pHead-&gt;next)
    {
        printf(&quot;delPosLis函数执行，链表为空\n&quot;);
        return pHead;
    }
    if(pos &lt; 0)
    {
        printf(&quot;delPosLis函数执行，给定位置pos不合法\n&quot;);
        return pHead;
    }
    del_node=pHead-&gt;next;     //删除节点从第一个结点开始匹配
    while(del_node !=NULL)
    {
        ++i;
        if(i == pos)
        {
            if (pos==1)   //若删除的是头结点
            {
                pHead-&gt;next=del_node-&gt;next;  
            }
            else          //若删除的不是头结点
            {
                pre_node-&gt;next=del_node-&gt;next;
            }
            printf(&quot;delPosList函数执行，删除第 %d个元素\n&quot;,pos);
            break;
        }
        pre_node=del_node;        //设置前一节点

        del_node= del_node-&gt;next; //移到下一结点
    }
    free(del_node);            //释放删除节点
    Head=pHead;
    return Head;
}
</code></pre><h1 id="清除链表"><a href="#清除链表" class="headerlink" title="清除链表"></a>清除链表</h1><h2 id="无头节点链表-4"><a href="#无头节点链表-4" class="headerlink" title="无头节点链表"></a>无头节点链表</h2><pre><code>    /* 释放单链表L中所有的结点，使之成为一个空表 */
void clearList(Node *pHead)
{
    Node *pNext;            //定义一个与pHead相邻节点

    if(pHead == NULL)
    {
        printf(&quot;clearList函数执行，链表为空\n&quot;);
        return;
    }
    while(pHead-&gt;next != NULL)
    {
        pNext = pHead-&gt;next;//保存下一结点的指针
        free(pHead);
        pHead = pNext;      //表头下移

    }
    printf(&quot;clearList函数执行，链表已经清除\n&quot;);
}
</code></pre><h2 id="带头节点链表"><a href="#带头节点链表" class="headerlink" title="带头节点链表"></a>带头节点链表</h2><pre><code>    /* 4.清除线性表L中的所有元素，即释放单链表L中所有的结点，使之成为一个空表 */
void clearHeadList(Node *pHead)
{
    Node *pNext;            //定义一个与pHead相邻节点

    if(pHead-&gt;next== NULL)
    {
        printf(&quot;clearList函数执行，链表为空\n&quot;);
        return;
    }
    while(pHead-&gt;next != NULL)
    {
        pNext = pHead-&gt;next;//保存下一结点的指针
        free(pHead);
        pHead = pNext;      //表头下移

    }
    printf(&quot;clearList函数执行，链表已经清除\n&quot;);
}
</code></pre><h1 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h1><h2 id="无头节点链表-5"><a href="#无头节点链表-5" class="headerlink" title="无头节点链表"></a>无头节点链表</h2><pre><code>int main()
{
    Node *pList=NULL;
    Node *newHead=NULL;
    Node *new2Head=NULL;
    Node *new3Head=NULL;
    int length = 0;
    int emptyFlag=0;
    int posElement=0;
    initList(&amp;pList);
    pList=creatList(pList); 
    printList(pList);
    length=lengthList(pList);
    emptyFlag=isEmptyList(pList);     //判断链表是否为空链表
    posElement=getElement(pList,3);
    printf(&quot;getElement函数执行，位置 3 中的元素为 %d\n&quot;,posElement);   
    getElemAddr(pList,5);   //获得元素5的地址

    modifyElem(pList,4,1);  //将链表中位置4上的元素修改为1
    printList(pList);


    newHead=insertHeadList(pList,5);   //表头插入元素5
    printList(newHead);

    insertLastList(newHead,10);  //表尾插入元素10
    printList(newHead);

    new2Head=delElementList(newHead,5);    //删除第一个元素5
    printList(new2Head);

    new3Head=delPosList(new2Head,2);
    printList(new3Head);

    clearList(new3Head);       //清空链表
    //printList(new3Head);
}
</code></pre><h2 id="带头节点链表-1"><a href="#带头节点链表-1" class="headerlink" title="带头节点链表"></a>带头节点链表</h2><pre><code>    int main()
{
    Node *pList=NULL;
    Node *newHead=NULL;
    Node *new2Head=NULL;
    Node *new3Head=NULL;
    int length = 0;
    int emptyFlag=0;
    int posElement=0;
    initHeadList(&amp;pList);
    pList=creatHeadList(pList); 
    printHeadList(pList);
     length=lengthHeadList(pList);
     emptyFlag=isEmptyHeadList(pList);     //判断链表是否为空链表
     posElement=getElementHeadList(pList,3);
     printf(&quot;getElement函数执行，位置 3 中的元素为 %d\n&quot;,posElement);   
     getElemAddrHeadList(pList,3);   //获得元素3的地址

     modifyElemHeadList(pList,3,1);  //将链表中位置4上的元素修改为1
    printHeadList(pList);

     newHead=inserFirsttHeadList(pList,5);   //表头插入元素5
     printHeadList(newHead);

     insertLasHeadtList(newHead,10);  //表尾插入元素10
    printHeadList(newHead);
     new2Head=delElementHeadList(newHead,5);    //删除第一个元素5
     printHeadList(new2Head);

     new3Head=delPosHeadList(new2Head,2);
     printHeadList(new3Head);

     clearHeadList(new3Head);       //清空链表
}
</code></pre><h1 id="实验验证"><a href="#实验验证" class="headerlink" title="实验验证"></a>实验验证</h1><p><strong>环境：VC6.0</strong></p>
<h2 id="无头节点链表-6"><a href="#无头节点链表-6" class="headerlink" title="无头节点链表"></a>无头节点链表</h2><p><img src="http://ogdiq8qnd.bkt.clouddn.com/17-4-13/57040703-file_1492091453045_9a8e.jpg" alt=""></p>
<h2 id="带头节点链表-2"><a href="#带头节点链表-2" class="headerlink" title="带头节点链表"></a>带头节点链表</h2><p><img src="http://ogdiq8qnd.bkt.clouddn.com/17-4-17/7006612-file_1492436284752_164d6.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> C语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C链表 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo+github搭建个人博客（一）]]></title>
      <url>/2017/03/29/hexo-github-one/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a> 是一个快速、简洁且高效的静态站点生成框架，它基于 <a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a> 。 它有以下特点：  </p>
<ol>
<li>超快速度：<br>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。   </li>
<li>支持Markdown：<br>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。  </li>
<li>一件部署：<br>只需一条指令即可部署到Github Pages，或其他网站  </li>
<li>丰富的插件：<br>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade,CoffeeScript。</li>
</ol>
<a id="more"></a>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序:</p>
<blockquote>
<p><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a><br><a href="http://git-scm.com/" target="_blank" rel="external">Git</a></p>
</blockquote>
<h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><ul>
<li><p>Windows： git<br>下载地址：<a id="download" href="https://git-scm.com/download/win" target="_blank" rel="external"><i class="fa fa-download"></i><span> 官网Download Now</span><br></a>  </p>
</li>
<li><p>安装：在Git Setup中选择Use Git from the windows Command Prompt,除此之外一路Next完成安装</p>
<h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2></li>
<li>Windos:Node.js v0.12.5 x64 :<br>下载地址：<a id="download" href="http://pan.baidu.com/s/1o8qHd1K/" target="_blank" rel="external">  <i class="fa fa-download"></i><span> 百度云Download Now</span>  <a id="download" href="https://nodejs.org/download/" target="_blank" rel="external">  <i class="fa fa-download"></i><span> Node.js官网Download Now</span></a></a></li>
<li>安装：一路NExt即可，等待完成安装  </li>
</ul>
<p>##软件验证<br><strong>运行窗口CMD,输入一下命令，会显示相应版本信息：</strong>  </p>
<ul>
<li><code>git --version</code>   </li>
<li><code>node -v</code>  </li>
<li><code>npm -v</code><h2 id="申请GITHUB"><a href="#申请GITHUB" class="headerlink" title="申请GITHUB"></a>申请GITHUB</h2>申请地址：<a href="https://github.com/" target="_blank" rel="external">Github</a><br>方法简述：  </li>
</ul>
<ol>
<li>申请账号（用户名+密码),并进行邮箱验证 </li>
<li>创建repository，名字与用户名一致。例如我的用户名BlueSky-chamo,Repository name为BlueSky-chamo.github.io  </li>
<li>在创建的repository中settings中的Github pages中选择theme,启用Github page<br>## <h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2>hexo是基于node.js的静态博客，<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">官网</a>也是搭建在GitHub上<br>安装方法：  </li>
<li>新建文件夹blog,右键选择Git Bash  </li>
<li>安装hexo为了避免出现被“墙”，使用<a href="http://npm.taobao.org/" target="_blank" rel="external">淘宝NPM镜像</a><br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>  </li>
<li>安装hexo:<br><code>cnpm install -g hexo-cli</code><br><code>cnpm install hexo --save</code>   </li>
<li>验证：<code>hexo -v</code>  </li>
<li>本地运行：<br>初始化命令：<code>hexo init</code><br>安装生成器：<code>cnpm install</code><br>浏览器本地访问：<code>hexo s</code>,本地浏览器输入<a href="http://localhost:4000/即可本地访问" target="_blank" rel="external">http://localhost:4000/即可本地访问</a>  <h2 id="hexo基本管理"><a href="#hexo基本管理" class="headerlink" title="hexo基本管理"></a>hexo基本管理</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><span id="inline-green"><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── source</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└──</div></pre></td></tr></table></figure>
</span></li>
</ol>
<p>_config.yml：站点配置文件，即博客基本设置<br>source:资源文件，即自定义的页面与推送的博客文件  </p>
<p>###_config.yml文件<br>关键配置：  </p>
<ol>
<li>url: 博客地址，与github申请的repository一致  如：<code>http://BlueSky-chamo.github.io</code>  </li>
<li>theme: 博客主题。默认下为landscape  </li>
<li>deploy: 发布设置。两种方式如下，可自行选择<br><code>repository: https://github.com/BlueSky-chamo/BlueSky-chamo.github.io.git</code><br><code>repository: git@github.com:BlueSky-chamo/BlueSky-chamo.github.io.git</code>  <h3 id="source文件"><a href="#source文件" class="headerlink" title="source文件"></a>source文件</h3>资源文件 </li>
<li>新建文章<br><code>hexo new &quot;hello&quot;</code><br>2.新建页面<br><code>hexo new page hello</code></li>
</ol>
<h2 id="Github与hexo创建联系"><a href="#Github与hexo创建联系" class="headerlink" title="Github与hexo创建联系"></a>Github与hexo创建联系</h2><h3 id="配置SSH-KEY"><a href="#配置SSH-KEY" class="headerlink" title="配置SSH KEY"></a>配置SSH KEY</h3><ol>
<li>生成SSH KEY：<br><code>ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;</code>  </li>
<li>按提示输入密码后在C:\Documents and Settings\Administrator.ssh\id_rsa.pub文件的内容即为秘钥   </li>
<li>登陆github系统，点击右上角的 Account Settings—&gt;SSH Public keys —&gt; add another public keys把你本地生成的密钥复制到里面（key文本框中）  <h3 id="设置git身份信息"><a href="#设置git身份信息" class="headerlink" title="设置git身份信息"></a>设置git身份信息</h3><code>git config --global user.name &quot;你的用户名&quot;</code><br><code>git config --global user.email &quot;你的邮箱&quot;</code>  <h3 id="验证git信息"><a href="#验证git信息" class="headerlink" title="验证git信息"></a>验证git信息</h3><code>SSH -T git@github.com</code>  </li>
</ol>
<h2 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h2><h3 id="安装hexo-git插件"><a href="#安装hexo-git插件" class="headerlink" title="安装hexo git插件"></a>安装hexo git插件</h3><p><code>cnpm install hexo-deployer-git --save</code>  </p>
<h3 id="发布更新博客"><a href="#发布更新博客" class="headerlink" title="发布更新博客"></a>发布更新博客</h3><p><code>hexo d -g</code>  </p>
<p>##参考<br><a href="http://blog.csdn.net/jzooo/article/details/46781805" target="_blank" rel="external">零基础免费搭建个人博客</a></p>
]]></content>
      
        <categories>
            
            <category> 综合 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
